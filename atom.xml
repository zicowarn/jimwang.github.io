<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jim Wang 的个人技术博客</title>
  
  <subtitle>全栈探索之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zicowarn.github.io/"/>
  <updated>2022-05-31T11:08:53.320Z</updated>
  <id>https://zicowarn.github.io/</id>
  
  <author>
    <name>Jim Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机械加工 线切割数控加工T代码一览表</title>
    <link href="https://zicowarn.github.io/2022/05/31/machining-04-wedm-common-t-code-list/"/>
    <id>https://zicowarn.github.io/2022/05/31/machining-04-wedm-common-t-code-list/</id>
    <published>2022-05-31T10:04:36.000Z</published>
    <updated>2022-05-31T11:08:53.320Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号:  <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><h1 id="线切割数控加工T代码一览表"><a href="#线切割数控加工T代码一览表" class="headerlink" title="线切割数控加工T代码一览表"></a>线切割数控加工T代码一览表</h1><table><thead><tr><th>M代码</th><th>Sodick设备</th><th>备注</th></tr></thead><tbody><tr><td><a name="BACK80" href="#T80">T80</a></td><td>开启电极丝驱动</td><td></td></tr><tr><td><a name="BACK81" href="#T81">T81</a></td><td>关闭电极丝驱动</td><td></td></tr><tr><td><a name="BACK82" href="#T82">T82</a></td><td>工作槽排水管关闭</td><td></td></tr><tr><td><a name="BACK83" href="#T83">T83</a></td><td>工作槽排水管开启</td><td></td></tr><tr><td><a name="BACK84" href="#T84">T84</a></td><td>开启高压喷水模式</td><td></td></tr><tr><td><a name="BACK85" href="#T85">T85</a></td><td>关闭高压喷水模式</td><td></td></tr><tr><td><a name="BACK87" href="#T87">T87</a></td><td>开启喷水泵</td><td></td></tr><tr><td><a name="BACK88" href="#T88">T88</a></td><td>关闭喷水泵</td><td></td></tr><tr><td><a name="BACK89" href="#T89">T89</a></td><td>转换至非沉浸式加工模式</td><td></td></tr><tr><td><a name="BACK90" href="#T90">T90</a></td><td>通过自动穿线机的顺序一进行断丝</td><td></td></tr><tr><td><a name="BACK91" href="#T91">T91</a></td><td>通过自动穿线机的顺序二进行断丝</td><td></td></tr><tr><td><a name="BACK94" href="#T94">T94</a></td><td>转换至沉浸式加工模式</td><td></td></tr><tr><td><a name="BACK96" href="#T96">T96</a></td><td>工作槽加注泵开启</td><td></td></tr><tr><td><a name="BACK97" href="#T97">T97</a></td><td>工作槽加注泵关闭</td><td></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">图例 -，通用功能描述相同</span><br><span class="line">图例 x，设备不支持该命令</span><br></pre></td></tr></table></figure><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Jim Wang 公众号:  &lt;a class=&quot;main-button-link&quot; href=&quot;#wechat&quot; rel=&quot;noopener&quot;&gt;巴博萨船长&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：线切割数控机加工T代码一览表，全部代码语法格式都有详细的解释性描述。部分代码采用图文形式进行详细介绍描述。&lt;/p&gt;
&lt;p&gt;Abstract: List of T codes used in WEDM, all code syntax format with detailed explanatory descriptions. Some codes are described in detail in graphic form.&lt;/p&gt;
    
    </summary>
    
    
      <category term="机械加工 相关 - 知识总结" scheme="https://zicowarn.github.io/categories/%E6%9C%BA%E6%A2%B0%E5%8A%A0%E5%B7%A5-%E7%9B%B8%E5%85%B3-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="数控代码" scheme="https://zicowarn.github.io/tags/%E6%95%B0%E6%8E%A7%E4%BB%A3%E7%A0%81/"/>
    
      <category term="T代码" scheme="https://zicowarn.github.io/tags/T%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>机械加工 线切割数控加工常用M代码一览表</title>
    <link href="https://zicowarn.github.io/2022/05/31/machining-03-wedm-common-m-code-list/"/>
    <id>https://zicowarn.github.io/2022/05/31/machining-03-wedm-common-m-code-list/</id>
    <published>2022-05-31T09:04:36.000Z</published>
    <updated>2022-05-31T11:09:00.014Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号:  <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><h1 id="线切割数控加工常用M代码一览表"><a href="#线切割数控加工常用M代码一览表" class="headerlink" title="线切割数控加工常用M代码一览表"></a>线切割数控加工常用M代码一览表</h1><table><thead><tr><th>M代码</th><th>代码功能(通用)</th><th>AC CUT HMI 2</th><th>Sodick设备</th></tr></thead><tbody><tr><td><a name="BACK00" href="#M00">M00</a></td><td>程序停止</td><td>-</td><td>-</td></tr><tr><td><a name="BACK01" href="#M01">M01</a></td><td>可选停止</td><td>-</td><td>-</td></tr><tr><td><a name="BACK02" href="#M02">M02</a></td><td>程序结束</td><td>-</td><td>-</td></tr><tr><td><a name="BACK03" href="#M03">M03</a></td><td></td><td>x</td><td>AWT 跳过</td></tr><tr><td><a name="BACK04" href="#M04">M04</a></td><td></td><td>打开侧门</td><td>x</td></tr><tr><td><a name="BACK05" href="#M05">M05</a></td><td></td><td>关闭侧门</td><td>无视接触感知</td></tr><tr><td><a name="BACK06" href="#M06">M06</a></td><td></td><td>启用穿丝射流</td><td>移动过程不放电</td></tr><tr><td><a name="BACK07" href="#M07">M07</a></td><td></td><td>导电块回退</td><td>x</td></tr><tr><td><a name="BACK08" href="#M08">M08</a></td><td></td><td>打开舱门</td><td>x</td></tr><tr><td><a name="BACK09" href="#M09">M09</a></td><td></td><td>打开侧门</td><td>x</td></tr><tr><td><a name="BACK12" href="#M12">M12</a></td><td></td><td>关闭侧门 + 填充</td><td>x</td></tr><tr><td><a name="BACK13" href="#M13">M13</a></td><td></td><td>等待门关闭 + 填充</td><td>x</td></tr><tr><td><a name="BACK14" href="#M14">M14</a></td><td></td><td>重新穿丝块初始化</td><td>x</td></tr><tr><td><a name="BACK18" href="#M18">M18</a></td><td></td><td>打开液槽门</td><td>x</td></tr><tr><td><a name="BACK19" href="#M19">M19</a></td><td></td><td>关闭液槽门</td><td>x</td></tr><tr><td><a name="BACK23" href="#M23">M23</a></td><td></td><td>取消激活几何策略</td><td>x</td></tr><tr><td><a name="BACK24" href="#M24">M24</a></td><td></td><td>激活几何策略</td><td>x</td></tr><tr><td><a name="BACK27" href="#M27">M27</a></td><td></td><td>取消激活保护策略</td><td>x</td></tr><tr><td><a name="BACK28" href="#M28">M28</a></td><td></td><td>激活保护策略，等级1</td><td>x</td></tr><tr><td><a name="BACK29" href="#M29">M29</a></td><td></td><td>激活保护策略，等级2</td><td>x</td></tr><tr><td><a name="BACK33" href="#M33">M33</a></td><td></td><td>x</td><td>电极丝处理臂向前旋转</td></tr><tr><td><a name="BACK34" href="#M34">M34</a></td><td></td><td>加注工作水槽</td><td>x</td></tr><tr><td><a name="BACK35" href="#M35">M35</a></td><td></td><td>排空工作水槽</td><td>x</td></tr><tr><td><a name="BACK36" href="#M36">M36</a></td><td></td><td>x</td><td>半水箱门限制设置</td></tr><tr><td><a name="BACK38" href="#M38">M38</a></td><td></td><td>加注工作水槽和浸入模式</td><td>x</td></tr><tr><td><a name="BACK39" href="#M39">M39</a></td><td></td><td>加注工作水槽和喷水模式</td><td>x</td></tr><tr><td><a name="BACK43" href="#M43">M43</a></td><td></td><td>x</td><td>电极丝处理臂向后旋转</td></tr><tr><td><a name="BACK44" href="#M44">M44</a></td><td></td><td>循环泵关闭</td><td>x</td></tr><tr><td><a name="BACK45" href="#M45">M45</a></td><td></td><td>循环泵打开</td><td>x</td></tr><tr><td><a name="BACK46" href="#M46">M46</a></td><td></td><td>x</td><td>半水箱门限制取消</td></tr><tr><td><a name="BACK50" href="#M50">M50</a></td><td>自动剪丝</td><td></td><td></td></tr><tr><td><a name="BACK60" href="#M60">M60</a></td><td>自动穿丝</td><td></td><td></td></tr><tr><td><a name="BACK62" href="#M62">M62</a></td><td></td><td>完成工作水槽排空</td><td></td></tr><tr><td><a name="BACK67" href="#M67">M67</a></td><td></td><td>排空液槽</td><td></td></tr><tr><td><a name="BACK98" href="#M98">M98</a></td><td></td><td>x</td><td>从主程序跳转到子程序</td></tr><tr><td><a name="BACK99" href="#M99">M99</a></td><td></td><td>x</td><td>从子程序跳转到主程序</td></tr><tr><td><a name="BACK199" href="#M199">M199</a></td><td></td><td>x</td><td>半水箱门限制取消</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">图例 -，通用功能描述相同</span><br><span class="line">图例 x，设备不支持该命令</span><br></pre></td></tr></table></figure><h3 id="M00：程序停止-返回"><a href="#M00：程序停止-返回" class="headerlink" title="M00：程序停止    [返回]"></a><a name="M00">M00：程序停止</a>    <a href="#BACK00">[返回]</a></h3><p>代码格式：M00</p><p>解释：程序停止功能。停止后点击M00会从头开始。M00指令实际上是一个暂停指令。功效是履行此指令后，机床结束一切操作。即进丝等动作结束。但模态信息全数被保存，在按下把持面板上的启动指令后，机床重新启动，持续履行后面的程序。</p><p>用处：M00该指令重要用于工件在加工过程中需停机检查、测量零件、手工换刀或交接班等。</p><h3 id="M01：程序停止-返回"><a href="#M01：程序停止-返回" class="headerlink" title="M01：程序停止    [返回]"></a><a name="M01">M01：程序停止</a>    <a href="#BACK01">[返回]</a></h3><p>代码格式：M01</p><p>解释：可选的停止功能，停止后点击M01就会继续。M01指令的功效与M00类似，不同的是，M01只有在预先按下把持面板上“可选停止开关”按钮的情形下，程序才会结束。倘若未按下“可选停止开关”按钮，程序履行到M01时不会停止，而是持续履行下面的程序。M01结束之后，按启动按钮可以持续履行后面的程序。</p><p>用处：M01该指令重要用于加工工件抽样检查，清理切屑等</p><h3 id="M02：程序结束-返回"><a href="#M02：程序结束-返回" class="headerlink" title="M02：程序结束    [返回]"></a><a name="M02">M02：程序结束</a>    <a href="#BACK02">[返回]</a></h3><p>代码格式：M02</p><p>解释：程序结束</p><p>用处：作为线切割NC代码的最后一行。</p><h3 id="M03：AWT-跳过-返回"><a href="#M03：AWT-跳过-返回" class="headerlink" title="M03：AWT 跳过    [返回]"></a><a name="M03">M03：AWT 跳过</a>    <a href="#BACK03">[返回]</a></h3><p>代码格式：M03</p><p>解释：代码搜索</p><p>用处：AWT为自动穿<strong>丝</strong>装置. 实现自动熔断及自动穿<strong>丝</strong>作业</p><h3 id="M04：打开侧门-返回"><a href="#M04：打开侧门-返回" class="headerlink" title="M04：打开侧门   [返回]"></a><a name="M04">M04：打开侧门</a>   <a href="#BACK04">[返回]</a></h3><p>代码格式：M04</p><p>解释：打开侧门</p><p>用处：</p><h3 id="M05：无视接触感知-返回"><a href="#M05：无视接触感知-返回" class="headerlink" title="M05：无视接触感知   [返回]"></a><a name="M05">M05：无视接触感知</a>   <a href="#BACK05">[返回]</a></h3><p>代码格式：M05</p><p>解释：无视接触感知；关闭侧门（ AC CUT HMI 2 ）</p><p>用处：用于空跑（Dry Run）。为无视接触感知（No sensor touch）模式下，如果电极丝触碰到其它物体时，电极丝会断开。用于当你想通过现有的切口进行空跑时。所有轴的电机运行，所有限位开关被检查。</p><h3 id="M06：移动过程不放电-返回"><a href="#M06：移动过程不放电-返回" class="headerlink" title="M06：移动过程不放电   [返回]"></a><a name="M06">M06：移动过程不放电</a>   <a href="#BACK06">[返回]</a></h3><p>代码格式：M06</p><p>解释：移动过程不放电</p><p>用处：</p><p>AC CUT HMI 2 设备：启用穿丝射流</p><h3 id="M07：导电块回退-返回"><a href="#M07：导电块回退-返回" class="headerlink" title="M07：导电块回退   [返回]"></a><a name="M07">M07：导电块回退</a>   <a href="#BACK07">[返回]</a></h3><p>代码格式：M07</p><p>解释：启用穿丝射流（AC CUT HMI 2 ）</p><p>用处：</p><h3 id="M08：打开舱门-返回"><a href="#M08：打开舱门-返回" class="headerlink" title="M08：打开舱门   [返回]"></a><a name="M08">M08：打开舱门</a>   <a href="#BACK08">[返回]</a></h3><p>代码格式：M08</p><p>解释：打开舱门</p><p>用处：不常用此M命令</p><h3 id="M09：打开侧门-返回"><a href="#M09：打开侧门-返回" class="headerlink" title="M09：打开侧门   [返回]"></a><a name="M09">M09：打开侧门</a>   <a href="#BACK09">[返回]</a></h3><p>代码格式：M09</p><p>解释：打开侧门</p><p>用处：不常用此M命令</p><h3 id="M12：关闭侧门-填充-返回"><a href="#M12：关闭侧门-填充-返回" class="headerlink" title="M12：关闭侧门 + 填充   [返回]"></a><a name="M12">M12：关闭侧门 + 填充</a>   <a href="#BACK12">[返回]</a></h3><p>代码格式：M12</p><p>解释：关闭侧门 + 填充</p><p>用处：不常用此M命令</p><h3 id="M13：等待门关闭-填充-返回"><a href="#M13：等待门关闭-填充-返回" class="headerlink" title="M13：等待门关闭 + 填充   [返回]"></a><a name="M13">M13：等待门关闭 + 填充</a>   <a href="#BACK13">[返回]</a></h3><p>代码格式：M13</p><p>解释：等待门关闭 + 填充</p><p>用处：不常用此M命令</p><h3 id="M14：重新穿丝块初始化-返回"><a href="#M14：重新穿丝块初始化-返回" class="headerlink" title="M14：重新穿丝块初始化   [返回]"></a><a name="M14">M14：重新穿丝块初始化</a>   <a href="#BACK14">[返回]</a></h3><p>代码格式：M14</p><p>解释：重新穿丝块初始化</p><p>用处：</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Jim Wang 公众号:  &lt;a class=&quot;main-button-link&quot; href=&quot;#wechat&quot; rel=&quot;noopener&quot;&gt;巴博萨船长&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：线切割数控机加工M代码一览表，全部代码语法格式都有详细的解释性描述。部分代码采用图文形式进行详细介绍描述。&lt;/p&gt;
&lt;p&gt;Abstract: List of M codes commonly used in WEDM, all code syntax format with detailed explanatory descriptions. Some codes are described in detail in graphic form.&lt;/p&gt;
    
    </summary>
    
    
      <category term="机械加工 相关 - 知识总结" scheme="https://zicowarn.github.io/categories/%E6%9C%BA%E6%A2%B0%E5%8A%A0%E5%B7%A5-%E7%9B%B8%E5%85%B3-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="数控代码" scheme="https://zicowarn.github.io/tags/%E6%95%B0%E6%8E%A7%E4%BB%A3%E7%A0%81/"/>
    
      <category term="M代码" scheme="https://zicowarn.github.io/tags/M%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>机械加工 线切割数控加工常用G代码一览表</title>
    <link href="https://zicowarn.github.io/2022/05/30/machining-02-wedm-common-g-code-list/"/>
    <id>https://zicowarn.github.io/2022/05/30/machining-02-wedm-common-g-code-list/</id>
    <published>2022-05-30T05:04:36.000Z</published>
    <updated>2022-05-30T05:14:24.435Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号:  <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><h1 id="线切割数控加工常用G代码一览表"><a href="#线切割数控加工常用G代码一览表" class="headerlink" title="线切割数控加工常用G代码一览表"></a>线切割数控加工常用G代码一览表</h1><table><thead><tr><th>G代码</th><th>代码功能</th><th>备注信息</th></tr></thead><tbody><tr><td><a name="BACKAJ" href="#GAJ">GAJ</a></td><td>导丝嘴设置循环（WAL+GDI）</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACKME" href="#GME">GME</a></td><td>带锥度专家的导丝嘴设置循环</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACKOP" href="#GOP">GOP</a></td><td>不放电移动至一点</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK00" href="#G00">G00 </a></td><td>不加工快速移动</td><td></td></tr><tr><td><a name="BACK01" href="#G01">G01</a></td><td>线性插补，直线型切割移动</td><td></td></tr><tr><td><a name="BACK02" href="#G02">G02</a></td><td>圆弧插补，圆弧型切割移动 - 顺时针</td><td></td></tr><tr><td><a name="BACK03" href="#G03">G03</a></td><td>圆弧插补，圆弧形切割移动 - 逆时针</td><td></td></tr><tr><td><a name="BACK104" href="#G04">G04</a></td><td>暂停</td><td></td></tr><tr><td><a name="BACK105" href="#G05">G05</a></td><td>开启X轴镜像（X轴变为红色）</td><td>Sodick 设备，程序结束前M02使用G09关闭镜像</td></tr><tr><td><a name="BACK06" href="#G06">G06</a></td><td>开启Y轴镜像（Y轴变为红色）</td><td>Sodick 设备，程序结束前M02使用G09关闭镜像</td></tr><tr><td><a name="BACK08" href="#G08">G08</a></td><td>开启X与Y轴交换（XY轴变为小写xy）</td><td>Sodick 设备 ，程序结束前M02使用G09关闭交换</td></tr><tr><td><a name="BACK09" href="#G09">G09</a></td><td>取消G05，G06和G08设置</td><td>Sodick 设备，开启镜像与交换，则必须使用该命令。</td></tr><tr><td><a name="BACK10" href="#G10">G10</a></td><td>修改用户参数</td><td></td></tr><tr><td><a name="BACK11" href="#G11">G11</a></td><td>特殊指令或块跳过开启</td><td>AC Millennium中用于定义工艺</td></tr><tr><td><a name="BACK12" href="#G12">G12</a></td><td>块跳过关闭</td><td>Sodick 设备，块跳过</td></tr><tr><td><a name="BACK13" href="#G13">G13</a></td><td>AWT REF=1 使用C888放电的断线恢复</td><td>Sodick 设备AWT</td></tr><tr><td><a name="BACK14" href="#G14">G14</a></td><td>修改加工参数，AWT REF=0</td><td>Sodick 设备AWT</td></tr><tr><td><a name="BACK15" href="#G15">G15</a></td><td>AWT REF=2 不使用C888放电的断线恢复</td><td>Sodick 设备AWT</td></tr><tr><td><a name="BACK20" href="#G20">G20</a></td><td>数值单位设定，英制</td><td></td></tr><tr><td><a name="BACK21" href="#G21">G21</a></td><td>数值单位设定，公制</td><td></td></tr><tr><td><a name="BACK22" href="#G22">G22</a></td><td>柔性限制开启</td><td></td></tr><tr><td><a name="BACK23" href="#G23">G23</a></td><td>柔性限制关闭</td><td></td></tr><tr><td><a name="BACK26" href="#G26">G26</a></td><td>轮廓旋转开启</td><td></td></tr><tr><td><a name="BACK27" href="#G27">G27</a></td><td>轮廓旋转关闭</td><td></td></tr><tr><td><a name="BACK28" href="#G28">G28</a></td><td>返回G29保存位置</td><td></td></tr><tr><td><a name="BACK29" href="#G29">G29</a></td><td>参考点保存（用于自动穿丝）</td><td></td></tr><tr><td><a name="BACK30" href="#G30">G30</a></td><td>返回到最后一个G92位置</td><td></td></tr><tr><td><a name="BACK40" href="#G40">G40</a></td><td>取消电极丝半径补偿</td><td></td></tr><tr><td><a name="BACK41" href="#G41">G41</a></td><td>（向左偏移）电极丝前进方向左侧补偿</td><td></td></tr><tr><td><a name="BACK42" href="#G42">G42</a></td><td>（向右偏移）电极丝前进方向右侧补偿</td><td></td></tr><tr><td><a name="BACK48" href="#G48">G48</a></td><td>拐角倒角功能开启</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK49" href="#G49">G49</a></td><td>拐角倒角功能关闭</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK50" href="#G50">G50</a></td><td>取消锥度</td><td></td></tr><tr><td><a name="BACK51" href="#G51">G51</a></td><td>（左侧锥度）电极丝向前进方向左侧倾斜</td><td></td></tr><tr><td><a name="BACK52" href="#G52">G52</a></td><td>（右侧锥度）电极丝向前进方向右侧倾斜</td><td></td></tr><tr><td><a name="BACK23" href="#G53">G53</a></td><td>在机床坐标系中的快速移动</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK54" href="#G54">G54</a></td><td>工作坐标系0</td><td></td></tr><tr><td><a name="BACK55" href="#G55">G55</a></td><td>在机床坐标系中的加工移动</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK56" href="#G56">G56</a></td><td>工作坐标系2</td><td></td></tr><tr><td><a name="BACK57" href="#G57">G57</a></td><td>工作坐标系3</td><td></td></tr><tr><td><a name="BACK58" href="#G58">G58</a></td><td>半径锥度常数（线与弧线正切）</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK59" href="#G59">G59</a></td><td>圆锥锥度（线与弧线正切）</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK60" href="#G60">G60</a></td><td>恒定拐角半径</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK61" href="#G61">G61</a></td><td>最小锥度</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK62" href="#G62">G62</a></td><td>平均锥度</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK63" href="#G63">G63</a></td><td>最大锥度</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK74" href="#G74">G74</a></td><td>定义工件坐标系</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK75" href="#G75">G75</a></td><td>在工件坐标系中定位</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK80" href="#G80">G80</a></td><td>感应器接触</td><td></td></tr><tr><td><a name="BACK81" href="#G81">G81</a></td><td>返回至限制区域</td><td></td></tr><tr><td><a name="BACK82" href="#G82">G82</a></td><td>移动到轴显示的一半</td><td></td></tr><tr><td><a name="BACK83" href="#G83">G83</a></td><td>保持当前位置并保存至H寄存器</td><td></td></tr><tr><td><a name="BACK85" href="#G85">G85</a></td><td>在工件坐标系中加工移动</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK90" href="#G90">G90</a></td><td>设置绝对模式</td><td></td></tr><tr><td><a name="BACK91" href="#G91">G91</a></td><td>设置增量模式</td><td></td></tr><tr><td><a name="BACK92" href="#G92">G92</a></td><td>定义加工坐标系</td><td></td></tr><tr><td><a name="BACK93" href="#G93">G93</a></td><td>定义局部坐标系</td><td></td></tr><tr><td><a name="BACK95" href="#G95">G95</a></td><td>降低加工频率</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK97" href="#G97">G97</a></td><td>定义全局坐标系</td><td></td></tr><tr><td><a name="BACK104" href="#G104">G104</a></td><td>在所有锐角处驻留（Dwell）</td><td></td></tr><tr><td><a name="BACK105" href="#G105">G105</a></td><td>取消G104设定</td><td></td></tr><tr><td><a name="BACK110" href="#G110">G110</a></td><td>旋转轴模式</td><td></td></tr><tr><td><a name="BACK111" href="#G111">G111</a></td><td>转速</td><td></td></tr><tr><td><a name="BACK125" href="#G125">G125</a></td><td>无接触位置搜索循环</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK126" href="#G126">G126</a></td><td>开启坐标系旋转</td><td></td></tr><tr><td><a name="BACK127" href="#G127">G127</a></td><td>关闭坐标系旋转</td><td></td></tr><tr><td><a name="BACK130" href="#G130">G130</a></td><td>找边循环</td><td></td></tr><tr><td><a name="BACK131" href="#G131">G131</a></td><td>检查干扰因素 = 0</td><td></td></tr><tr><td><a name="BACK132" href="#G132">G132</a></td><td>检查干扰因素 = 2</td><td></td></tr><tr><td><a name="BACK133" href="#G133">G133</a></td><td>两个平行表面内部找中心循环</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK134" href="#G134">G134</a></td><td>找孔循环</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK136" href="#G136">G136</a></td><td>外圆柱找中心循环</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK137" href="#G137">G137</a></td><td>找角循环</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK138" href="#G138">G138</a></td><td>以两孔执行工件找正</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK140" href="#G140">G140</a></td><td>关闭四轴偏置</td><td></td></tr><tr><td><a name="BACK141" href="#G141">G141</a></td><td>四轴左侧偏置</td><td></td></tr><tr><td><a name="BACK142" href="#G142">G142</a></td><td>四轴右侧偏置</td><td></td></tr><tr><td><a name="BACK150" href="#G143">G143</a></td><td>两个平行外表面中找中线面循环</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK145" href="#G145">G145</a></td><td>工件调平测量</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK145" href="#G150">G150</a></td><td>电极丝和导丝嘴赵正电极丝找正</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK152" href="#G152">G152</a></td><td>导丝嘴设置循环（WAL+GDI）</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK153" href="#G153">G153</a></td><td>带锥度专家的导丝嘴设置循环</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK154" href="#G154">G154</a></td><td>工件表面对齐</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK157" href="#G157">G157</a></td><td>测量探针校准</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK174" href="#G174">G174</a></td><td>工件坐标系相对机器坐标系的偏移</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACK192" href="#G192">G192</a></td><td>加工坐标系相对工件坐标系的偏移</td><td>AC CUT HMI 2</td></tr><tr><td><a name="BACKFLAG2D0" href="#FLAG2D0">FLAG2D0</a></td><td>M01 代码关闭</td><td>Sodick 设备</td></tr><tr><td><a name="BACKFLAG2D1" href="#FLAG2D1">FLAG2D1</a></td><td>M01 代码开启</td><td>Sodick 设备</td></tr><tr><td><a name="BACKFLAG3D" href="#FLAG3D">FLAG3D</a></td><td>比例因子输入</td><td>Sodick 设备</td></tr></tbody></table><h3 id="GAJ：导丝嘴设置循环（WAL-GDI）-返回"><a href="#GAJ：导丝嘴设置循环（WAL-GDI）-返回" class="headerlink" title="GAJ：导丝嘴设置循环（WAL+GDI）  [返回]"></a><a name="GAJ">GAJ：导丝嘴设置循环（WAL+GDI）</a>  <a href="#BACKAJ">[返回]</a></h3><p>代码格式：GAJ ZBxxx Axxx WSxxx WBxxx</p><p>A 电极丝倾斜度</p><p>WS 电极丝速度</p><p>WB 电极丝张力</p><h3 id="GME：带锥度专家的导丝嘴设置循环-返回"><a href="#GME：带锥度专家的导丝嘴设置循环-返回" class="headerlink" title="GME：带锥度专家的导丝嘴设置循环  [返回]"></a><a name="GME">GME：带锥度专家的导丝嘴设置循环</a>  <a href="#BACKME">[返回]</a></h3><p>代码格式：GME ZBxxx  WSxxx WBxxx</p><p>WS 电极丝速度</p><p>WB 电极丝张力</p><h3 id="GOH：用于定位上喷嘴的Z轴移动-返回"><a href="#GOH：用于定位上喷嘴的Z轴移动-返回" class="headerlink" title="GOH：用于定位上喷嘴的Z轴移动  [返回]"></a><a name="GOH">GOH：用于定位上喷嘴的Z轴移动</a>  <a href="#BACKOH">[返回]</a></h3><p>代码格式：GOH <WPH>或Hxxx</WPH></p><p>WPH</p><p>H 高度</p><h3 id="GOP：不放电移动至一点-返回"><a href="#GOP：不放电移动至一点-返回" class="headerlink" title="GOP：不放电移动至一点   [返回]"></a><a name="GOP">GOP：不放电移动至一点</a>   <a href="#BACKOP">[返回]</a></h3><p>代码格式：GOP <n> , Nxxx或Exxx</n></p><p>n  点编号</p><p>N 点名字</p><p>E 位置 [0机械 1电器]</p><h3 id="G00：不加工快速移动-返回"><a href="#G00：不加工快速移动-返回" class="headerlink" title="G00：不加工快速移动   [返回]"></a><a name="G00">G00：不加工快速移动</a>   <a href="#BACK00">[返回]</a></h3><p>代码格式：</p><h3 id="G01：线性插补，直线型切割移动-返回"><a href="#G01：线性插补，直线型切割移动-返回" class="headerlink" title="G01：线性插补，直线型切割移动   [返回]"></a><a name="G01">G01：线性插补，直线型切割移动</a>   <a href="#BACK01">[返回]</a></h3><p>代码格式：G01 Xxxx Yxxx Uxxx Vxxx Zxxx Axxx Bxxx Exxx</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>U 四轴线割时上部喷嘴的相对或绝对坐标X轴数值</p><p>V 四轴线割时上部喷嘴的相对或绝对坐标Y轴数值</p><p>Z H/Z 五轴线割时，相对或绝对坐标Z轴数值或高度值Z</p><p>A</p><p>B</p><p>E 位置 [0机械 1电器]</p><h3 id="G02：圆弧插补，圆弧型切割移动-顺时针-返回"><a href="#G02：圆弧插补，圆弧型切割移动-顺时针-返回" class="headerlink" title="G02：圆弧插补，圆弧型切割移动 - 顺时针   [返回]"></a><a name="G02">G02：圆弧插补，圆弧型切割移动 - 顺时针</a>   <a href="#BACK02">[返回]</a></h3><p>代码格式：G02 Xxxx Yxxx J+/-x.xx</p><p>X</p><p>Y</p><p>J</p><h3 id="G03：圆弧插补，圆弧型切割移动-逆时针-返回"><a href="#G03：圆弧插补，圆弧型切割移动-逆时针-返回" class="headerlink" title="G03：圆弧插补，圆弧型切割移动 - 逆时针   [返回]"></a><a name="G03">G03：圆弧插补，圆弧型切割移动 - 逆时针</a>   <a href="#BACK03">[返回]</a></h3><p>代码格式：G03 Xxxx Yxxx J+/-x.xx</p><p>X</p><p>Y</p><p>J</p><h3 id="G04：暂停-返回"><a href="#G04：暂停-返回" class="headerlink" title="G04：暂停   [返回]"></a><a name="G04">G04：暂停   <a href="#BACK04">[返回]</a></a></h3><p>代码格式：G04 Pxxx</p><p>P 参数</p><h3 id="G05：开启X轴镜像（X轴变为红色）-返回"><a href="#G05：开启X轴镜像（X轴变为红色）-返回" class="headerlink" title="G05：开启X轴镜像（X轴变为红色）  [返回]"></a><a name="G05">G05：开启X轴镜像（X轴变为红色）</a>  <a href="#BACK05">[返回]</a></h3><p>代码格式：G05</p><p><img src="/2022/05/30/machining-02-wedm-common-g-code-list/image-20220528135010308.png" alt="image-20220528135010308"></p><h3 id="G06：开启Y轴镜像（Y轴变为红色）-返回"><a href="#G06：开启Y轴镜像（Y轴变为红色）-返回" class="headerlink" title="G06：开启Y轴镜像（Y轴变为红色）   [返回]"></a><a name="G06">G06：开启Y轴镜像（Y轴变为红色）</a>   <a href="#BACK06">[返回]</a></h3><p>代码格式：G06</p><p><img src="/2022/05/30/machining-02-wedm-common-g-code-list/image-20220528135231626.png" alt="image-20220528135231626"></p><h3 id="G08：开启X与Y轴交换（XY轴变为小写xy）-返回"><a href="#G08：开启X与Y轴交换（XY轴变为小写xy）-返回" class="headerlink" title="G08：开启X与Y轴交换（XY轴变为小写xy）   [返回]"></a><a name="G08">G08：开启X与Y轴交换（XY<code>轴变为小写</code>xy）</a>   <a href="#BACK08">[返回]</a></h3><p>代码格式：G08</p><p><img src="/2022/05/30/machining-02-wedm-common-g-code-list/image-20220528141049187.png" alt="image-20220528141049187"></p><h3 id="G09：取消G05，G06和G08设置-返回"><a href="#G09：取消G05，G06和G08设置-返回" class="headerlink" title="G09：取消G05，G06和G08设置   [返回]"></a><a name="G09">G09：取消G05，G06和G08设置</a>   <a href="#BACK09">[返回]</a></h3><p>代码格式：G09</p><h3 id="G10：修改用户参数-返回"><a href="#G10：修改用户参数-返回" class="headerlink" title="G10：修改用户参数   [返回]"></a><a name="G10">G10：修改用户参数</a>   <a href="#BACK10">[返回]</a></h3><p>代码格式：G10 Pxxx Bxxx Rxxx</p><p>P 限制或激活ID</p><p>B 限制激活或赋值</p><p>R 数值</p><h3 id="G11：特殊指令-返回"><a href="#G11：特殊指令-返回" class="headerlink" title="G11：特殊指令   [返回]"></a><a name="G11">G11：特殊指令</a>   <a href="#BACK11">[返回]</a></h3><p>代码格式：G11 (TEC, n)</p><p>G11 (TEC,TEST); Millenium 工艺文件<br>G11 (WIR,TEST); Millenium 线型文件</p><p>Sodick中，G11用于激活NC代码程序中的斜杠“/”</p><h3 id="G12：块跳过关闭-返回"><a href="#G12：块跳过关闭-返回" class="headerlink" title="G12：块跳过关闭   [返回]"></a><a name="G12">G12：块跳过关闭</a>   <a href="#BACK12">[返回]</a></h3><p>代码格式：G12</p><p>Sodick中，与G11成对出现。</p><h3 id="G13：-AWT-REF-1-使用C888放电的断线恢复-返回"><a href="#G13：-AWT-REF-1-使用C888放电的断线恢复-返回" class="headerlink" title="G13： AWT REF=1 使用C888放电的断线恢复   [返回]"></a><a name="G13">G13： AWT REF=1 使用C888<strong>放电的断线恢复</strong></a>   <a href="#BACK13">[返回]</a></h3><p>代码格式：G13</p><h3 id="G14：修改加工参数，AWT-REF-0-返回"><a href="#G14：修改加工参数，AWT-REF-0-返回" class="headerlink" title="G14：修改加工参数，AWT REF=0   [返回]"></a><a name="G14">G14：修改加工参数，AWT REF=0</a>   <a href="#BACK14">[返回]</a></h3><p>代码格式：G14 Ixxx Uxxx Cxxx Pxxx Rxxx Vxxx Lxxx Zxxx Bxxx Fxxx Wxxx</p><p>代码格式：G14, Sodick 设备</p><p>Sodick 中，AWT REF=0 关闭断线恢复</p><h3 id="G15：AWT-REF-2-不使用C888放电的断线恢复-返回"><a href="#G15：AWT-REF-2-不使用C888放电的断线恢复-返回" class="headerlink" title="G15：AWT REF=2 不使用C888放电的断线恢复   [返回]"></a><a name="G15">G15：AWT REF=2 不使用C888放电的断线恢复</a>   <a href="#BACK15">[返回]</a></h3><p>代码格式：G15, Sodick 设备</p><h3 id="G20：数值单位设定，英制-返回"><a href="#G20：数值单位设定，英制-返回" class="headerlink" title="G20：数值单位设定，英制   [返回]"></a><a name="G20">G20：数值单位设定，英制</a>   <a href="#BACK20">[返回]</a></h3><p>代码格式：G20</p><h3 id="G21：数值单位设定，公制-返回"><a href="#G21：数值单位设定，公制-返回" class="headerlink" title="G21：数值单位设定，公制   [返回]"></a><a name="G21">G21：数值单位设定，公制</a>   <a href="#BACK21">[返回]</a></h3><p>代码格式：G21</p><h3 id="G22：柔性限制开启-返回"><a href="#G22：柔性限制开启-返回" class="headerlink" title="G22：柔性限制开启   [返回]"></a><a name="G22">G22：柔性限制开启</a>   <a href="#BACK22">[返回]</a></h3><p>代码格式：G22</p><h3 id="G23：柔性限制关闭-返回"><a href="#G23：柔性限制关闭-返回" class="headerlink" title="G23：柔性限制关闭   [返回]"></a><a name="G23">G23：柔性限制关闭</a>   <a href="#BACK23">[返回]</a></h3><p>代码格式：G23</p><h3 id="G26：轮廓旋转开启-返回"><a href="#G26：轮廓旋转开启-返回" class="headerlink" title="G26：轮廓旋转开启   [返回]"></a><a name="G26">G26：轮廓旋转开启</a>   <a href="#BACK26">[返回]</a></h3><p>代码格式：G26 RAxx.xx</p><p>RA 旋转角度，该值会累积且无最大值限制，</p><p>G26 RA60.0</p><p>G90</p><p>G92 X4. Y2.</p><p>…</p><p>G27</p><p>M02</p><p>用于在同一坐标系下围绕G92位置旋转编程的轮廓。程序运行时有效，点击OFF或者遇到M02时，旋转角度自动重置为0。常用于处理齿轮加工编程。</p><h3 id="G27：轮廓旋转关闭-返回"><a href="#G27：轮廓旋转关闭-返回" class="headerlink" title="G27：轮廓旋转关闭   [返回]"></a><a name="G27">G27：轮廓旋转关闭</a>   <a href="#BACK27">[返回]</a></h3><p>代码格式：G27</p><p>与G26成对出现</p><h3 id="G28：返回G29保存位置-返回"><a href="#G28：返回G29保存位置-返回" class="headerlink" title="G28：返回G29保存位置   [返回]"></a><a name="G28">G28：返回G29保存位置</a>   <a href="#BACK28">[返回]</a></h3><p>代码格式：G28</p><h3 id="G29：参考点保存（用于自动穿丝）-返回"><a href="#G29：参考点保存（用于自动穿丝）-返回" class="headerlink" title="G29：参考点保存（用于自动穿丝）   [返回]"></a><a name="G29">G29：参考点保存（用于自动穿丝）</a>   <a href="#BACK29">[返回]</a></h3><p>代码格式：</p><p>G92 X0 Y0<br>G29</p><h3 id="G30：返回到最后一个G92位置-返回"><a href="#G30：返回到最后一个G92位置-返回" class="headerlink" title="G30：返回到最后一个G92位置   [返回]"></a><a name="G30">G30：返回到最后一个G92位置</a>   <a href="#BACK30">[返回]</a></h3><p>代码格式：</p><p>G92 X0 Y0</p><p>….</p><p>G30</p><h3 id="G40：取消电极丝半径补偿-返回"><a href="#G40：取消电极丝半径补偿-返回" class="headerlink" title="G40：取消电极丝半径补偿   [返回]"></a><a name="G40">G40：取消电极丝半径补偿</a>   <a href="#BACK40">[返回]</a></h3><p>代码格式：</p><p>代码格式：</p><p>G92X0Y0</p><p>G41H001</p><p>…</p><p>G40Y0</p><h3 id="G41：电极丝前进方向左侧补偿（向左偏移）-返回"><a href="#G41：电极丝前进方向左侧补偿（向左偏移）-返回" class="headerlink" title="G41：电极丝前进方向左侧补偿（向左偏移）   [返回]"></a><a name="G41">G41：电极丝前进方向左侧补偿（向左偏移）</a>   <a href="#BACK41">[返回]</a></h3><p>代码格式：</p><p>G92X0Y0</p><p>G41H001</p><p>…</p><p>G40Y0</p><p><img src="/2022/05/30/machining-02-wedm-common-g-code-list/image-20220528082103526.png" alt="image-20220528082103526"></p><h3 id="G42：电极丝前进方向左侧补偿（向右偏移）-返回"><a href="#G42：电极丝前进方向左侧补偿（向右偏移）-返回" class="headerlink" title="G42：电极丝前进方向左侧补偿（向右偏移）   [返回]"></a><a name="G42">G42：电极丝前进方向左侧补偿（向右偏移）</a>   <a href="#BACK42">[返回]</a></h3><p>代码格式：</p><p>G92X0Y0</p><p>G42H001</p><p>…</p><p>G40Y0</p><p><img src="/2022/05/30/machining-02-wedm-common-g-code-list/image-20220528082106302.png" alt="image-20220528082106302"></p><h3 id="G48：拐角倒角功能开启-返回"><a href="#G48：拐角倒角功能开启-返回" class="headerlink" title="G48：拐角倒角功能开启   [返回]"></a><a name="G48">G48：拐角倒角功能开启</a>   <a href="#BACK48">[返回]</a></h3><p>代码格式：G48 Rxxx Kxxx</p><p>R</p><p>K</p><h3 id="G49：拐角倒角功能关闭-返回"><a href="#G49：拐角倒角功能关闭-返回" class="headerlink" title="G49：拐角倒角功能关闭   [返回]"></a><a name="G49">G49：拐角倒角功能关闭</a>   <a href="#BACK49">[返回]</a></h3><p>代码格式：</p><p>G48 R2 K2</p><p>…</p><p>G49</p><h3 id="G50：取消锥度-返回"><a href="#G50：取消锥度-返回" class="headerlink" title="G50：取消锥度   [返回]"></a><a name="G50">G50：取消锥度</a>   <a href="#BACK50">[返回]</a></h3><p>代码格式：</p><p>G52 A0.5</p><p>G01 X.15 Y.25</p><p>…</p><p>G50</p><p>…</p><p>G51 A0.5</p><p>G01 X-.15 Y.25</p><p>…</p><p>G50</p><h3 id="G51：（左侧锥度）电极丝向前进方向左侧倾斜-返回"><a href="#G51：（左侧锥度）电极丝向前进方向左侧倾斜-返回" class="headerlink" title="G51：（左侧锥度）电极丝向前进方向左侧倾斜      [返回]"></a><a name="G51">G51：（左侧锥度）电极丝向前进方向左侧倾斜   </a>   <a href="#BACK51">[返回]</a></h3><p>代码格式：G51 Axxx</p><p>A 锥度</p><p><img src="/2022/05/30/machining-02-wedm-common-g-code-list/image-20220528133330717.png" alt="image-20220528133330717"></p><h3 id="G52：（右侧锥度）电极丝向前进方向右侧倾斜-返回"><a href="#G52：（右侧锥度）电极丝向前进方向右侧倾斜-返回" class="headerlink" title="G52：（右侧锥度）电极丝向前进方向右侧倾斜   [返回]"></a><a name="G52">G52：（右侧锥度）电极丝向前进方向右侧倾斜</a>   <a href="#BACK52">[返回]</a></h3><p>代码格式：G52 Axxx</p><p>A 锥度</p><p><img src="/2022/05/30/machining-02-wedm-common-g-code-list/image-20220528133445930.png" alt="image-20220528133445930"></p><h3 id="G53：在机床坐标系中的快速移动-返回"><a href="#G53：在机床坐标系中的快速移动-返回" class="headerlink" title="G53：在机床坐标系中的快速移动   [返回]"></a><a name="G53">G53：在机床坐标系中的快速移动</a>   <a href="#BACK53">[返回]</a></h3><p>代码格式：G53 Xxxx Yxxx Uxxx Vxxx Zxxx Axxx Bxxx Exxx</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>U 四轴线割时上部喷嘴的相对或绝对坐标X轴数值</p><p>V 四轴线割时上部喷嘴的相对或绝对坐标Y轴数值</p><p>Z H/Z 五轴线割时，相对或绝对坐标Z轴数值或高度值Z</p><p>A</p><p>B</p><p>E 位置 [0机械 1电器]</p><h3 id="G54：工作坐标系0-返回"><a href="#G54：工作坐标系0-返回" class="headerlink" title="G54：工作坐标系0   [返回]"></a><a name="G54">G54：工作坐标系0</a>   <a href="#BACK54">[返回]</a></h3><p>代码格式：G54</p><p>Sodick设备，工作坐标系0</p><h3 id="G55：在机床坐标系中的加工移动-返回"><a href="#G55：在机床坐标系中的加工移动-返回" class="headerlink" title="G55：在机床坐标系中的加工移动   [返回]"></a><a name="G55">G55：在机床坐标系中的加工移动</a>   <a href="#BACK55">[返回]</a></h3><p>代码格式：G55 Xxxx Yxxx Uxxx Vxxx Zxxx Axxx Bxxx </p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>U 四轴线割时上部喷嘴的相对或绝对坐标X轴数值</p><p>V 四轴线割时上部喷嘴的相对或绝对坐标Y轴数值</p><p>Z H/Z 五轴线割时，相对或绝对坐标Z轴数值或高度值Z</p><p>A</p><p>B</p><p>Sodick设备，工作坐标系1</p><h3 id="G56：工作坐标系2-返回"><a href="#G56：工作坐标系2-返回" class="headerlink" title="G56：工作坐标系2   [返回]"></a><a name="G56">G56：工作坐标系2</a>   <a href="#BACK56">[返回]</a></h3><p>代码格式：G56</p><p>Sodick设备，工作坐标系2</p><h3 id="G57：工作坐标系3-返回"><a href="#G57：工作坐标系3-返回" class="headerlink" title="G57：工作坐标系3   [返回]"></a><a name="G57">G57：工作坐标系3</a>   <a href="#BACK57">[返回]</a></h3><p>代码格式：G57</p><p>Sodick设备，工作坐标系3</p><h3 id="G58：半径锥度常数（线与弧线正切）-返回"><a href="#G58：半径锥度常数（线与弧线正切）-返回" class="headerlink" title="G58：半径锥度常数（线与弧线正切）    [返回]"></a><a name="G58">G58：半径锥度常数（线与弧线正切） </a>   <a href="#BACK58">[返回]</a></h3><p>代码格式：G58</p><p>Sodick设备，工作坐标系4</p><h3 id="G59：圆锥锥度（线与弧线正切）-返回"><a href="#G59：圆锥锥度（线与弧线正切）-返回" class="headerlink" title="G59：圆锥锥度（线与弧线正切）   [返回]"></a><a name="G59">G59：圆锥锥度（线与弧线正切）</a>   <a href="#BACK59">[返回]</a></h3><p>代码格式：G59</p><p>Sodick设备，工作坐标系5</p><h3 id="G60：恒定拐角半径-返回"><a href="#G60：恒定拐角半径-返回" class="headerlink" title="G60：恒定拐角半径   [返回]"></a><a name="G60">G60：恒定拐角半径</a>   <a href="#BACK60">[返回]</a></h3><p>代码格式：G60</p><h3 id="G61：最小锥度-返回"><a href="#G61：最小锥度-返回" class="headerlink" title="G61：最小锥度   [返回]"></a><a name="G61">G61：最小锥度</a>   <a href="#BACK61">[返回]</a></h3><p>代码格式：G61</p><h3 id="G62：平均锥度-返回"><a href="#G62：平均锥度-返回" class="headerlink" title="G62：平均锥度   [返回]"></a><a name="G62">G62：平均锥度</a>   <a href="#BACK62">[返回]</a></h3><p>代码格式：G62</p><h3 id="G63：最大锥度-返回"><a href="#G63：最大锥度-返回" class="headerlink" title="G63：最大锥度   [返回]"></a><a name="G63">G63：最大锥度</a>   <a href="#BACK63">[返回]</a></h3><p>代码格式：G63</p><h3 id="G74：定义工件坐标系-返回"><a href="#G74：定义工件坐标系-返回" class="headerlink" title="G74：定义工件坐标系   [返回]"></a><a name="G74">G74：定义工件坐标系</a>   <a href="#BACK74">[返回]</a></h3><p>代码格式：G74 Xxxx Yxxx Jxxx Ixxx Uxxx Vxxx Axxx Bxxx Qxxx Cxxx Exxx</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>J 基准平面相对于安装平面的高度</p><p>I 第二平面相对于基准平面的高度</p><p>U 四轴线割时上部喷嘴的相对或绝对坐标X轴数值</p><p>V 四轴线割时上部喷嘴的相对或绝对坐标Y轴数值</p><p>A</p><p>B</p><p>Q 绝对旋转</p><p>或</p><p>C 相对旋转</p><p>E 位置 [0机械 1电器]</p><p>Sodick 设备，开启4轴</p><h3 id="G75：在工件坐标系中定位-返回"><a href="#G75：在工件坐标系中定位-返回" class="headerlink" title="G75：在工件坐标系中定位   [返回]"></a><a name="G75">G75：在工件坐标系中定位</a>   <a href="#BACK75">[返回]</a></h3><p>代码格式：G75 Xxxx Yxxx Zxxx Uxxx Vxxx Axxx Bxxx Exxx</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>Z 相对或绝对坐标Z轴数值</p><p>U 四轴线割时上部喷嘴的相对或绝对坐标X轴数值</p><p>V 四轴线割时上部喷嘴的相对或绝对坐标Y轴数值</p><p>A</p><p>B</p><p>E 位置 [0机械 1电器]</p><p>Sodick 设备，关闭4轴</p><h3 id="G80：感应器接触-返回"><a href="#G80：感应器接触-返回" class="headerlink" title="G80：感应器接触   [返回]"></a><a name="G80">G80：感应器接触</a>   <a href="#BACK80">[返回]</a></h3><p>代码格式：G80</p><h3 id="G81：返回至限制区域-返回"><a href="#G81：返回至限制区域-返回" class="headerlink" title="G81：返回至限制区域   [返回]"></a><a name="G81">G81：返回至限制区域</a>   <a href="#BACK81">[返回]</a></h3><p>代码格式：G81</p><h3 id="G82：移动到轴显示的一半-返回"><a href="#G82：移动到轴显示的一半-返回" class="headerlink" title="G82：移动到轴显示的一半   [返回]"></a><a name="G82">G82：移动到轴显示的一半</a>   <a href="#BACK82">[返回]</a></h3><p>代码格式：G82</p><h3 id="G83：保持当前位置并保存至H寄存器-返回"><a href="#G83：保持当前位置并保存至H寄存器-返回" class="headerlink" title="G83：保持当前位置并保存至H寄存器   [返回]"></a><a name="G83">G83：保持当前位置并保存至H寄存器</a>   <a href="#BACK83">[返回]</a></h3><p>代码格式：G83</p><h3 id="G85：在工件坐标系中加工移动-返回"><a href="#G85：在工件坐标系中加工移动-返回" class="headerlink" title="G85：在工件坐标系中加工移动   [返回]"></a><a name="G85">G85：在工件坐标系中加工移动</a>   <a href="#BACK85">[返回]</a></h3><p>代码格式：G85</p><p>代码格式：G75 Xxxx Yxxx Uxxx Vxxx  Zxxx Axxx Bxxx</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>U 四轴线割时上部喷嘴的相对或绝对坐标X轴数值</p><p>V 四轴线割时上部喷嘴的相对或绝对坐标Y轴数值</p><p>Z 相对或绝对坐标Z轴数值</p><p>A</p><p>B</p><h3 id="G90：设置绝对模式-返回"><a href="#G90：设置绝对模式-返回" class="headerlink" title="G90：设置绝对模式   [返回]"></a><a name="G90">G90：设置绝对模式</a>   <a href="#BACK90">[返回]</a></h3><p>代码格式：G90</p><p>G54</p><p>G90</p><h3 id="G91：设置增量模式-返回"><a href="#G91：设置增量模式-返回" class="headerlink" title="G91：设置增量模式   [返回]"></a><a name="G91">G91：设置增量模式</a>   <a href="#BACK91">[返回]</a></h3><p>代码格式：G91</p><p>G54</p><p>G91</p><h3 id="G92：定义加工坐标系-返回"><a href="#G92：定义加工坐标系-返回" class="headerlink" title="G92：定义加工坐标系   [返回]"></a><a name="G92">G92：定义加工坐标系</a>   <a href="#BACK92">[返回]</a></h3><p>代码格式：G92</p><p>G90</p><p>G92 X0 Y0</p><p>定义当前加工任务的坐标系</p><h3 id="G93：定义局部坐标系-返回"><a href="#G93：定义局部坐标系-返回" class="headerlink" title="G93：定义局部坐标系   [返回]"></a><a name="G93">G93：定义局部坐标系</a>   <a href="#BACK93">[返回]</a></h3><p>代码格式：G93</p><h3 id="G95：降低加工频率-返回"><a href="#G95：降低加工频率-返回" class="headerlink" title="G95：降低加工频率   [返回]"></a><a name="G95">G95：降低加工频率</a>   <a href="#BACK95">[返回]</a></h3><p>代码格式：G95</p><h3 id="G97：定义全局坐标系-返回"><a href="#G97：定义全局坐标系-返回" class="headerlink" title="G97：定义全局坐标系   [返回]"></a><a name="G97">G97：定义全局坐标系</a>   <a href="#BACK97">[返回]</a></h3><p>代码格式：G97</p><p>定义全部加工任务的坐标系</p><h3 id="G104：在所有锐角处驻留（Dwell）-返回"><a href="#G104：在所有锐角处驻留（Dwell）-返回" class="headerlink" title="G104：在所有锐角处驻留（Dwell）    [返回]"></a><a name="G104">G104：在所有锐角处驻留（Dwell） </a>   <a href="#BACK104">[返回]</a></h3><p>代码格式：G104 Xxxx</p><p>Xxxx 驻留时间，单位秒</p><h3 id="G105：取消G104设定-返回"><a href="#G105：取消G104设定-返回" class="headerlink" title="G105：取消G104设定   [返回]"></a><a name="G105">G105：取消G104设定</a>   <a href="#BACK105">[返回]</a></h3><p>代码格式：G105</p><p>与G104成对出现</p><h3 id="G110：旋转轴模式-返回"><a href="#G110：旋转轴模式-返回" class="headerlink" title="G110：旋转轴模式   [返回]"></a><a name="G110">G110：旋转轴模式</a>   <a href="#BACK110">[返回]</a></h3><p>代码格式：G110</p><h3 id="G111：-转速-返回"><a href="#G111：-转速-返回" class="headerlink" title="G111： 转速   [返回]"></a><a name="G111">G111： 转速</a>   <a href="#BACK111">[返回]</a></h3><p>代码格式：G111 Axxx Bxxx</p><p>A 轴转速，单位rd/min</p><p>B 轴转速，单位rd/min</p><p>仅当G110开启时有效。</p><h3 id="G125：无接触位置搜索循环-返回"><a href="#G125：无接触位置搜索循环-返回" class="headerlink" title="G125：无接触位置搜索循环   [返回]"></a><a name="G125">G125：无接触位置搜索循环</a>   <a href="#BACK125">[返回]</a></h3><p>代码格式：G145 Wxxx Dxxx Ixxx Rxxx Sxxx Bxxx</p><p>W 系统，有效值[1，2，3]</p><p>D 孔径，取值范围（0.0001， -）</p><p>I 距离，最大距离DM（0.0001， -）</p><p>Z 距离，Dz取值范围 （-40， -0.0001）</p><p>R 增加的旋转角度，取值范围R（-360， -）</p><p>S 电极丝速度</p><p>B 电极丝张力</p><h3 id="G126：开启坐标系旋转-返回"><a href="#G126：开启坐标系旋转-返回" class="headerlink" title="G126：开启坐标系旋转   [返回]"></a><a name="G126">G126：开启坐标系旋转</a>   <a href="#BACK126">[返回]</a></h3><p>代码格式：KA20.0 G126</p><p>KA 工件与坐标系X轴的夹角</p><p>KA20.0</p><p>G126</p><p>…</p><p>G127</p><p>M02</p><p>用于旋转当前坐标系。当你想让机器轴线与工件对齐时，在倾斜偏移的遮蔽物上使用。旋转状态保持至G127代码。</p><h3 id="G127：关闭坐标系旋转-返回"><a href="#G127：关闭坐标系旋转-返回" class="headerlink" title="G127：关闭坐标系旋转   [返回]"></a><a name="G127">G127：关闭坐标系旋转</a>   <a href="#BACK127">[返回]</a></h3><p>代码格式： G127</p><p>与G126成对出现。</p><h3 id="G130：找边循环-返回"><a href="#G130：找边循环-返回" class="headerlink" title="G130：找边循环   [返回]"></a><a name="G130">G130：找边循环</a>   <a href="#BACK130">[返回]</a></h3><p>代码格式：G130 Wxxx Ixxx Lxxx  Rxxx Xxxx Yxxx Exxx Txxx Sxxx Bxxx</p><p>AC CUT HMI 设备，找边循环</p><p>W 系统，有效值[1，2，3]</p><p>I 方向，轴（-1=-X，1=X，+1=+X，-2=-Y，2=Y）</p><p>L 距离，回退距离 DR （0， -）</p><p>R 增加的旋转角度，取值范围R（-360， -）</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>E 位测量模式 [0机械 1电器]</p><p>T 轮廓，有效值[1,2,3,4,5,6]</p><p>S 电极丝速度</p><p>B 电极丝张力</p><h3 id="G131：检查干扰因素-0-返回"><a href="#G131：检查干扰因素-0-返回" class="headerlink" title="G131：检查干扰因素 = 0   [返回]"></a><a name="G131">G131：检查干扰因素 = 0</a>   <a href="#BACK131">[返回]</a></h3><p>代码格式： G131</p><p>AC CUT HMI 设备，找球中心</p><p>代码格式： G131 Wxxxx Bxxx Nn Xxxx Yxxx</p><p>W 系统，有效值[1，2，3]</p><p>B 基准球半径</p><p>N 测量点数（3，64）</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><h3 id="G132：检查干扰因素-2-返回"><a href="#G132：检查干扰因素-2-返回" class="headerlink" title="G132：检查干扰因素 = 2   [返回]"></a><a name="G132">G132：检查干扰因素 = 2</a>   <a href="#BACK132">[返回]</a></h3><p>代码格式： G132</p><p>AC CUT HMI 设备，通过两个测量值根据机床X轴对齐工件循环</p><p>代码格式：G132 Wxxx Ixxx Zxxx Nn Rxxx Exxx Txxx Sxxx Bxxx</p><p>W 系统，有效值[1，2，3]</p><p>I  距离，距离 Dx （-0.001， 0）</p><p>Z 距离，距离 Dz （-40， 0）</p><p>N 测量点数（2，20）</p><p>R 增加的旋转角度，取值范围R（-360， -）</p><p>E 位测量模式 [0机械 1电器]</p><p>T 轮廓，有效值[1,2,3,4,5,6]</p><p>S 电极丝速度</p><p>B 电极丝张力</p><h3 id="G133：两个平行-返回"><a href="#G133：两个平行-返回" class="headerlink" title="G133：两个平行   [返回]"></a><a name="G133">G133：两个平行</a>   <a href="#BACK133">[返回]</a></h3><p>代码格式： G133</p><p>AC CUT HMI 设备，两个平行表面内部找中心循环</p><p>代码格式：G133 Wxxx Zxxx Rxxx  Xxxx Yxxx Exxx Txxx Sxxx Bxxx</p><p>W 系统，有效值[1，2，3]</p><p>Z 距离，距离 Dz （-40， 0）</p><p>R 增加的旋转角度，取值范围R（-360， -）</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>E 位测量模式 [0机械 1电器]</p><p>T 轮廓，有效值[1,2,3,4,5,6]</p><p>S 电极丝速度</p><p>B 电极丝张力</p><h3 id="G134：找孔循环-返回"><a href="#G134：找孔循环-返回" class="headerlink" title="G134：找孔循环   [返回]"></a><a name="G134">G134：找孔循环</a>   <a href="#BACK134">[返回]</a></h3><p>代码格式：G134 Wxxx Zxxx Nn Cxxx Rxxx  Xxxx Yxxx Exxx Txxx Sxxx Bxxx</p><p>W 系统，有效值[1，2，3]</p><p>Z 距离，距离 Dz （-40， 0）</p><p>N 测量点数（2，20）</p><p>C 角增量 C</p><p>R 增加的旋转角度，取值范围R（-360， -）</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>E 位测量模式 [0机械 1电器]</p><p>T 轮廓，有效值[1,2,3,4,5,6]</p><p>S 电极丝速度</p><p>B 电极丝张力</p><h3 id="G136：外圆柱找中心循环-返回"><a href="#G136：外圆柱找中心循环-返回" class="headerlink" title="G136：外圆柱找中心循环   [返回]"></a><a name="G136">G136：外圆柱找中心循环</a>   <a href="#BACK136">[返回]</a></h3><p>代码格式：G136 Wxxx Dxxx Zxxx Nn Rxxx  Cxxx Xxxx Yxxx Exxx Txxx Sxxx Bxxx</p><p>AC CUT HMI 设备，安装给定的旋转角度增量分步之行三次</p><p>W 系统，有效值[1，2，3]</p><p>D 间隙距离 DD （0.0001，1 ）</p><p>Z 距离 Dz （-40， 0）</p><p>N 测量点数（3，20）</p><p>R 增加的旋转角度，取值范围R（-360， -）</p><p>C 角增量 C</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>E 位测量模式 [0机械 1电器]</p><p>T 轮廓，有效值[1,2,3,4,5,6]</p><p>S 电极丝速度</p><p>B 电极丝张力</p><h3 id="G137：找角循环-返回"><a href="#G137：找角循环-返回" class="headerlink" title="G137：找角循环   [返回]"></a><a name="G137">G137：找角循环</a>   <a href="#BACK137">[返回]</a></h3><p>代码格式：G137 Wxxx Ixxx Jxxx Zxxx Nn Kxxx Rxxx Dxxx Fxxx Xxxx Yxxx Exxx Txxx Sxxx Bxxx</p><p>AC CUT HMI 设备，用于定位电极丝到矩形工件的角部位置</p><p>W 系统，有效值[1，2，3]</p><p>I 距离Dx</p><p>J 距离Dy</p><p>Z 距离，距离 Dz （-40， 0）</p><p>N 测量点数（2，20）</p><p>K 距离增量（0.0001，1 ）</p><p>R 增加的旋转角度，取值范围R（-360， -）</p><p>D 回退距离 DR（0，-）</p><p>F 综合校准 F [0|1]</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>E 位测量模式 [0机械 1电器]</p><p>T 轮廓，有效值[1,2,3,4,5,6]</p><p>S 电极丝速度</p><p>B 电极丝张力</p><h3 id="G138：以两孔执行工件找正-返回"><a href="#G138：以两孔执行工件找正-返回" class="headerlink" title="G138：以两孔执行工件找正   [返回]"></a><a name="G138">G138：以两孔执行工件找正</a>   <a href="#BACK138">[返回]</a></h3><p>代码格式：G137 Wxxx Zxxx Nn Cxxx Rxxx Mxxx Hxxx Exxx Txxx Sxxx Bxxx</p><p>AC CUT HMI 设备，用于定位电极丝到矩形工件的角部位置</p><p>W 系统，有效值[1，2，3]</p><p>Z 距离，距离 Dz （-40， 0）</p><p>N 测量点数（2，20）</p><p>C 角增量</p><p>R 增加的旋转角度，取值范围R（-360， -）</p><p>M 名称，最终位置[0|1]</p><p>H 添加Z轴高度（0， -）</p><p>E 位测量模式 [0机械 1电器]</p><p>T 轮廓，有效值[1,2,3,4,5,6]</p><p>S 电极丝速度</p><p>B 电极丝张力</p><h3 id="G140：关闭四轴偏置-返回"><a href="#G140：关闭四轴偏置-返回" class="headerlink" title="G140：关闭四轴偏置   [返回]"></a><a name="G140">G140：关闭四轴偏置</a>   <a href="#BACK140">[返回]</a></h3><p>代码格式： G140</p><h3 id="G141：四轴左侧偏置-返回"><a href="#G141：四轴左侧偏置-返回" class="headerlink" title="G141：四轴左侧偏置   [返回]"></a><a name="G141">G141：四轴左侧偏置</a>   <a href="#BACK141">[返回]</a></h3><p>代码格式： G141</p><h3 id="G142：四轴右侧偏置-返回"><a href="#G142：四轴右侧偏置-返回" class="headerlink" title="G142：四轴右侧偏置   [返回]"></a><a name="G142">G142：四轴右侧偏置</a>   <a href="#BACK142">[返回]</a></h3><p>代码格式： G142</p><p>AC CUT HMI 设备，两个平行外表面找中线面循环</p><p>代码格式：G142 Wxxx Ixxx Zxxx Rxxx Xxxx Yxxx Exxx Txxx Sxxx Bxxx</p><p>W 系统，有效值[1，2，3]</p><p>I 距离，Dx取值范围 （0.0001， -）</p><p>Z 距离，Dz取值范围 （-40， -0.0001）</p><p>R 增加的旋转角度，取值范围R（-360， -）</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>E 位测量模式 [0机械 1电器]</p><p>T 轮廓，有效值[1,2,3,4,5,6]</p><p>S 电极丝速度</p><p>B 电极丝张力</p><h3 id="G143-：两个平行外表面中找中线面循环，避开XY平面中的工件-返回"><a href="#G143-：两个平行外表面中找中线面循环，避开XY平面中的工件-返回" class="headerlink" title="G143 ：两个平行外表面中找中线面循环，避开XY平面中的工件   [返回]"></a><a name="G143">G143 ：两个平行外表面中找中线面循环，避开XY平面中的工件</a>   <a href="#BACK143">[返回]</a></h3><p>代码格式：G143 Wxxx Ixxx Zxxx Rxxx Xxxx Yxxx Exxx Txxx Sxxx Bxxx</p><p>W 系统，有效值[1，2，3]</p><p>I 距离，Dx取值范围 （0.0001， -）</p><p>Z 距离，Dz取值范围 （-40， -0.0001）</p><p>R 增加的旋转角度，取值范围R（-360， -）</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>E 位测量模式 [0机械 1电器]</p><p>T 轮廓，有效值[1,2,3,4,5,6]</p><p>S 电极丝速度</p><p>B 电极丝张力</p><h3 id="G145-：工件调平测量-返回"><a href="#G145-：工件调平测量-返回" class="headerlink" title="G145 ：工件调平测量   [返回]"></a><a name="G145">G145 ：工件调平测量</a>   <a href="#BACK145">[返回]</a></h3><p>代码格式：G143 Ixxx Jxxx Kxxx Lxxx Xxxx Yxxx Zxxx Mxxx Nxxx Oxxx Pxxx Rxxx Sxxx</p><p>I X[D2]</p><p>J Y[D2]</p><p>K X[D3]</p><p>L Y[D3]</p><p>3D 设置时点的设定</p><p>X X[P1]</p><p>Y Y[P1]</p><p>Z Z[P1]</p><p>M X[P2]</p><p>N Y[P2]</p><p>O Z[P2]</p><p>P X[P3]</p><p>R Y[P3]</p><p>S Z[P3]</p><h3 id="G150-：电极丝和导丝嘴找正电极丝找正-返回"><a href="#G150-：电极丝和导丝嘴找正电极丝找正-返回" class="headerlink" title="G150 ：电极丝和导丝嘴找正电极丝找正   [返回]"></a><a name="G150">G150 ：电极丝和导丝嘴找正电极丝找正</a>   <a href="#BACK150">[返回]</a></h3><p>代码格式：G150 Zxxx</p><p>Z ZB</p><h3 id="G152-：导丝嘴设置循环（WAL-GDI）-返回"><a href="#G152-：导丝嘴设置循环（WAL-GDI）-返回" class="headerlink" title="G152 ：导丝嘴设置循环（WAL+GDI）   [返回]"></a><a name="G152">G152 ：导丝嘴设置循环（WAL+GDI）</a>   <a href="#BACK152">[返回]</a></h3><p>代码格式：G152 Zxxx Axxx Sxxx Bxxx</p><p>Z ZB</p><p>A 电极丝的倾斜度</p><p>S 电极丝的速度</p><p>B 电极丝的张力</p><h3 id="G153-：带锥度专家的导丝嘴设置循环-返回"><a href="#G153-：带锥度专家的导丝嘴设置循环-返回" class="headerlink" title="G153 ：带锥度专家的导丝嘴设置循环   [返回]"></a><a name="G153">G153 ：带锥度专家的导丝嘴设置循环</a>   <a href="#BACK153">[返回]</a></h3><p>代码格式：G153 Zxxx Axxx Sxxx Bxxx</p><p>Z ZB</p><p>A 电极丝的倾斜度</p><p>S 电极丝的速度</p><p>B 电极丝的张力</p><h3 id="G154-：工件表面对齐-返回"><a href="#G154-：工件表面对齐-返回" class="headerlink" title="G154 ：工件表面对齐   [返回]"></a><a name="G154">G154 ：工件表面对齐</a>   <a href="#BACK154">[返回]</a></h3><p>代码格式：G154 Wxxx Ixxx Lxxx Axxx Txxx</p><p>W 系统，有效值[1，2，3]</p><p>I 距离，Dx取值范围 （0.0001， -）</p><p>L 距离，回退距离 DR （0， -）</p><p>A 电极丝的倾斜度</p><p>T 轮廓，有效值[1,2,3,4,5,6]</p><p>Sodick 设备中</p><p>G154 至 G159：工作坐标屏幕 10 至 15</p><p>G254 至 G256：工作坐标屏幕 20 至 25</p><p>G354 至 G359：工作坐标屏幕 30 至 35</p><p>G454 至 G459：工作坐标屏幕 40 至 45</p><p>G554 至 G559：工作坐标屏幕 50 至 55</p><p>G654 至 G659：工作坐标屏幕 60 至 65</p><p>G754 至 G759：工作坐标屏幕 70 至 75</p><p>G854 至 G859：工作坐标屏幕 80 至 85</p><p>G954 至 G959：工作坐标屏幕 90 至 95</p><h3 id="G157-：测量探针校准-返回"><a href="#G157-：测量探针校准-返回" class="headerlink" title="G157 ：测量探针校准    [返回]"></a><a name="G157">G157 ：测量探针校准</a>    <a href="#BACK157">[返回]</a></h3><p>代码格式：G157 Dxxx Nn</p><p>D 孔径 （0.0001， -）</p><p>N 测量点数（4，360）</p><h3 id="G174-：-工件坐标系相对机器坐标系的偏移-返回"><a href="#G174-：-工件坐标系相对机器坐标系的偏移-返回" class="headerlink" title="G174 ：  工件坐标系相对机器坐标系的偏移  [返回]"></a><a name="G174">G174 ：  工件坐标系相对机器坐标系的偏移</a>  <a href="#BACK174">[返回]</a></h3><p>代码格式：G174 Xxxx Yxxx Zxxx Axxx Bxxx</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>Z 相对或绝对坐标Z轴数值或高度值Z</p><p>A</p><p>B</p><h3 id="G192-：-加工坐标系相对工件坐标系的偏移-返回"><a href="#G192-：-加工坐标系相对工件坐标系的偏移-返回" class="headerlink" title="G192 ：  加工坐标系相对工件坐标系的偏移  [返回]"></a><a name="G192">G192 ：  加工坐标系相对工件坐标系的偏移</a>  <a href="#BACK192">[返回]</a></h3><p>代码格式：G174 Xxxx Yxxx Axxx Bxxx</p><p>X 相对或绝对坐标X轴数值</p><p>Y 相对或绝对坐标Y轴数值</p><p>A</p><p>B</p><p>Sodick 设备，将当前值的一半分配给当前工作坐标中的轴显示。</p><h3 id="FLAG2D0-：M01代码关闭-返回"><a href="#FLAG2D0-：M01代码关闭-返回" class="headerlink" title="FLAG2D0 ：M01代码关闭    [返回]"></a><a name="FLAG2D0">FLAG2D0 ：M01代码关闭</a>    <a href="#BACKFLAG2D0">[返回]</a></h3><p>代码格式：FLAG2D0 </p><h3 id="FLAG2D1：M01代码开启-返回"><a href="#FLAG2D1：M01代码开启-返回" class="headerlink" title="FLAG2D1：M01代码开启    [返回]"></a><a name="FLAG2D1">FLAG2D1：M01代码开启</a>    <a href="#BACKFLAG2D1">[返回]</a></h3><p>代码格式：FLAG2D1 </p><h3 id="FLAG3D-：比例因子输入-返回"><a href="#FLAG3D-：比例因子输入-返回" class="headerlink" title="FLAG3D ：比例因子输入    [返回]"></a><a name="FLAG3D">FLAG3D ：比例因子输入</a>    <a href="#BACK157">[返回]</a></h3><p>代码格式：FLAG3D</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Jim Wang 公众号:  &lt;a class=&quot;main-button-link&quot; href=&quot;#wechat&quot; rel=&quot;noopener&quot;&gt;巴博萨船长&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：线切割数控机加工常用G代码一览表，全部代码语法格式都有详细的解释性描述。部分代码采用图文形式进行详细介绍描述。&lt;/p&gt;
&lt;p&gt;Abstract: List of G codes commonly used in WEDM, all code syntax format with detailed explanatory descriptions. Some codes are described in detail in graphic form.&lt;/p&gt;
    
    </summary>
    
    
      <category term="机械加工 相关 - 知识总结" scheme="https://zicowarn.github.io/categories/%E6%9C%BA%E6%A2%B0%E5%8A%A0%E5%B7%A5-%E7%9B%B8%E5%85%B3-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="数控代码" scheme="https://zicowarn.github.io/tags/%E6%95%B0%E6%8E%A7%E4%BB%A3%E7%A0%81/"/>
    
      <category term="G代码" scheme="https://zicowarn.github.io/tags/G%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Install Shield 如何使用ISCmdBld构建安装包</title>
    <link href="https://zicowarn.github.io/2021/10/09/installshield-QA-howto-use-iscmdbld-build-project/"/>
    <id>https://zicowarn.github.io/2021/10/09/installshield-QA-howto-use-iscmdbld-build-project/</id>
    <published>2021-10-08T20:18:34.000Z</published>
    <updated>2021-09-10T05:13:48.618Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号:  <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><p>最近软件打包工具和流程要升级，从Inno Setup转换为Install Shield，被告知的原因，因为更专业，更好看。本文算做开发记录，以后也会陆续整理相关知识，希望能帮助到更多朋友。</p><h2 id="工具路径"><a href="#工具路径" class="headerlink" title="工具路径"></a>工具路径</h2><p>该工具位于如下路径，**<yyyy>** 为版本号码，例如2019。</yyyy></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\InstallShield\&lt;YYYY&gt;\System\IsCmdBld.exe</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>基本使用方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files (x86)\InstallShield\2020\System\IsCmdBld.exe&quot;</span> -p <span class="string">&quot;C:\Users\&lt;nobody&gt;\workspaces\InstallShield\My IS Project\My IS Project.ism&quot;</span> -r <span class="string">&quot;MY_RELEASE_1&quot;</span> </span><br></pre></td></tr></table></figure><h2 id="改变版本号"><a href="#改变版本号" class="headerlink" title="改变版本号"></a>改变版本号</h2><h3 id="Installscript-MSI，-Basic-MSI，Advanced-UI等类型的项目"><a href="#Installscript-MSI，-Basic-MSI，Advanced-UI等类型的项目" class="headerlink" title="Installscript MSI， Basic MSI，Advanced UI等类型的项目"></a>Installscript MSI， Basic MSI，Advanced UI等类型的项目</h3><p>将<code>-y &quot;1.2021.9999.2&quot;</code>，加入上述命令行。</p><h3 id="Installscript类型的项目"><a href="#Installscript类型的项目" class="headerlink" title="Installscript类型的项目"></a>Installscript类型的项目</h3><p>在项目Installaltion Designer中找到Path Variables子项，定义一个VERSION_NUMBER新的路径变量，如下图所示：</p><p><img src="/2021/10/09/installshield-QA-howto-use-iscmdbld-build-project/image-20210910130809304.png" alt="image-20210910130809304"></p><p>然后在General Information中引入此新的路径变量，如下图所示：</p><p><img src="/2021/10/09/installshield-QA-howto-use-iscmdbld-build-project/image-20210910130928688.png" alt="image-20210910130928688"></p><p>最后将如下内容，加入原有的IsCmdBld命令行，如下，注意参数标识为小写的字母的L：</p><p><code>-l VERSION_NUMBER=&quot;1.2021.9999.2&quot;</code>，加入上述命令行。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Jim Wang 公众号:  &lt;a class=&quot;main-button-link&quot; href=&quot;#wechat&quot; rel=&quot;noopener&quot;&gt;巴博萨船长&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：如何使用ISCmdBld构建Installshield项目，在构建项目过程中，不同的项目类型，如何动态将版本号码传递给当前构造项目。&lt;/p&gt;
&lt;p&gt;Abstract：How to use ISCmdBld to build the Installshield project, in the process of building the project, how to dynamically transfer the version number to the current building project for different project types.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Install Shield 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/Install-Shield-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Install Shield" scheme="https://zicowarn.github.io/tags/Install-Shield/"/>
    
      <category term="ISCmdBld" scheme="https://zicowarn.github.io/tags/ISCmdBld/"/>
    
      <category term="应用技巧" scheme="https://zicowarn.github.io/tags/%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python 杂记之 解决Win 7中安装与配置pyenv-win时因secure channel错误所引起的问题</title>
    <link href="https://zicowarn.github.io/2021/06/19/0813-pyenv-install-error-secure-channel-issue/"/>
    <id>https://zicowarn.github.io/2021/06/19/0813-pyenv-install-error-secure-channel-issue/</id>
    <published>2021-06-19T06:11:08.000Z</published>
    <updated>2021-08-19T07:17:01.519Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号:  <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><h2 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h2><p>在Windows 系统中在尝试安装配置pyenv-win时，在使用<code>pyenv install</code>命令安装其他Python版本的时候，有可能碰见如下问题。或者只有我不幸遇见了这个问题，这篇文章可以帮助你解决这个问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\nobody&gt;pyenv install 3.9.4</span><br><span class="line">:: [Info] ::  Mirror: https://www.python.org/ftp/python</span><br><span class="line">:: [Downloading] ::  3.9.4 ...</span><br><span class="line">:: [Downloading] ::  From https://www.python.org/ftp/python/3.9.4/python-3.9.4-amd64-webinstall.exe</span><br><span class="line">:: [Downloading] ::  To   C:\Users\nobody\.pyenv\pyenv-win\install_cache\python-3.9.4-amd64-webinstall.exe</span><br><span class="line">:: [ERROR] :: Im Support des sicheren Channels ist ein Fehler aufgetreten</span><br></pre></td></tr></table></figure><p>由于当前系统为德语版，错误提示信息为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:: [ERROR] :: Im Support des sicheren Channels ist ein Fehler aufgetreten</span><br></pre></td></tr></table></figure><p>该错误问题的英文翻译为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:: [ERROR] :: An error occurred <span class="keyword">in</span> the support of the secure channel</span><br></pre></td></tr></table></figure><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>该问题出现原因的关键字为，secure protocol 即安全协议，具体为当前系统为对传输层（Transport Layer Security ）TLS 1.0 和TLS 2.0 这两个协议提供支持。一些应用和服务在开发是，被设计成，为了实现安全套接字连接，会选择使用WinHTTP，使用WinHTTP时，会选择使用WINHTTP_OPTION_SECURE_PROTOCOLS这个标识符，可改标识符的定义不包含对TLS 1.0 和TLS 2.0 协议的使用。Windows 7 允许通过设置一个名为<code>DefaultSecureProtocol</code> 的注册表键的值，来控制WINHTTP_OPTION_SECURE_PROTOCOLS这个标识符的定义，即定义当程序WINHTTP_OPTION_SECURE_PROTOCOLS时，Windows系统应该为其开启那些协议（或Windows 系统应视为该标识符支持的协议应为什么），具体参见<a href="https://support.microsoft.com/en-us/topic/update-to-enable-tls-1-1-and-tls-1-2-as-default-secure-protocols-in-winhttp-in-windows-c4bd73d2-31d7-761e-0178-11268bb10392">Update to enable TLS 1.1 and TLS 1.2 as default secure protocols in WinHTTP in Windows</a>这篇官方文章。</p><p>在Windows系统中，<code>DefaultSecureProtocol</code> 合法值和其对应含义如下表所示。</p><table><thead><tr><th align="left">合法值</th><th align="left">值的含义</th></tr></thead><tbody><tr><td align="left">0x00000008</td><td align="left">默认开启SSL 2.0</td></tr><tr><td align="left">0x00000020</td><td align="left">默认开启SSL 3.0</td></tr><tr><td align="left">0x00000080</td><td align="left">默认开启 TLS 1.0</td></tr><tr><td align="left">0x00000200</td><td align="left">默认开启 TLS 1.1</td></tr><tr><td align="left">0x00000800</td><td align="left">默认开启 TLS 1.2</td></tr></tbody></table><p>举例来说，如果我们想为WINHTTP_OPTION_SECURE_PROTOCOLS这个标识同时开启TLS 1.1 和 TLS1.2的支持，那么我们需要将0x00000200 与0x00000800相加，其结果应为0x00000a00。我们将<code>DefaultSecureProtocol</code> 的值设置为0x00000a00，就可以同时开始TLS 1.1 和 TLS1.2这两个协议。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="第一步，检查注册表，如有必要添加DefaultSecureProtocol键并设置响应的值。"><a href="#第一步，检查注册表，如有必要添加DefaultSecureProtocol键并设置响应的值。" class="headerlink" title="第一步，检查注册表，如有必要添加DefaultSecureProtocol键并设置响应的值。"></a>第一步，检查注册表，如有必要添加DefaultSecureProtocol键并设置响应的值。</h3><p><code>DefaultSecureProtocol</code> 这个注册表的键，在32位的Windows系统位于，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp</span><br></pre></td></tr></table></figure><p>如下图所示。</p><p><img src="/2021/06/19/0813-pyenv-install-error-secure-channel-issue/image-20210619142132677.png" alt="image-20210619142132677"></p><p>在64位的Windows系统位于，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp</span><br></pre></td></tr></table></figure><p>64位系统</p><p><img src="/2021/06/19/0813-pyenv-install-error-secure-channel-issue/image-20210619142014086.png" alt="image-20210619142014086"></p><p>需要注意的是，如果注册表默认没有<code>DefaultSecureProtocol</code> 这个键，在64位Window系统中，要在以上两处添加这个键，并设置相应的合法值，值的类型为DWORD。</p><p>也可以使用Windows官方提供的快速工具Easy Fix 来实现上述键值的自动添加。下载链接：<a href="https://download.microsoft.com/download/0/6/5/0658B1A7-6D2E-474F-BC2C-D69E5B9E9A68/MicrosoftEasyFix51044.msi%E3%80%82">https://download.microsoft.com/download/0/6/5/0658B1A7-6D2E-474F-BC2C-D69E5B9E9A68/MicrosoftEasyFix51044.msi。</a></p><p>该工具除了在WinHttp这个键下（在64位系统中，注册表的上述两处位置），添加<code>DefaultSecureProtocol</code> 这个键和默认值0x00000a00。还会将在下列两处位置添加一个名为<code>SecureProtocol</code>的新键和默认值0x00000a00，以开启IE浏览器对TLS 1.1 和 TLS 1.2两个协议的支持。两处位置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings</span><br></pre></td></tr></table></figure><p>添加后的结果如下图所示：</p><p><img src="/2021/06/19/0813-pyenv-install-error-secure-channel-issue/image-20210619150914631.png" alt="image-20210619150914631"></p><h3 id="第二步，在Windows-7上开启SChannel组件级别的TLS-1-0和TLS-1-2两个协议的支持"><a href="#第二步，在Windows-7上开启SChannel组件级别的TLS-1-0和TLS-1-2两个协议的支持" class="headerlink" title="第二步，在Windows 7上开启SChannel组件级别的TLS 1.0和TLS 1.2两个协议的支持"></a>第二步，在Windows 7上开启SChannel组件级别的TLS 1.0和TLS 1.2两个协议的支持</h3><p><strong>SChannel</strong>也被称为Secure Channel 23，是一个windows子系统，当windows应用程序想要做任何与TLS相关的事情时，比如与远程服务器建立一个加密会话，或接受来自客户端的TLS连接，就会使用Schannel，从体系来看，SChannel实现了Security Support Provider Interface (SSPI)接口，是微软提供的SSP包之一。SSP包还包括CredSSP、Negotiate、NTLM、Kerberos和Digest24等等。</p><p>SChannel使用示例：</p><p><strong>HTTPS连接</strong></p><blockquote><p>由IE，Edge，powershell的<code>InvokeWebRequest</code>发起的 由IIS web server收到的</p></blockquote><p><strong>RDP连接</strong></p><blockquote><p>客户端的mstsc.exe 服务器上的终端服务（svchost.exe中的termsrv.dll）</p></blockquote><p>微软官方文档TLS-SSL设置一文提到，若要在Windows 7系统上协商和启用TLS 1.0和TLS 2.0的版本就需要在相应的子项中创建<code>DisabledByDefault</code>的子健，并将该键的值设置为设置0。</p><p>对于TLS 1.0，注册表位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client</span><br></pre></td></tr></table></figure><p>对于TLS 1.2，注册表位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client</span><br></pre></td></tr></table></figure><p>添加之后结果应如下图所示。</p><p><img src="/2021/06/19/0813-pyenv-install-error-secure-channel-issue/image-20210619141719216.png" alt="image-20210619141719216"></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>当完成上述注册表的添加与修改后就可以尝试重新打开cmd，并使用命令<code>pyenv install xxx</code> 安装新的版本，我测试的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\nobody&gt;pyenv install 3.7.9</span><br><span class="line">:: [Info] ::  Mirror: https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python</span><br><span class="line">:: [Downloading] ::  3.7.9 ...</span><br><span class="line">:: [Downloading] ::  From https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.7.9&#x2F;python-3.7.9-amd64-webinstall.exe</span><br><span class="line">:: [Downloading] ::  To   C:\Users\nobody\.pyenv\pyenv-win\install_cache\python-3.7.9-amd64-webinstall.exe</span><br><span class="line">:: [Installing] ::  3.7.9 ...</span><br><span class="line">:: [Info] :: completed! 3.7.9</span><br></pre></td></tr></table></figure><p>检查安装结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\nobody&gt;pyenv versions</span><br><span class="line">  3.7.9</span><br></pre></td></tr></table></figure><p>相比pyenv在其他系统如Linux 和Mac OS中，<code>pyenv versions</code>的结果少了一个<strong>system</strong>, 即表示系统预装，或者系统级别的Python版本，可以将系统安装的Python通过<code>mklink /J</code>或者<code>mklink /D</code> 命令创建一个快捷方式，即link，将系统安装的Python映射到pyevn的相关子目录，如下图，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\nobody&gt;mklink /J <span class="string">&quot;C:\Users\nobody\.pyenv\pyenv-win\versions\system&quot;</span> <span class="string">&quot;C:\Python27&quot;</span></span><br><span class="line">Connection created <span class="keyword">for</span> C:\Users\nobody\.pyenv\pyenv-win\versions\system &lt;&lt;===&gt;&gt; C:\Python27</span><br></pre></td></tr></table></figure><p>然后在使用<code>pyenv versions</code>检查已安装的版本，会得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\nobody&gt;pyenv versions</span><br><span class="line">  3.7.9</span><br><span class="line">  system</span><br></pre></td></tr></table></figure><p>在使用<code>pyenv global system</code>·将系统安装的python版本设置为全局默认版本，再次使用<code>pyenv versions</code>检查已安装的版本，会得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\nobody&gt;pyenv versions</span><br><span class="line">  3.7.9</span><br><span class="line">* system (set by C:\Users\nobody\.pyenv\pyenv-win\version)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上即为本人在Windows 7系统中安装和配置pyenv时所遇问题和找到的解决方案。上述接近问题的办法并非自己原创，部分内容来自官方文档，自己总结了一下，假如了一些扩展性的知识，文章是想作为自己学习的日志，方便自己日后回顾。上述内容仅为一家之言，并非最优，若读者有别的思路也欢迎关注我的个人微信公众号，一起讨论学习。</p><h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="mklink命令-d和-j参数的区别总结如下："><a href="#mklink命令-d和-j参数的区别总结如下：" class="headerlink" title="mklink命令/d和/j参数的区别总结如下："></a>mklink命令/d和/j参数的区别总结如下：</h3><h4 id="差异1，当创建时"><a href="#差异1，当创建时" class="headerlink" title="差异1，当创建时"></a>差异1，当创建时</h4><ul><li>/d 可以使用相对路径方式创建</li><li>/j  必须绝对路径方式创建</li></ul><p>此区别意义不大，建议所有的mklink目录均用绝对路径创建</p><h4 id="差异2，当复制和剪切时"><a href="#差异2，当复制和剪切时" class="headerlink" title="差异2，当复制和剪切时"></a>差异2，当复制和剪切时</h4><ul><li>复制：/d /j 均生成源目录的内容副本，变为一般文件夹</li><li>剪切/移动：<ul><li>/d 生成的目录，移动到其他地方，仍旧保持链接。对源目录无影响，/d生成的目录消失</li><li>/j   生成的目录，移动到其他地方，会产生一个新的副本文件夹，源文件夹内容全部移至新普通文件夹内，源文件夹清空，源文件夹仍旧存在，/j生成的目录也依旧存在</li></ul></li></ul><h4 id="差异3，当使用软件打开时"><a href="#差异3，当使用软件打开时" class="headerlink" title="差异3，当使用软件打开时"></a>差异3，当使用软件打开时</h4><ul><li>/d生成的目录，地址栏会跳到源目录位置。</li><li>/J生成的目录，地址栏不会跳到源目录位置。</li></ul><hr><div style="color:#757288;font-size:1.3rem;pading:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Jim Wang 公众号:  &lt;a class=&quot;main-button-link&quot; href=&quot;#wechat&quot; rel=&quot;noopener&quot;&gt;巴博萨船长&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：如何解决pyenv的Windows版本pyenv-win在Windows 7中安装配置pyenv-win时，遇到的:: [ERROR] :: An error occurred in the support of the secure channel，为什么会存在secure protocol 安全协议的问题？如何在Window 7系统中开启TLS 1.0和 TSL 2.0两个协议，什么是SChannel ？如何设置pyenv版本列表中的system选项？mlink命令中的/f与/d的区别是什么？&lt;/p&gt;
&lt;p&gt;Abstract: How to solve the problem of pyenv-win when installing and configuring pyenv-win in Windows 7:: [ERROR] :: An error occurred in the support of the secure channel, why there is a secure protocol problem? ? How to enable TLS 1.0 and TSL 2.0 in Window 7 system, what is SChannel? How to set the system option in the pyenv version list? What is the difference between /f and /d in the mlink command?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python 相关 - 8. Python 杂记" scheme="https://zicowarn.github.io/categories/Python-%E7%9B%B8%E5%85%B3-8-Python-%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="https://zicowarn.github.io/tags/Python/"/>
    
      <category term="杂记" scheme="https://zicowarn.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="pyenv" scheme="https://zicowarn.github.io/tags/pyenv/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 如何在tranquilpeak主题中使用mermaid语句与Latex语句</title>
    <link href="https://zicowarn.github.io/2020/12/19/hexo-04-use-mermaid-and-matjax-with-hexo-tranquilpeak-theme/"/>
    <id>https://zicowarn.github.io/2020/12/19/hexo-04-use-mermaid-and-matjax-with-hexo-tranquilpeak-theme/</id>
    <published>2020-12-19T04:17:31.000Z</published>
    <updated>2021-08-19T07:17:01.515Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号:  <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本博客的文章都是使用Typora完成编辑的，Typora是一款Markdown编辑器，其集成了Mermaid库，可以方便地在文章中添加诸如流程图，甘特图，时序图与类图等图表。Typora对Latex也进行了很好的支持，也能够轻松实现在文章中添加数学公式。我们简单总结一下，Markdown中实现图表可以使用mermaid，Markdown中实现数学公式可以使用Latex语句。</p><p>本博客使用的是Hexo这款基于Node.js的静态框架，生成的静态页面托管在Github上，这就决定了Typora中支持的特征不一定在Hexo中完美支持，必然存在一些差异。默认情况下Hexo是不支持mermaid的，而Latex的数学公式。使用Hexo主题不同，对这两个功能的支持也不同。本博客使用的是Hexo的tranquilpeak主题，该主题就不支持mermaid与Latex，本文就讨论一下，如何在该主题中完成对这两个功能的支持。当然解决问题的方法千千万万，本文讨论的只是其中一种，其目的就是在遇到相似问题时提供一种思路而已。</p><h3 id="支持Mermaid语法"><a href="#支持Mermaid语法" class="headerlink" title="支持Mermaid语法"></a>支持Mermaid语法</h3><p>一些比较流行的Hexo主题，有的已经在主题代码中实现了对Mermaid语法的支持，仅需要对主题配置文件<code>_config.yml</code>稍作修改，即可开启Hexo中博客Mardown文章对Marmaid语法支持。但如果使用Hexo的tranquilpeak主题，需要自己动手完成的就相对较多。Mermaid的语法支持可以在前端实现，前端实现离不开JavaScript代码，整体思路就是在主题页面模版文件中找到一合适位置，添加使用JavaScript一文件，即mermaid.min.js。</p><p>Markdown文章中，Mermaid语法样式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">​&lt;pre class="mermaid"&gt;graph TD;</span><br><span class="line">A--&gt;B;</span><br><span class="line">A--&gt;C;</span><br><span class="line">B--&gt;D;</span><br><span class="line">C--&gt;D;</span><br><span class="line">​&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>Typora中输入上述内容就可以的到如下一个图表：</p><p><img src="/2020/12/19/hexo-04-use-mermaid-and-matjax-with-hexo-tranquilpeak-theme/image-20201219130807547.png" alt="image-20201219130807547"></p><p>而下面的图片是由前端在页面加载时根据mermaid语句渲染而的，也是本文中，我们需要实现的目标。如果渲染不成功看到的即为文本，请注意两者差异：</p><pre class="mermaid">graph TD;    A--&gt;B;    A--&gt;C;    B--&gt;D;    C--&gt;D;</pre><p>如果Hexo不支持Mermaid语法，则生产的静态页面显示的还是文本，不是图表。检查页面元素发现，静态页面中的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre class="mermaid"&gt;graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>本章节开头就写到，可以在前端实现对mermaid语法的支持，也就是说要想办法使用将类class为mermaid元素转换成图表。实现这一目的，我们就需要添加插件支持，在Hexo目录下运行如下命令安装所需插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure><p>插件安装完成之后，需要对主题（本例使用tranquilpeak主题）配置文件<code>_config.yml</code>文件做少许修改，在配置文件末尾，添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mermaid (markdwon to flow chart, seq chart, class chart ...)</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure><p>接下来要做的是，搜索并下载最新版本（截至2020-12-19，版本为8.8.4）<code>mermaid.min.js</code>与<code>mermaid.min.js.map</code>的这两个文件。将文件保存在当前主题的<code>/source/assets/js</code>目录下。</p><p>然后就是在主题中添加代码使用这个js文件，插件Github首页建议的是修改<code>after-footer.ejs</code>, tranquilpeak主题没有此文件，<code>themes/tranquilpeak/layout/_partial/script.ejs</code>可以作为替代方案，在该文件中做出如下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    .....  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  &lt;% } else if (theme.mermaid.enable) { %&gt;  // 修改 开始位置</span><br><span class="line">    &lt;%- js('assets/js/mermaid.min.js') %&gt;  // 或者使用CDN</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function() {</span><br><span class="line">            var mermaid_config = {</span><br><span class="line">                startOnLoad: true,</span><br><span class="line">                theme: '&lt;%- theme.mermaid.theme %&gt;',</span><br><span class="line">                flowchart:{</span><br><span class="line">                    useMaxWidth: false,</span><br><span class="line">                    htmlLabels: true</span><br><span class="line">                }                </span><br><span class="line">            }</span><br><span class="line">            mermaid.initialize(mermaid_config);</span><br><span class="line">        });</span><br><span class="line">    &lt;/script&gt;   // 修改 结束位置</span><br><span class="line">  &lt;% } else if (theme.gitalk.enable) { %&gt;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>我在示例代码中保留部分原有代码，以便各位更好定位所需添加代码在原文中的位置，代码第3行与第9行，就是我们在主题配置文件中添加的相关配置项。如果想使用CDN而不是本地文件，也可以对第4行进行修改或者结合配置文件，通过配置实现CDN与本地文件的切换。</p><p>完成上述内容基本上就完成了Hexo tranquilpeak主题对mermaid语法的支持配置。</p><h3 id="支持Latex语法"><a href="#支持Latex语法" class="headerlink" title="支持Latex语法"></a>支持Latex语法</h3><p>Hexo 一些比较流行主题也在主题代码中完成了Latex语法的支持，遗憾的是Hexo tranquilpeak主题却没有，所以还需手动完成对Latex语法的支持。Hexo 对Latex语法的支持可以在后端实现。这里需要注意的是，由于Hexo 是静态博客框架，所以博客文章都是静态页面，没有真正意义上的后端服务器，这里所谓的后端完成，其实是在Hexo将Markdown渲染成html文件这个过程。</p><p>要实现Latex语法支持，就需要用到<code>hexo-filter-mathjax</code>这个Hexo插件，使用这个插件的时候需要注意，该插件不需要任何前端脚本与其他Math相关插件的支持，因此，若之前已经尝试了别的Math相关插件，或者前端脚本，请先卸载这些插件并移除相关前端脚本。在Hexo目录下运行如下命令安装所需插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-filter-mathjax</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>安装完该插件后，就需要对Hexo配置文件进行必要修改适配。请注意不是Hexo主题配置文件，是Hexo项目配置文件<code>_config.yml</code>。在配置文件末尾添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">none</span> <span class="comment"># or 'ams' or 'all'</span></span><br><span class="line">  <span class="attr">single_dollars:</span> <span class="literal">true</span> <span class="comment"># enable single dollar signs as in-line math delimiters</span></span><br><span class="line">  <span class="attr">cjk_width:</span> <span class="number">0.9</span> <span class="comment"># relative CJK char width</span></span><br><span class="line">  <span class="attr">normal_width:</span> <span class="number">0.6</span> <span class="comment"># relative normal (monospace) width</span></span><br><span class="line">  <span class="attr">append_css:</span> <span class="literal">true</span> <span class="comment"># add CSS to pages rendered by MathJax</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">false</span> <span class="comment"># if true, every page will be rendered by MathJax regardless the `mathjax` setting in Front-matter</span></span><br></pre></td></tr></table></figure><p>该插件的使用方法比较简单，仅需要在文章的预定义部分添加<code>mathjax: true</code>，这个控制项即可，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: On the Electrodynamics of Moving Bodies</span><br><span class="line">categories: Physics</span><br><span class="line">date: 1905-06-30 12:00:00</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>插件Github首页推荐使用<code>hexo-renderer-pandoc</code>替代默认的<code>hexo-renderer-marked</code>，说是pandoc渲染插件相比默认的marked插件能够更好的处理Markdown文章中的数学公式，默认的渲染插件无法处理Latex与Markdown的语法冲突。由于截止目前我在使用marked渲染插件时还没遇到这样的通途，所以也就没尝试这个新的渲染插件，如果以后遇见，就在新的文章中讨论分享。</p><p>如果完成上述支持的配置就可以进行测试了，我们以如下Latex语句为例进行测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">i\hbar\frac{\partial}{\partial t}\psi=-\frac{\hbar^2}{2m}\nabla^2\psi+V\psi</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>上述语句在Typora中会生成如下公式（注意下列公式为图片）：</p><p><img src="/2020/12/19/hexo-04-use-mermaid-and-matjax-with-hexo-tranquilpeak-theme/image-20201219141838371.png" alt="image-20201219141838371"></p><p>下列公式，为插件渲染后公式，<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex" xmlns="http://www.w3.org/2000/svg" width="25.757ex" height="5.018ex" role="img" focusable="false" viewbox="0 -1509.9 11384.6 2217.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(345, 0)"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"/></g><g data-mml-node="mfrac" transform="translate(907, 0)"><g data-mml-node="mi" transform="translate(400.5, 676)"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"/></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"/></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g></g><rect width="1127" height="60" x="120" y="220"/></g><g data-mml-node="mi" transform="translate(2274, 0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"/></g><g data-mml-node="mo" transform="translate(3202.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(4258.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mfrac" transform="translate(5036.6, 0)"><g data-mml-node="msup" transform="translate(400.7, 676)"><g data-mml-node="mi"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"/></g><g data-mml-node="mn" transform="translate(613.1, 363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><rect width="1578" height="60" x="120" y="220"/></g><g data-mml-node="msup" transform="translate(6854.6, 0)"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"/></g><g data-mml-node="mn" transform="translate(833, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(8091.1, 0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"/></g><g data-mml-node="mo" transform="translate(8964.3, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(9964.6, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(10733.6, 0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"/></g></g></g></svg></mjx-container><br>其在渲染生成的HTML文件中为一SVG图形，HTML相关代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mjx-container</span> <span class="attr">class</span>=<span class="string">"MathJax"</span> <span class="attr">jax</span>=<span class="string">"SVG"</span> <span class="attr">display</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">style</span>=<span class="string">"vertical-align: -1.602ex"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"25.757ex"</span> <span class="attr">height</span>=<span class="string">"5.018ex"</span> <span class="attr">role</span>=<span class="string">"img"</span> <span class="attr">focusable</span>=<span class="string">"false"</span> <span class="attr">viewBox</span>=<span class="string">"0 -1509.9 11384.6 2217.9"</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mjx-container</span>&gt;</span></span><br></pre></td></tr></table></figure><p>考虑到文章篇幅，svg元素中的内容在此省略。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以上就是，在使用Hexo tranquilpeak主题时，如何在Hexo博客中实现Latex语法与mermaid语法的支持的所有内容。在使用Hexo一些主题时，可能不需要自己做这些配置。但是如果你使用的主题没有对这两项内容进行支持，就可以参考上述内容，独自完成Latex语法与mermaid语法的支持。能有此文全因自己好奇。在文章最后想说一下，这里没有专家，记录这些主要是为了自己以后回顾学习之方便，文章有不足之处也实属正常。见解不同，诚切赐教，关注微信公众号，一起讨论学习。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Jim Wang 公众号:  &lt;a class=&quot;main-button-link&quot; href=&quot;#wechat&quot; rel=&quot;noopener&quot;&gt;巴博萨船长&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：在使用Hexo管理博客文章时，如果使用的Hexo主题（比如tranquilpeak主题）不支持Latex与mermaid语法，这个问题该如何解决？Typora与Hexo对这两种语法的支持有什么差异？如果博客文章是在Typora上编辑，且文件中包含Latex与mermaid语句时，如何用最小的代价实现这些文章能够通过Hexo渲染并发布&lt;/p&gt;
&lt;p&gt;Abstract: When using Hexo to manage blog posts, if the Hexo theme used (such as tranquilpeak theme) does not support Latex and mermaid syntax, how to solve this problem? What is the difference between Typora and Hexo’s support for these two syntaxes? If the blog post is edited on Typora and the file contains Latex and mermaid sentences, how can these posts be rendered and published by Hexo with the least cost?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/Hexo-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Hexo" scheme="https://zicowarn.github.io/tags/Hexo/"/>
    
      <category term="使用技巧" scheme="https://zicowarn.github.io/tags/%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>机械加工 之表面粗糙度的定义与总结</title>
    <link href="https://zicowarn.github.io/2020/11/28/machining-01-surface-roughness-knowledge/"/>
    <id>https://zicowarn.github.io/2020/11/28/machining-01-surface-roughness-knowledge/</id>
    <published>2020-11-28T15:24:37.000Z</published>
    <updated>2022-06-06T03:09:04.361Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号:  <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><h3 id="表面粗糙度定义"><a href="#表面粗糙度定义" class="headerlink" title="表面粗糙度定义"></a>表面粗糙度定义</h3><p>是通过真实表面法线向量方向与其理想形式的偏差来量化的。理解为加工表面具有的较小间距和微小峰谷的不平度。其两波峰或两波谷之间的距离（波距）很小（在1mm以下），它属于微观几何形状误差如果这些偏差大，则表面粗糙；如果它们很小，则表面是光滑的。理论（几何）表面粗糙度。如何获得表面粗糙度值车削时的理论表面粗糙度表示最小值切削条件下的粗糙度值，由公式如下：</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201129004330995.png" alt="image-20201129004330995"><br>上述公式中:</p><ul><li><p>Rz<sub>h</sub> ：理论表面粗糙度，单位µm。</p></li><li><p>f：进给速率（每转进给，Feed per revolution），单位mm/rev。</p><p>进给速率的的计算公式如下：</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201129004401554.png" alt="image-20201129004401554"></p><p>上述公式中</p><ul><li><strong>l</strong>为切割每分钟长度，单位mm/min。</li><li><strong>n</strong>为主轴转速（Main Axis Spindle Speed），单位为min<sup>-1</sup>。</li></ul><p>例，当主轴转速为500min-1且每分钟切削长度为120mm / min时，每转进给量是多少？</p><p>答，将n = 500，I = 120代入公式。</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201129004431547.png" alt="image-20201129004431547"></p><p>即为0.24 mm/rev。</p></li><li><p>R<sub>r&epsilon;</sub>：也记作R<sub>e</sub>，内转角半径（Corner Radius of Insert），单位mm。</p></li></ul><p>理解上述公式可参考下图。</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128115916694.png" alt="image-20201128115916694"></p><h3 id="Ra，Rz与Ry-定义"><a href="#Ra，Rz与Ry-定义" class="headerlink" title="Ra，Rz与Ry 定义"></a>Ra，Rz与Ry 定义</h3><p>Ra：轮廓算术平均偏差，取度L内轮廓偏距绝值算术平均值。主要的评定参数。<br>Rz：微观不平度十点高度，取度L内5轮廓峰高平均值与 5轮廓谷深平均值。一般只用来表示比较短小的表面。<br>Ry：轮廓最大高度，取度L内轮廓峰顶线与轮廓谷底线间距离。基本不单独使用，算是一个极限偏差值吧。</p><h4 id="算数平均偏差Ra"><a href="#算数平均偏差Ra" class="headerlink" title="算数平均偏差Ra"></a>算数平均偏差Ra</h4><p>Ra 的计算公式如下：</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201129004450644.png" alt="image-20201129004450644"></p><p>当粗糙度曲线用y = f（x）表示时，以X轴为平均线方向，以Y轴为粗糙度曲线的垂直放大倍率在采样参考长度“ℓ”的范围内时用微米表示。Ra能客观地反映被测轮廓的几何特性。Ra值可用电动轮廓仪直接测量，但不够直观。</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128130650419.png" alt="image-20201128130650419"></p><h4 id="微观不平度十点高度Rz"><a href="#微观不平度十点高度Rz" class="headerlink" title="微观不平度十点高度Rz"></a>微观不平度十点高度Rz</h4><p>Rz的计算公式如下：</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201129004534086.png" alt="image-20201129004534086"></p><p>从平均线与最高峰之间的5个峰（Yp）之间的平均距离以及平均线与5个谷值之间的各个距离（Yv）的平均值（以微米为单位）即可得出Rz。Rz用于评定表面粗糙度高度参数有较好的直观性，易在光学仪器上测量，但反映被测轮廓几何形状特性有局限性。</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128132407456.png" alt="image-20201128132407456"></p><p>上图中Yp1，Yp2，Yp3，Yp4，Yp5，为从平均线到采样参考长度“ℓ”范围内最高的5个峰的距离。而Yv1，Yv2，Yv3，Yv4，Yv5，则为从平均线到最低5米谷在取样基准长度“ℓ”的范围内的距离。</p><h4 id="轮廓最大高度Ry"><a href="#轮廓最大高度Ry" class="headerlink" title="轮廓最大高度Ry"></a>轮廓最大高度Ry</h4><p>Ry的计算公式如下：</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201129004548681.png" alt="image-20201129004548681"></p><p>Ry是从采样基准长度（ℓ）范围内的最高峰和最低谷之间的距离（以微米为单位）到粗糙度曲线的平均线方向得出的。参数Ry，测量简单，当被测表面很小，不适宜采用Rz，Rz评定时，可采用Ry。</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128133525881.png" alt="image-20201128133525881"></p><h4 id="均方根值RMS"><a href="#均方根值RMS" class="headerlink" title="均方根值RMS"></a>均方根值RMS</h4><p>RMS的计算公式如下：</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201129004604616.png" alt="image-20201129004604616"></p><p>上述式子中：</p><ul><li>L， 为评估长度</li><li>Z(x)，为轮廓高度函数</li></ul><p>该公式近似等效于：</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201129004615765.png" alt="image-20201129004615765"></p><p>RMS是轮廓长度与平均线偏差的均方根平均值，记录在评估长度内。Ra和RMS都是表面粗糙度的表示，但是各自的计算方式不同。Ra被计算为表面的微观粗糙度的平均峰和谷。RMS计算为表面的微观均方根的均方根。每个值都使用相同的表面峰和谷高度测量值，但使用不同的公式进行测量。</p><h4 id="JIS标准中Ra，Rz与Ry符号与变化"><a href="#JIS标准中Ra，Rz与Ry符号与变化" class="headerlink" title="JIS标准中Ra，Rz与Ry符号与变化"></a>JIS标准中Ra，Rz与Ry符号与变化</h4><table><thead><tr><th>类型</th><th>依据JIS B 0601-1994 标准</th><th>依据JIS B 0601-2001 标准</th></tr></thead><tbody><tr><td>轮廓最大高度</td><td>R<sub>y</sub></td><td>R<sub>z</sub></td></tr><tr><td>微观不平度十点高度</td><td>R<sub>z</sub></td><td>R<sub>zJIS</sub></td></tr><tr><td>轮廓算术平均偏差</td><td>R<sub>a</sub></td><td>R<sub>a</sub></td></tr></tbody></table><h3 id="各国对于表面精度的定义工业标准（部分）"><a href="#各国对于表面精度的定义工业标准（部分）" class="headerlink" title="各国对于表面精度的定义工业标准（部分）"></a>各国对于表面精度的定义工业标准（部分）</h3><h4 id="中国："><a href="#中国：" class="headerlink" title="中国："></a>中国：</h4><ul><li>GB/T 3505 2000 表面粗糙度术语表面及其参数；</li><li>GB/T 1031-1995 表面粗糙度参数及其数值；</li><li>GB/T 131-1993 机械制图表面粗糙度符号、代号及其注法。</li></ul><h4 id="日本："><a href="#日本：" class="headerlink" title="日本："></a>日本：</h4><ul><li>JIS B 0601-2001，定义和名称JISB图。表面粗糙度。</li><li>JIS B 0601-1982，定义和名称JISB图。表面粗糙度，旧版。</li><li>JIS B 0031-1982，定义和名称JISB图。表面粗糙度，旧版。</li><li>JIS B 0031-1994，定义和名称JISB图。表面粗糙度，旧版。</li><li>JIS B 0601-1994，定义和名称JISB图。表面粗糙度，旧版。</li></ul><h4 id="英国："><a href="#英国：" class="headerlink" title="英国："></a>英国：</h4><ul><li>BS EN ISO 4287:2000，常用参数的定义。</li></ul><h4 id="德国："><a href="#德国：" class="headerlink" title="德国："></a>德国：</h4><ul><li>DIN 4768 （1990）各个领域（包括金属铸件）表面粗糙度的标准。</li><li>DIN 4771 （1977）测量表面轮廓高度Pₜ。</li><li>DIN 4775 （1982）测量工件的表面粗糙度。</li><li>DIN 4776 （1990）测量表面粗糙度； 参数R 1，R 4，Rvk，Mr1，Mr2用于描述粗糙度轮廓中的材料部分（轮廓承载长度比）； 测量条件和评估程序。</li><li>DIN 4777 （1982）表面计量； 电接触式测针仪器的轮廓过滤器； 相位校正滤波器。</li><li>DIN ISO 1302 各个领域（包括金属铸件）表面粗糙度的标准。</li></ul><h4 id="法国："><a href="#法国：" class="headerlink" title="法国："></a>法国：</h4><ul><li>NF E05-015 （1984），产品几何规格（GPS）-表面纹理：轮廓法-术语，定义和表面纹理参数</li><li>NF E05-016 （1978），几何产品规范（GPS）-技术产品文档中的表面纹理指示</li><li>NF E05-017 （1972），产品的表面状况，表面的测定方法。</li></ul><h4 id="欧洲："><a href="#欧洲：" class="headerlink" title="欧洲："></a>欧洲：</h4><ul><li>EN 10049 2005， 该欧洲标准定义了未镀膜（冷轧和热轧酸洗钢）和镀有金属涂层（例如锌，铝，锡，铬）的金属扁平产品的表面粗糙度参数的测量条件</li></ul><h4 id="美国国家标准"><a href="#美国国家标准" class="headerlink" title="美国国家标准:"></a>美国国家标准:</h4><ul><li>ASME B46.1-2009，表面纹理（表面粗糙度，  波度和位置）。</li><li>ASME B46.1-1995，表面纹理（表面粗糙度，  波度和位置），旧版。</li><li>ASME B46.1-1985，表面纹理（表面粗糙度，  波度和位置），旧版。</li><li>ANSI B4.2-1978，表面纹理。 表面ANSI粗糙度，起伏和起伏。</li></ul><h4 id="国际标准："><a href="#国际标准：" class="headerlink" title="国际标准："></a>国际标准：</h4><ul><li><p>ISO 1320-2002，主要标准，提供常用参数的定义。</p></li><li><p>ISO 25178-71-2012， 几何技术规范(GPS)，表面纹理.</p></li><li><p>ISO 468-1982，表面粗糙度—参数，其值和用于指定要求的一般规则</p></li><li><p>ISO 4287-1997，常用参数的定义，例如Rx给出的定义。</p></li><li><p>ISO 4287/1-1984，</p></li><li><p>ISO 4288-1996，产品几何技术规范，轮廓法-表面纹理评估的规则和程序</p></li><li><p>ISO 4288-1985，</p></li><li><p>ISO 1320-1978，</p></li><li><p>ISO 12085-1996，轮廓方法—图案参数</p></li></ul><h3 id="表面粗糙度的符号、代号"><a href="#表面粗糙度的符号、代号" class="headerlink" title="表面粗糙度的符号、代号"></a>表面粗糙度的符号、代号</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>如下图所示，在表面符号的周围表示表面粗糙度值，截止值或基准长度，加工方法，晶粒方向，表面起伏等。</p><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128211851279.png" alt="image-20201128211851279"></p><ul><li>a，Ra值</li><li>b，加工方式</li><li>c，临界值，评估长度</li><li>c´,  参考长度，评估长度</li><li>d，纹理方向</li><li>f，Ra以外的参数（例如：参数/切断水平）</li><li>g，表面起伏</li></ul><h4 id="基本符号样式-JIS-B-0610-与DIN-ISO-1302-DIN-4768"><a href="#基本符号样式-JIS-B-0610-与DIN-ISO-1302-DIN-4768" class="headerlink" title="基本符号样式 (JIS B 0610 与DIN ISO 1302, DIN 4768 )"></a>基本符号样式 (JIS B 0610 与DIN ISO 1302, DIN 4768 )</h4><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128212523571.png" alt="image-20201128212523571"></p><h4 id="加工需去除材料-JIS-B-0610-与DIN-ISO-1302-DIN-4768"><a href="#加工需去除材料-JIS-B-0610-与DIN-ISO-1302-DIN-4768" class="headerlink" title="加工需去除材料 (JIS B 0610 与DIN ISO 1302, DIN 4768 )"></a>加工需去除材料 (JIS B 0610 与DIN ISO 1302, DIN 4768 )</h4><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128212639604.png" alt="image-20201128212639604"></p><h4 id="加工时禁止去除材料-JIS-B-0610-与DIN-ISO-1302-DIN-4768"><a href="#加工时禁止去除材料-JIS-B-0610-与DIN-ISO-1302-DIN-4768" class="headerlink" title="加工时禁止去除材料(JIS B 0610 与DIN ISO 1302, DIN 4768 )"></a>加工时禁止去除材料(JIS B 0610 与DIN ISO 1302, DIN 4768 )</h4><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128212737091.png" alt="image-20201128212737091"></p><h4 id="预设Ra的上限-JIS-B-0610-与DIN-ISO-1302-DIN-4768"><a href="#预设Ra的上限-JIS-B-0610-与DIN-ISO-1302-DIN-4768" class="headerlink" title="预设Ra的上限(JIS B 0610 与DIN ISO 1302, DIN 4768 )"></a>预设Ra的上限(JIS B 0610 与DIN ISO 1302, DIN 4768 )</h4><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128212913244.png" alt="image-20201128212913244"></p><h4 id="标定纹理方向-JIS-B-0610-与DIN-ISO-1302-DIN-4768"><a href="#标定纹理方向-JIS-B-0610-与DIN-ISO-1302-DIN-4768" class="headerlink" title="标定纹理方向(JIS B 0610 与DIN ISO 1302, DIN 4768 )"></a>标定纹理方向(JIS B 0610 与DIN ISO 1302, DIN 4768 )</h4><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128213020074.png" alt="image-20201128213020074"></p><h4 id="预设Ra的上限与下限-JIS-B-0610-与DIN-ISO-1302-DIN-4768"><a href="#预设Ra的上限与下限-JIS-B-0610-与DIN-ISO-1302-DIN-4768" class="headerlink" title="预设Ra的上限与下限(JIS B 0610 与DIN ISO 1302, DIN 4768 )"></a>预设Ra的上限与下限(JIS B 0610 与DIN ISO 1302, DIN 4768 )</h4><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128213048947.png" alt="image-20201128213048947"></p><h4 id="标定加工方式-JIS-B-0610-与DIN-ISO-1302-DIN-4768"><a href="#标定加工方式-JIS-B-0610-与DIN-ISO-1302-DIN-4768" class="headerlink" title="标定加工方式(JIS B 0610 与DIN ISO 1302, DIN 4768 )"></a>标定加工方式(JIS B 0610 与DIN ISO 1302, DIN 4768 )</h4><p><img src="/2020/11/28/machining-01-surface-roughness-knowledge/image-20201128213122267.png" alt="image-20201128213122267"></p><h3 id="表面粗糙度三角形符号与Ra，Rz和Ry对照表"><a href="#表面粗糙度三角形符号与Ra，Rz和Ry对照表" class="headerlink" title="表面粗糙度三角形符号与Ra，Rz和Ry对照表"></a>表面粗糙度三角形符号与Ra，Rz和Ry对照表</h3><p>三角形符号是是在加工设计是，对加工表面精度等级进行简单标记的一种方式。需要说明的是：从1994年修订版的JIS标准中取消了精加工符号（三角形▽和波〜）。在这里也就对三角形符号进行简单介绍。</p><table><thead><tr><th>Ra 单位µm</th><th>Ry 单位µm</th><th>RzJIS 单位µm</th><th>三角形符号</th></tr></thead><tbody><tr><td>0.0025<br>0.05<br>0.1<br>0.2</td><td>0.1<br>0.2<br>0.4<br>0.8</td><td>0.1<br>0.2<br>0.4<br>0.8</td><td>&nabla;&nabla;&nabla;&nabla;</td></tr><tr><td>0.4<br>0.8<br>1.6</td><td>1.6<br>3.2<br>6.3</td><td>1.6<br>3.2<br>6.3</td><td>&nabla;&nabla;&nabla;</td></tr><tr><td>3.2<br>6.3</td><td>12.5<br>25</td><td>12.5<br>25</td><td>&nabla;&nabla;</td></tr><tr><td>12.5<br>25</td><td>50<br>100</td><td>50<br>100</td><td>&nabla;</td></tr></tbody></table><h3 id="表面粗糙度对照表"><a href="#表面粗糙度对照表" class="headerlink" title="表面粗糙度对照表"></a>表面粗糙度对照表</h3><table><thead><tr><th>Rz (µm)</th><th>VDI-3400</th><th>Ra (µm)</th><th>RMS (µinch)</th><th>Class ISO 1302</th></tr></thead><tbody><tr><td>0.08</td><td>-</td><td>0.0125</td><td>0.5</td><td></td></tr><tr><td>0.16</td><td>-</td><td>0.025</td><td>1</td><td></td></tr><tr><td>0.32</td><td>-</td><td>0.05</td><td>2</td><td></td></tr><tr><td>0.64</td><td>0</td><td>0.10</td><td>4.1</td><td>N3</td></tr><tr><td>0.70</td><td>1</td><td>0.11</td><td>4.5</td><td></td></tr><tr><td>0.76</td><td>2</td><td>0.12</td><td>4.9</td><td></td></tr><tr><td>0.90</td><td>3</td><td>0.14</td><td>5.7</td><td></td></tr><tr><td>1.02</td><td>4</td><td>0.15</td><td>6.6</td><td></td></tr><tr><td>1.15</td><td>5</td><td>0.17</td><td>7.4</td><td></td></tr><tr><td>1.28</td><td>6</td><td>0.20</td><td>8.2</td><td>N4</td></tr><tr><td>1.41</td><td>7</td><td>0.23</td><td>9.0</td><td></td></tr><tr><td>1.60</td><td>8</td><td>0.25</td><td>10.2</td><td></td></tr><tr><td>1.79</td><td>9</td><td>0.28</td><td>11.5</td><td></td></tr><tr><td>2.05</td><td>10</td><td>0.32</td><td>13.1</td><td></td></tr><tr><td>2.24</td><td>11</td><td>0.35</td><td>14.3</td><td></td></tr><tr><td>2.56</td><td>12</td><td>0.40</td><td>16.4</td><td>N5</td></tr><tr><td>2.88</td><td>13</td><td>0.45</td><td>18.4</td><td></td></tr><tr><td>3.20</td><td>14</td><td>0.50</td><td>20.5</td><td></td></tr><tr><td>3.58</td><td>15</td><td>0.56</td><td>22.9</td><td></td></tr><tr><td>4.03</td><td>16</td><td>0.63</td><td>25.8</td><td></td></tr><tr><td>4.48</td><td>17</td><td>0.70</td><td>28.7</td><td></td></tr><tr><td>5.12</td><td>18</td><td>0.80</td><td>32.8</td><td></td></tr><tr><td>5.76</td><td>19</td><td>0.90</td><td>36.9</td><td>N6</td></tr><tr><td>6.40</td><td>20</td><td>1.00</td><td>41.0</td><td></td></tr><tr><td>7.17</td><td>21</td><td>1.12</td><td>45.8</td><td></td></tr><tr><td>8.06</td><td>22</td><td>1.26</td><td>51.6</td><td></td></tr><tr><td>8.96</td><td>23</td><td>1.40</td><td>57.3</td><td></td></tr><tr><td>10.24</td><td>24</td><td>1.60</td><td>65.5</td><td></td></tr><tr><td>11.52</td><td>25</td><td>1.80</td><td>73.7</td><td>N7</td></tr><tr><td>12.80</td><td>26</td><td>2.00</td><td>81.9</td><td></td></tr><tr><td>14.08</td><td>27</td><td>2.20</td><td>90.1</td><td></td></tr><tr><td>16.00</td><td>28</td><td>2.50</td><td>102.4</td><td></td></tr><tr><td>17.92</td><td>29</td><td>2.80</td><td>114.6</td><td></td></tr><tr><td>20.48</td><td>30</td><td>3.20</td><td>131.1</td><td>N8</td></tr><tr><td>22.40</td><td>31</td><td>3.50</td><td>143.4</td><td></td></tr><tr><td>25.60</td><td>32</td><td>4.00</td><td>163.8</td><td></td></tr><tr><td>-</td><td>33</td><td>4.50</td><td>-</td><td></td></tr><tr><td>32.00</td><td>34</td><td>5.00</td><td>204.8</td><td></td></tr><tr><td>-</td><td>35</td><td>5.60</td><td>-</td><td></td></tr><tr><td>40.32</td><td>36</td><td>6.30</td><td>258.0</td><td>N9</td></tr><tr><td>-</td><td>37</td><td>7.00</td><td>-</td><td></td></tr><tr><td>51.20</td><td>38</td><td>8.00</td><td>327.7</td><td></td></tr><tr><td>-</td><td>39</td><td>9.00</td><td>-</td><td></td></tr><tr><td>64.00</td><td>40</td><td>10.00</td><td>409.6</td><td></td></tr><tr><td>-</td><td>41</td><td>11.20</td><td>-</td><td></td></tr><tr><td>-</td><td>42</td><td>12.60</td><td>-</td><td>N10</td></tr><tr><td>-</td><td>43</td><td>14.00</td><td>-</td><td></td></tr><tr><td>-</td><td>44</td><td>16.00</td><td>-</td><td></td></tr><tr><td>-</td><td>45</td><td>18.00</td><td>-</td><td></td></tr></tbody></table><p>*VDI：Verein Deutscher Ingenieure 德国工业协会</p><p>*RMS：Root mean square 均方根</p><h3 id="加工方式与加工精度对照表"><a href="#加工方式与加工精度对照表" class="headerlink" title="加工方式与加工精度对照表"></a>加工方式与加工精度对照表</h3><p>表内符号 &#9675; 默认加工(Standard)，&#9679;  精密加工 (Precision)，&#9671;  粗加工(Rough)，&#9672; 中等 (Medium)，&#9670; 精密(Fine)</p><table style="border: 1px solid black;border-collapse: collapse;">      <thead style="font-size:x-small">        <tr>            <th colspan="2" style="font-size:x-small;border: 1px solid black;border-collapse: collapse;">Ra算术平均</th>            <th style="border: 1px solid black;border-collapse: collapse;">0.025</th>            <th style="border: 1px solid black;border-collapse: collapse;">0.05</th>            <th style="border: 1px solid black;border-collapse: collapse;">0.1</th>            <th style="border: 1px solid black;border-collapse: collapse;">0.2</th>            <th style="border: 1px solid black;border-collapse: collapse;">0.4</th>            <th style="border: 1px solid black;border-collapse: collapse;">0.8</th>            <th style="border: 1px solid black;border-collapse: collapse;">1.6</th>            <th style="border: 1px solid black;border-collapse: collapse;">3.2</th>            <th style="border: 1px solid black;border-collapse: collapse;">6.3</th>            <th style="border: 1px solid black;border-collapse: collapse;">12.5</th>            <th style="border: 1px solid black;border-collapse: collapse;">25</th>            <th style="border: 1px solid black;border-collapse: collapse;">50</th>            <th style="border: 1px solid black;border-collapse: collapse;">100</th>        </tr>        <tr>            <th colspan="2" style="font-size:x-small;border: 1px solid black;border-collapse: collapse;">Ry最大峰值</th>            <th style="border: 1px solid black;border-collapse: collapse;">0.1</th>            <th style="border: 1px solid black;border-collapse: collapse;">0.2</th>            <th style="border: 1px solid black;border-collapse: collapse;">0.4</th>            <th style="border: 1px solid black;border-collapse: collapse;">0.8</th>            <th style="border: 1px solid black;border-collapse: collapse;">1.6</th>            <th style="border: 1px solid black;border-collapse: collapse;">3.2</th>            <th style="border: 1px solid black;border-collapse: collapse;">6.3</th>            <th style="border: 1px solid black;border-collapse: collapse;">3.2</th>            <th style="border: 1px solid black;border-collapse: collapse;">12.5</th>            <th style="border: 1px solid black;border-collapse: collapse;">25</th>            <th style="border: 1px solid black;border-collapse: collapse;">100</th>            <th style="border: 1px solid black;border-collapse: collapse;">200</th>            <th style="border: 1px solid black;border-collapse: collapse;">400</th>        </tr>        <tr>            <th colspan="2" style="font-size:x-small;border: 1px solid black;border-collapse: collapse;">评定长度 mm</th>            <th colspan="4" style="text-align:center;border: 1px solid black;border-collapse: collapse;">0.25</th>            <th colspan="3" style="text-align:center;border: 1px solid black;border-collapse: collapse;">0.8</th>            <th colspan="2" style="text-align:center;border: 1px solid black;border-collapse: collapse;">2.5</th>            <th colspan="2" style="text-align:center;border: 1px solid black;border-collapse: collapse;">8</th>            <th colspan="2" style="text-align:center;border: 1px solid black;border-collapse: collapse;">25</th>        </tr>        <tr>            <th colspan="2" style="font-size:x-small;border: 1px solid black;border-collapse: collapse;">三角指示</th>            <th colspan="4" style="text-align:center;border: 1px solid black;border-collapse: collapse;">&nabla;&nabla;&nabla;&nabla;</th>            <th colspan="3" style="text-align:center;border: 1px solid black;border-collapse: collapse;">&nabla;&nabla;&nabla;</th>            <th colspan="2" style="text-align:center;border: 1px solid black;border-collapse: collapse;">&nabla;&nabla;</th>            <th colspan="2" style="text-align:center;border: 1px solid black;border-collapse: collapse;">&nabla;</th>            <th colspan="2" style="text-align:center;border: 1px solid black;border-collapse: collapse;">-</th>        </tr>    </thead>    <tbody style="font-size:x-small;background-color:white">        <tr>                     <td rowspan="35" style="font-size:x-small;transform: rotate(-90deg);white-space:nowrap;border: 1px solid black;border-collapse: collapse;">加工工艺</td>                     <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">锻造（Forging）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>        </tr>             <tr>                                <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">铸造（Casting）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>        </tr>        <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">压造（Die casting）</td>                 <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">热轧（Hot rolling）</td>             <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">冷轧（Cold rolling）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">拉丝（Drawing）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">挤压（Extruding）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">滚光（Tumbling ）</td>                 <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>        <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">喷砂（Sandblasting）</td>                 <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">轧制（Rolling）</td>                 <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">平面铣（Face cutter grinding）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">刨削（Planing）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">刻蚀（Carving Slotting）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">刀具磨削（Cutter grinding）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">精镗（Precision boring）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">锉（Filing）</td>             <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">圆磨（Round grinding）</td>                <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9670;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9670;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9672;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9672;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9671;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9671;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9671;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9671;</td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">镗孔（Boring）</td>                 <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">钻孔（Drilling）</td>              <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">扩孔（Reaming）</td>              <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">拉刀研磨（Broach grinding）</td>               <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">剃齿（Shaving）</td>              <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">磨削（Grinding）</td>              <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9670;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9670;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9672;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9672;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9671;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9671;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9671;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">珩磨（Hone finishing）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">超精研磨（Super finishing）</td>              <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">抛光（Buffing）</td>              <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">纸张研磨（Paper finishing）</td>              <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">抛光研磨（Lapping）</td>              <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>         <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">液体珩磨（Liquid honing）</td>               <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>        <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">打磨抛光（Burnishing）</td>                <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>        <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">表面轧制（Surface rolling）</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>        <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">放电雕刻（Electric discharge carving）</td>             <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>        <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">线切割（Wire cut electric spark）</td>              <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>        <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">化学抛光（Chemical polishing）</td>             <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>        <tr>                             <td style="white-space:nowrap;border: 1px solid black;border-collapse: collapse;">电解磨损（Electrolytic abrasion）</td>             <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9679;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;">&#9675;</td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>            <td style="border: 1px solid black;border-collapse: collapse;"></td>        </tr>    </tbody></table><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>文中内容为个人总结，本人虽从事工业软件行业四年，机械加工方面的知识却不敢自称精通。目前正在总结相关知识，文章粗陋必有不足之处，也望各位不吝赐教，多多指正。若读者有别的见解与认识也欢迎关注我的个人微信公众号，一起讨论学习。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      加工质量的表面粗糙度的定义 the definition of surface roughness
    
    </summary>
    
    
      <category term="机械加工 相关 - 知识总结" scheme="https://zicowarn.github.io/categories/%E6%9C%BA%E6%A2%B0%E5%8A%A0%E5%B7%A5-%E7%9B%B8%E5%85%B3-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="加工工艺" scheme="https://zicowarn.github.io/tags/%E5%8A%A0%E5%B7%A5%E5%B7%A5%E8%89%BA/"/>
    
      <category term="表面粗糙度" scheme="https://zicowarn.github.io/tags/%E8%A1%A8%E9%9D%A2%E7%B2%97%E7%B3%99%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>AWS 使用CloudFront创建CDN网络</title>
    <link href="https://zicowarn.github.io/2020/11/07/aws-cloudfront-01-create-cdn-network/"/>
    <id>https://zicowarn.github.io/2020/11/07/aws-cloudfront-01-create-cdn-network/</id>
    <published>2020-11-07T01:39:50.000Z</published>
    <updated>2022-06-06T03:08:30.267Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号: <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a> </p><h3 id="CDN-内容分发网络"><a href="#CDN-内容分发网络" class="headerlink" title="CDN 内容分发网络"></a>CDN 内容分发网络</h3><p>CDN 全程:Content Delivery Network或Content Ddistribute Network，即内容分发网络。基本思想是：尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。</p><p><img src="/2020/11/07/aws-cloudfront-01-create-cdn-network/%E5%8E%9F%E7%90%86.gif" alt="cdn原理图-西部数码知识库"></p><p>基本目的为解决因分布、带宽、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度和成功率。</p><p>控制时延无疑是现代信息科技的重要指标，CDN的意图就是尽可能的减少资源在转发、传输、链路抖动等情况下顺利保障信息的连贯性。</p><h3 id="Amazon-CloudFront-简介"><a href="#Amazon-CloudFront-简介" class="headerlink" title="Amazon CloudFront 简介"></a>Amazon CloudFront 简介</h3><p>Amazon CloudFront 是一种全球内容分发网络服务，可以安全地以低延迟和高传输速度向浏览者分发数据、视频、应用程序和 API。CloudFront 与 AWS  与多种 AWS 产品集成，如用于 DDoS 缓解的 AWS Shield、应用程序防火墙 AWS WAF、 Amazon S3、 Elastic Load Balancing、 Amazon EC2 以及 Amazon Route 53，以及可在 AWS 全球基础设施运行用户代码的 Lambda@Edge。</p><p>截止目前（2020年11月），为了以更低的延迟向最终用户提供内容，Amazon CloudFront 使用了一个包含超过 220 个节点（超过 210 个边缘站点和 12 个区域性边缘缓存）的全球网络，该网络覆盖 44 个国家/地区的 87 个城市。</p><h3 id="Amazon-CloudFront-基本运行机制"><a href="#Amazon-CloudFront-基本运行机制" class="headerlink" title="Amazon CloudFront 基本运行机制"></a>Amazon CloudFront 基本运行机制</h3><p>举例说明，当客户端发起对 <a href="http://www.customer.com/">www.customer.com</a> 的访问时，首先需要 DNS系统解析出该域名对应的主机 IP，通过本地 ISP DNS 递归查询到 <a href="http://customer.com/">customer.com</a> 的 DNS 域名服务器并了解到该域名是指向了 <a href="http://xxx.cloudfront.net/">xxx.cloudfront.net</a>，进一步解析 <a href="http://xxx.cloudfront.net/">xxx.cloudfront.net</a>，CloudFront 的 DNS 域名服务器会根据请求来源的 IP 等信息，返回适合当前该客户端访问的边缘节点的主机 IP 如1.1.1.1，最终该客户端向1.1.1.1发出请求。如果该边缘节点已经缓存了该客户端请求的内容（图片、视频等静态文件），则直接返回给客户端，如果未缓存，则首先回源取回该内容，并存储在边缘节点，以便下次客户端对该内容请求时可以直接返回该内容。</p><p><img src="/2020/11/07/aws-cloudfront-01-create-cdn-network/cloudf(2).png" alt="img"></p><p>更好的 CDN 性能表现带来更多的访问流量，以及更好的用户体验，下面我们将介绍如何配置以及优化建议。</p><h3 id="Amazon-CloudFront-创建CDN网络"><a href="#Amazon-CloudFront-创建CDN网络" class="headerlink" title="Amazon CloudFront 创建CDN网络"></a>Amazon CloudFront 创建CDN网络</h3><h4 id="1-创建分配"><a href="#1-创建分配" class="headerlink" title="1. 创建分配"></a>1. 创建分配</h4><p>登陆aws，选择CloudFront服务，即可打开**[Amazon CloudFront – 入门]<strong>, 然后点击<code>创建分配</code>按钮。目前CloudFront支持的内容分发方式为Web和RTMP，但根据最新的公告信息（2020年10月），</strong>CloudFront 在 2020 年 12 月 31 日停止支持 RTMP 分配。**本文示例中，选用Web分发方式。</p><h4 id="2-创建分配-源设置"><a href="#2-创建分配-源设置" class="headerlink" title="2. 创建分配-源设置"></a>2. 创建分配-源设置</h4><p>配置页面中，需要配置的第一部分内容为源设置。所需设置内容如下，需要注意的是，根据分发源的类型不同，该部分的所需设置项也不同，本文中选用的Amazon S3作为分发源，所需配置内容为下图左半部分。</p><ul><li>源域名 （Origin Domain Name），仅支持域名方式。下拉列表中可以看到帐号里已经创建过的 ELB，S3，Elemental Media Service。如果是自定义站点，需先给该站点配置域名，不能填写 IP。</li><li>源路径（Origin Path），为可选项，如果源站内容有多层目录且希望回源的时候路径上不体现这些目录，可以在此设置要隐藏的目录层级。如果您希望 CloudFront 从 Amazon S3 存储桶或自定义源的目录中请求内容，请在此处输入目录路径名称(以 / 开头)。在将请求转发到源时，CloudFront 会将目录名追加到“源域名”的值，例如 myawsbucket/production。请勿在目录名称末尾包含 /。</li><li>启用源护盾（Origin Protocol Policy），  即CloudFront 回源协议，可以是 HTTP 或 HTTPS，或者与client 发出请求时一样的协议。需要注意在这儿设置的是 CloudFront 回源站时用的协议，而不是 client 到达 CloudFront PoP 点的协议。如果选用了 HTTPS，一定要注意源站配置对应回源域名（Origin Domain Name）的 SSL 证书。</li><li>源ID（Origin ID），为源的描述标识。此值允许您区分同一分配中的多个源。每个源的描述在分配中必须是唯一的。</li><li>限制存储桶访问（Restrict Bucket Access），如果希望要求用户始终使用 CloudFront URL 而非 Amazon S3 URL 访问您的 Amazon S3 内容，请单击“是”。当您使用签名的 URL 或签名的 Cookies 来限制对您的内容的访问时，这会很有用。请参阅“帮助”中的“通过 CloudFront 提供私有内容”。</li><li>源连接尝试次数（Origin Connection Attempts），顾名思义，即CloudFront 尝试连接到源的次数。有效值为 1 到 3。默认值为 3 次尝试。这在分发源为非aws存储产品时较为重要。</li><li>源连接超时（Origin Connection Timeout），尝试建立与源的连接时，CloudFront 等待的时间(单位为秒)。有效值为 1 到 10 秒。默认值为 10 秒。</li><li>源协议策略（Origin Protocol Policy），  CloudFront 至源的访问协议，可以是 HTTP 或 HTTPS，或者与client 发出请求时一样的协议。注意这儿是 CloudFront 回源站时用的协议，而不是 client 到达 CloudFront PoP 点的协议。如果选用了 HTTPS，一定要注意源站配置对应回源域名（Origin Domain Name）的 SSL 证书。</li><li>最低源SSL协议（Minimum Origin SSL Protocol），选择适用于 CloudFront 的最低 SSL 协议，以在建立到源的 HTTPS 连接时使用。我们建议您选择服务器支持的最新协议。</li><li>源自定义标头（Origin Custom Headers）， 可选项。自定义回源 Header，即回源的时候添加的 Header，可以是一些自定义的 Header，通常用于由源站对该 Header 进行检测，如果有该 Header 则提供服务，没有则返回错误码，可用于内容访问的安全加强。</li></ul><p><img src="/2020/11/07/aws-cloudfront-01-create-cdn-network/image-20201107182108663.png" alt="image-20201107182108663"></p><h4 id="2-创建分配-默认缓存行为设置"><a href="#2-创建分配-默认缓存行为设置" class="headerlink" title="2. 创建分配-默认缓存行为设置"></a>2. 创建分配-默认缓存行为设置</h4><p>缓存行为让您为您网站上文件的特定 URL 路径模式配置各种 CloudFront 功能。例如，一个缓存行为可能适用于用作 CloudFront 源服务器的 Web 服务器上的 <code>images</code> 目录中的所有 <code>.jpg</code> 文件。您可为每个缓存行为配置的功能包括：</p><ul><li><p>路径模式（Path Pattern），默认缓存行为仅允许 * 的路径模式(将所有请求转发到“源”指定的源)。要更改其他请求的行为或路由(例如 *.jpg)，请在创建分配后添加更多缓存行为。也就是说如果要细化配置，需要在创建完成之后才能过进行。</p></li><li><p>查看器协议策略（Viewer Protocol Policy），即选择您希望查看器，即客户端用来访问 CloudFront 边缘站点中的内容时采用协议策略。</p></li><li><p>允许的HTTP方法（Allowed HTTP Methods），指定您希望 CloudFront 处理并转发从客户端到源的 HTTP 方法。需要注意的是，如果将 Amazon S3 存储桶用作分配的源并使用 CloudFront 源访问身份，则在某些 Amazon S3 区域中不支持 <code>POST</code> 请求，并且这些区域中的 <code>PUT</code> 请求需要使用额外的标头。当GET，HEAD或POST且content-type的值仅限于下列三者之一</p><ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul><p>除了上面三种情况外都会触发预检，所以发送一个content-type为application/json的post请求会触发CORS预检，而text/plain不会触发。所以可以通过修改content-type的值为text/plain规避CORS的问题。所以在上述三种情况之外，就需要允许OPTION方法了。</p></li><li><p>字段级加密配置（Field-level Encryption Config），如果您要对特定数据字段强制实施字段级加密，则在下拉列表中选择一个字段级加密配置。在使用POST方法时，会被用到。CloudFront 字段级加密使用非对称加密，也称为公有密钥加密。您需要向 CloudFront 提供一个公有密钥，之后系统会自动加密您指定的所有敏感数据。不能使用您向 CloudFront 提供的密钥解密经过加密的值；只有您的私有密钥才能执行解密。</p></li><li><p>缓存的HTTP方法（Cached HTTP Methods），指定您是否希望 CloudFront 在查看器提交 <code>OPTIONS</code> 请求时缓存来自源的响应。CloudFront 始终缓存 <code>GET</code> 和 <code>HEAD</code> 请求的响应。当开始CORS时，个人建议不应该缓存OPTIONS方法。因为如果缓存该方法，如果原访问限制规则发生变化时，检查器不会在第一时间发现该变化。</p></li><li><p>缓存和源请求设置（Cache and origin request settings），指定您是否要 CloudFront 基于指定标头的值缓存对象：</p><ul><li><strong>无（改进缓存）</strong> – CloudFront 不根据标头值缓存您的对象。</li><li><strong>白名单</strong> – CloudFront 仅根据指定标头的值缓存您的对象。使用<strong>白名单标头</strong>选择您希望 CloudFront 进行缓存所基于的标头。</li><li><strong>所有</strong> – CloudFront 不缓存与该缓存行为关联的对象。相反，CloudFront 将每个请求发送到源。(不建议对 Amazon S3 源使用。)</li></ul><p>无论您选择哪个选项，CloudFront 都会将特定标头转发到源并根据您转发的标头执行特定操作。</p></li><li><p>缓存策略（Cache Policy），CloudFront 提供了一组托管缓存策略，您可以将这些策略附加到分配的任意缓存行为。有了托管缓存策略，您无需编写或维护自己的缓存策略。托管策略使用已针对特定使用案例优化的设置。要使用托管缓存策略，请将它附加到分配中的缓存行为。此过程与创建缓存策略时的过程相同，只不过您只需附加一个托管缓存策略，而不是创建新的缓存策略。您可以按名称（使用控制台）或 ID（使用 AWS CLI 或开发工具包）附加策略。以下部分列出了名称和 ID。以下列表描述了托管缓存策略，详情<a href="https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html">参看</a>。</p><ul><li><strong>Managed-CachingOptimized</strong>，此策略旨在通过最大程度地减少 CloudFront 在缓存键中包含的值来优化缓存效率。CloudFront 不在缓存键中包含任何查询字符串或 Cookie，并且仅包含标准化的 <code>Accept-Encoding</code> 标头。这使 CloudFront 能够在源返回对象或在启用 CloudFront 边缘压缩时以 Gzip 和 Brotli 压缩格式分别缓存对象。</li><li><strong>Managed-CachingOptimizedForUncompressedObjects</strong>，此策略旨在通过最大程度地减少缓存键中包含的值来提高缓存效率。不包括查询字符串、标头或 Cookie。此策略与前一个策略相同，但它禁用了缓存压缩对象设置。</li><li><strong>Managed-CachingDisabled</strong>，此策略禁用缓存。此策略对于动态内容和不可缓存的请求很有用。</li><li><strong>Managed-Elemental-MediaPackage</strong>，此策略旨在用于作为 AWS Elemental MediaPackage 终端节点的源。</li></ul></li><li><p>源请求策略（Origin Request Policy），CloudFront 提供了一组托管源请求策略，您可以将这些策略附加到分配的任意缓存行为。有了托管源请求策略，您无需编写或维护自己的源请求策略。托管策略使用已针对特定使用案例优化的设置。要使用托管源请求策略，请将它附加到分配中的缓存行为。此过程与创建源请求策略时的过程相同，只不过您只需附加一个托管源请求策略，而不是创建新的源请求策略。您可以按名称（使用控制台）或 ID（使用 AWS CLI 或开发工具包）附加策略。以下部分列出了名称和 ID。详情<a href="https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html">参考</a></p><ul><li><strong>Managed-UserAgentRefererHeaders</strong>，此策略仅包含 <code>User-Agent</code> 和 <code>Referer</code> 标头。它不包含任何查询字符串或 Cookie。</li><li><strong>Managed-CORS-CustomOrigin</strong>，此策略包含在源为自定义源时启用跨源资源共享 (CORS) 请求的标头。</li><li><strong>Managed-CORS-S3Origin</strong>，此策略包含在源为 Amazon S3 存储桶时启用跨源资源共享 (CORS) 请求的标头。选择该策略即会在原请求Origin Request Content中的白名单中添加如下参数。白名单中的这些项目很多教程中都是需要依次手动添加的，aws设置此策略简便了用户操作。<ul><li>origin</li><li>access-control-request-headers</li><li>access-control-request-method</li></ul></li><li><strong>Managed-AllViewer</strong>，此策略包含查看器请求中的所有值（查询字符串、标头和 Cookie）。</li><li><strong>Managed-Elemental-MediaTailor-PersonalizedManifests</strong>，此策略旨在用于作为 AWS Elemental MediaTailor 终端节点的源。</li></ul></li><li><p>平滑流（Smooth Streamig），该配置项仅当源服务器使用 Microsoft IIS时会有作用。启用此选项可使用 Smooth Streaming 来流式处理实时事件。如果您在此处启用 Smooth Streaming，则 CloudFront 无法将 Microsoft IIS 服务器作为源。</p></li><li><p>限制查看器访问（使用签名 URL 或签名 Cookie），如果您希望与该缓存行为的 <code>PathPattern</code> 匹配的对象请求使用公共 URL，请选择 <strong>No</strong>。如果您希望与该缓存行为的 <code>PathPattern</code> 匹配的对象请求使用签名 URL，请选择 <strong>Yes</strong>。然后指定您希望用于创建签名 URL 的 AWS 账户；这些账户被称为可信签署人。</p></li><li><p>自动压缩对象，如果您希望 CloudFront 在查看器支持压缩内容时自动压缩某些类型的文件，请选择<strong>是</strong>。当 CloudFront 压缩内容时，由于文件更小，因此下载速度更快，并会更快地为用户呈现网页。</p></li></ul><p><img src="/2020/11/07/aws-cloudfront-01-create-cdn-network/image-20201107184032233.png" alt="image-20201107184032233"></p><h4 id="3-创建分配-分配设置"><a href="#3-创建分配-分配设置" class="headerlink" title="3. 创建分配-分配设置"></a>3. 创建分配-分配设置</h4><p>该部分主要为了设置分配的价格级别和CloudFront使用备用域名时所需要完成的配置选项。本文简单介绍部分配置。有关备用域名时相关设置会在另一篇文章中介绍。</p><ul><li>AWS WAF Web ACL， 如果要使用 AWS WAF 根据您指定的条件来允许或阻止请求，请选择要与该分配关联的 Web ACL。AWS WAF 是一种 Web 应用程序防火墙，可让您监视转发到 CloudFront 的 HTTP 和 HTTPS 请求，并控制对您的内容的访问。根据指定的条件 (如请求源自的 IP 地址或查询字符串的值)，CloudFront 会使用所请求的内容或使用 HTTP 状态代码 403 (Forbidden) 来响应请求。还可以将 CloudFront 配置为在请求被阻止时返回自定义错误页面。</li><li>备用域名 (CNAME)，可选。指定要用于对象 URL 的一个或多个域名，而不是您在创建分配时 CloudFront 所指定的域名。您必须拥有该域名，或有权使用它，您可以通过添加 SSL/TLS 证书来验证这一点。</li><li>支持的 HTTP 版本，选择您希望分配在查看器与 CloudFront 通信时支持的 HTTP 版本。要使查看器和 CloudFront 使用 HTTP/2，查看器必须支持 TLS 1.2 或更高版本，并且必须支持服务器名称标识 (SNI)。一般情况下，将 CloudFront 配置为使用 HTTP/2 与查看器进行通信可降低延迟。您可以针对 HTTP/2 进行优化以提高性能。有关更多信息，请在 Internet 上搜索“http/2 optimization”。</li><li>默认根对象，可选。当浏览者请求分配的根 URL (<code>http://www.example.com/</code>) 而不是分配中的对象 (<code>http://www.example.com/product-description.html</code>) 时，您希望 CloudFront 从源（例如，<code>index.html</code>）中请求的对象。指定一个默认根对象，以避免公开分配的内容。</li></ul><p><img src="/2020/11/07/aws-cloudfront-01-create-cdn-network/image-20201109015314326.png" alt="image-20201109015314326"></p><p>选用默认配置项即可完成CloudFront的基本配置，有关，如何使用备用域名和开启CORS的内容会在其他文章中介绍。文章部分选项在自己的项目中有用到，会被详细介绍。还有部分选项没有使用到，就使用官方文档中的描述。总的来说使用aws的CloudFront完成CDN网络的搭建比自己单独建设相关网络要简便的多。由于目前还在免费使用周期，也就没有费用上的对比。aws 相关服务也是刚刚开始接触，文中定有不足之处，也希望经验丰富的朋友多多指教，感兴趣的朋友可以关注我的个人公众号一起来讨论学习。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      如何使用aws CloudFront 与 aws S3 bucket的组合，创建自己的CDN网络
    
    </summary>
    
    
      <category term="AWS 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/AWS-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="AWS" scheme="https://zicowarn.github.io/tags/AWS/"/>
    
      <category term="CloudFront" scheme="https://zicowarn.github.io/tags/CloudFront/"/>
    
  </entry>
  
  <entry>
    <title>Angular 如何使用结构型指令*ngFor历遍json对象</title>
    <link href="https://zicowarn.github.io/2020/10/13/angular-01-use-ngfor-a-json-object/"/>
    <id>https://zicowarn.github.io/2020/10/13/angular-01-use-ngfor-a-json-object/</id>
    <published>2020-10-13T01:39:50.000Z</published>
    <updated>2022-06-06T03:07:56.745Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号: <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a> </p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>NgFor</code> 会需要一个循环变量和一个列表。通过Pipe, PipeTransform来完成。也就是说ngfor主要是历遍列表的。一般情况下，遇到此类问题，首先想到的就是获取所有json对象中的键名，并定义一个类的公共属性，并将列表传入该属性，就可以在前端html代码中使用ngFor历遍键名并根据键值访问json对象，从而完成json对象的历遍。那有没有更加简单与直接的方法呢？本文就讨论一下我在项目中遇到类似的问题的解决方法。</p><h3 id="方法一，管道Pipe"><a href="#方法一，管道Pipe" class="headerlink" title="方法一，管道Pipe"></a>方法一，管道Pipe</h3><p>管道的方法也是Angular官方比较推荐的，也是遇到类似问题应该想到并能够使用解决问题的方法。管道可以理解为一些简单的函数，其可以在<a href="https://angular.cn/guide/glossary#template-expression">模板表达式</a>中用来接受输入值并返回一个转换后的值。管道的导入和实现代码如下。管道的类使用<code>@Pipe</code>装饰器。在自定义管道类中实现 <a href="https://angular.cn/api/core/PipeTransform"><code>PipeTransform</code></a> 接口来执行转换。Angular 调用 <code>transform</code> 方法，该方法使用绑定的值作为第一个参数，即下方代码中的value，把其它任何参数（如下方代码中的args）都以列表的形式作为第二个参数，并返回转换后的值。通过管道中的数据绑定来检测变更，你可以通过带有管道的<a href="https://angular.cn/guide/glossary#data-binding">数据绑定</a>来显示值并响应用户操作。如果是原始类型的输入值，比如 <code>String</code> 或 <code>Number</code> ，或者是对象引用型的输入值，比如 <code>Date</code> 或 <code>Array</code> ，那么每当 Angular 检测到输入值或引用有变化时，就会执行该输入管道。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;keys&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">KeysPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  transform(value, <span class="attr">args</span>:<span class="built_in">string</span>[]) : <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> keys = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">      keys.push(&#123;<span class="attr">key</span>: key, <span class="attr">value</span>: value[key]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keys;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端HTML模版，使用管道的示例代码如下，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngFor</span>=<span class="string">&quot;#entry of content | keys&quot;</span>&gt;</span>           </span><br><span class="line">  Key: &#123;&#123;entry.key&#125;&#125;, value: &#123;&#123;entry.value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由名为<code>keys</code>的管道转换得来的值，每个元素entry，都包含key和value。使用管道的还有另一个好处，在使用管道的时候除了穿入需要转换的值以外还可以穿入其他的参数，书写方式如下。下方模版中<code>param</code>即为参数，在上面管道定义的代码中可以通过args[0]获取该参数。进而在转换json对象时，可以根据穿入的参数进行诸如“修改”，“过滤”，“添加”与“删除”等操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngFor</span>=<span class="string">&quot;#entry of content | keys:&#x27;param&#x27;&quot;</span>&gt;</span>           </span><br><span class="line">  Key: &#123;&#123;entry.key&#125;&#125;, value: &#123;&#123;entry.value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Angular中，管道Pipe分为 pure pipe (纯管道) 和 impure pipe (非纯管道)。纯管道和非纯管道是相对于管道所传的参数（如上例的 param）而言的。如果管道是纯管道，则管道的触发只会针对基本类型的参数的变化或者引用类型引用的变化（ a primitive input value (<code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>Symbol</code>) or a changed object reference (<code>Date</code>, <code>Array</code>, <code>Function</code>, <code>Object</code>)）；然而， 对于非纯管道，不管是基本类型参数的改变还是引用类型内部数据变化（而非引用变化）都可以触发管道。管道时纯管道还是非纯管道的设置时通过把 <code>pure</code> 标志设置来实现的。当为 <code>false</code>时就可以来把管道设置成非纯。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pipe</span>(&#123;</span><br><span class="line">  name: <span class="string">&#x27;keys&#x27;</span>,</span><br><span class="line">  pure: <span class="literal">true</span> <span class="comment">// default</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>本文示例使用的默认值，即纯管道。</p><h3 id="方法二，使用Object-keys方法"><a href="#方法二，使用Object-keys方法" class="headerlink" title="方法二，使用Object.keys方法"></a>方法二，使用Object.keys方法</h3><p>JSON 作为存储和传输数据的一种格式。本身是没有类似于Python中Dictionary数据类型的诸如keys()和values()的内置方法的。ES5中内置了一个名为Object.keys的方法，用于返回一个对象的属性名称数组，其使用方法如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  a: <span class="string">&#x27;somestring&#x27;</span>,</span><br><span class="line">  b: <span class="number">42</span>,</span><br><span class="line">  c: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(object1));</span><br></pre></td></tr></table></figure><p>虽然有了获取json对象属性（键）名称数组的方法。但是在Angular的HTML模版中是不能直接使用该方法是非法的。既然如此就可以换个思路，由于在模版中，使用组件的公共属性是合法的，那么就可以先定义一个组件的公共属性，并将方法Object.keys以别名的方法赋值至该公共属性。具体代码实现如下。代码中<code>objectKeys = Object.keys;</code>就是为了完成上述操作的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ElementRef, OnInit &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">&#x27;app-demo&#x27;</span>,</span><br><span class="line">  templateUrl: <span class="string">&#x27;./demo.component.html&#x27;</span>,</span><br><span class="line">  styleUrls: [<span class="string">&#x27;./demo.component.scss&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> objectKeys = <span class="built_in">Object</span>.keys;</span><br><span class="line">  <span class="keyword">public</span> datas = &#123;</span><br><span class="line">    <span class="string">&#x27;Block1&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;data1&#x27;</span> : <span class="string">&quot;Block 1 data 1&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;data1-pop&#x27;</span>: <span class="number">.035</span>,</span><br><span class="line">      <span class="string">&#x27;data2&#x27;</span> : <span class="string">&quot;Block 1 data 1&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;data2-pop&#x27;</span>: <span class="number">.2</span>,</span><br><span class="line">      <span class="string">&#x27;data3&#x27;</span> : <span class="string">&quot;Block 1 data 1&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;data3-pop&#x27;</span>: <span class="number">.35</span>,</span><br><span class="line">      <span class="string">&#x27;data4&#x27;</span> : <span class="string">&quot;Block 1 data 1&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;data4-pop&#x27;</span>: <span class="number">.5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;Block2&#x27;</span>: &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端模版的书写方式如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let itemkey of objectKeys(datas[entry])&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;!itemkey.includes(&#x27;pop&#x27;)&quot;</span> <span class="attr">fxLayout</span>=<span class="string">&quot;column&quot;</span> <span class="attr">class</span>=<span class="string">&quot;signleitem&quot;</span> <span class="attr">fxFlex</span>=<span class="string">50</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;itemkey&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">fxLayout</span>=<span class="string">&quot;row&quot;</span> <span class="attr">fxLayoutAlign</span>=<span class="string">&quot;start none&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item-content&quot;</span> <span class="attr">fxFill</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">datas[entry][itemkey]</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; (datas[entry][itemkey+&#x27;-pop&#x27;] * 100) | number:&#x27;1.0-0&#x27;&#125;&#125; %<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与方法一不同的是，此时历遍的数组中的元素仅为json对象的键名。此种方法也不能在历遍完成对键值的过滤。但在一些应用场景下，该方法要比方法一更加直接和高效。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>两种方法都能解决问题，在使用中可以根据实际需要选的最合适的自己项目的方法。文中内容就是对这个两种方法进行简单对比。Angular相关内容为自己新学知识，文章有不足之处也实属正常。见解不同，诚切赐教，关注微信公众号，一起讨论学习。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      Angular 如何使用结构型指令*ngFor历遍json对象 in Angular use ngFor
    
    </summary>
    
    
      <category term="Angular 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/Angular-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Angular" scheme="https://zicowarn.github.io/tags/Angular/"/>
    
      <category term="*ngFor" scheme="https://zicowarn.github.io/tags/ngFor/"/>
    
      <category term="json" scheme="https://zicowarn.github.io/tags/json/"/>
    
      <category term="历遍" scheme="https://zicowarn.github.io/tags/%E5%8E%86%E9%81%8D/"/>
    
  </entry>
  
  <entry>
    <title>AWS 如何使用IAM创建一个最小访问权限的用户并使用aws-cli来部署lambda函数程序包</title>
    <link href="https://zicowarn.github.io/2020/09/24/aws-common-02-awscli-configuration/"/>
    <id>https://zicowarn.github.io/2020/09/24/aws-common-02-awscli-configuration/</id>
    <published>2020-09-24T12:39:50.000Z</published>
    <updated>2021-08-19T07:17:01.519Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号: <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a> </p><h3 id="任务背景"><a href="#任务背景" class="headerlink" title="任务背景"></a>任务背景</h3><p>AWS的用户和用户权限可以通过AWS IAM来创建和实现，本文主要尝试的是在IAM中，在为aws cli创建编程访问类型用户时，如果仅用于部署aws lambda函数，那么用户的访问权限应该如何限制。如何在保证安全的下，完成一个最小权限的用户用于部署aws lamdba函数。之所以需要设计一个最小访问权限的用户，是为了以后使用github中的actions实现函数代码的自动持续部署。</p><h3 id="准备用户"><a href="#准备用户" class="headerlink" title="准备用户"></a>准备用户</h3><p>AWS IAM 提供两种用户访问类型，<strong>编程访问类型</strong>与<strong>AWS 管理控制台访问</strong>，基本的差别如下，在本文中需要的是编程访问类型，以此类型，我们先创建一个用户，用户名暂定test，在创建用户时，我们先不为其设置访问权限。</p><ul><li>编程访问：为 AWS API、CLI、SDK 和其他开发工具启用 <strong>访问密钥 ID</strong> 和 <strong>私有访问密钥</strong> 。</li><li>AWS 管理控制台访问： 启用密码 、使得用户可以登录到 AWS 管理控制台。</li></ul><h3 id="访问策略"><a href="#访问策略" class="headerlink" title="访问策略"></a>访问策略</h3><p>AWS IAM提供两种访问策略，托管策略（AWS托管和用户托管）和内联策略。<em>AWS托管策略</em> 是由 AWS 创建和管理的独立策略。这里的<em>独立策略</em> 意味着策略有自己的 Amazon 资源名称 (ARN)，其中包含策略名称。自己不能更改 AWS 托管策略中定义的权限。内联策略 是用户自己创建与管理的独立策略，内联策略应该算得上是<em>用户托管策略</em>的一种特殊使用方式，内联策略是嵌入在 IAM 身份（用户、组或角色）中的策略。也就是说，策略是身份的固有组成部分。内联策略与应用它的身份之间维持严格的一对一关系，如果要确保策略中的权限不会无意中分配给预期身份之外的身份，则可使用内联策略。请参看下方三种策略的对比示意图，</p><p><img src="/2020/09/24/aws-common-02-awscli-configuration/aws-common-02-01.png"></p><p>我们先看一下AWS托管策略，试着分析一下策略运行的服务是否符合我们对最小用户访问策略的预期。</p><h5 id="AWSLambdaFullAccess"><a href="#AWSLambdaFullAccess" class="headerlink" title="AWSLambdaFullAccess"></a>AWSLambdaFullAccess</h5><p>为AWS托管策略，该托管策略允许访问18个服务（AWS的服务共计239）。其中包括了，其中针对lambda服务的策略有50个，提供了lambda相关的所有权限，该策略能够最终能够实现使用github的actions来自动持续部署代码的任务需求，但是并不是所要求的最小访问策略。</p><h5 id="AWSCodeDeployRoleForLambda"><a href="#AWSCodeDeployRoleForLambda" class="headerlink" title="AWSCodeDeployRoleForLambda"></a>AWSCodeDeployRoleForLambda</h5><p>为AWS托管策略，该托管策略允许访问4个服务（AWS的服务共计239）。</p><ul><li>CloudWatch 仅读</li><li>Lambda 读写<ul><li>GetAlias    仅读</li><li>GetProvisionedConcurrencyConfig   仅读</li><li>UpdateAlias  仅写</li></ul></li><li>S3 仅读</li><li>SNS 仅写</li></ul><h5 id="AWSLambdaExecute"><a href="#AWSLambdaExecute" class="headerlink" title="AWSLambdaExecute"></a>AWSLambdaExecute</h5><p>为AWS托管策略，主要对S3资源的读写和运行日志CloudWatch Logs的读写访问。</p><h5 id="AWSLambdaRole"><a href="#AWSLambdaRole" class="headerlink" title="AWSLambdaRole"></a>AWSLambdaRole</h5><p>为AWS托管策略，赋予的是调用invoke函数的权限</p><h5 id="AWSLambdaReadOnlyAccess"><a href="#AWSLambdaReadOnlyAccess" class="headerlink" title="AWSLambdaReadOnlyAccess"></a>AWSLambdaReadOnlyAccess</h5><p>为AWS托管策略，顾名思义，该策略主要提供的是<strong>仅读</strong>资源访问权限。</p><p>当然涉及lambda函数的权限还有很多，分析相关权限后发现AWS的托管权限，都没有与任务完全匹配的。因为部署lambda函数这个操作，对aws lambda服务这部的权限，至少应该有CreateFunction这个操作的写入权限，和UpdateFunctionCode这个操作的写入权限。另外对于IAM这项服务，也应该至少有ListRoles这个列表读取权限，以这些信息为基础，我们创建一个用户托管策略，该策略名称定为UserCustomDeployLambdaFunctionCode，策略具体内容如下，</p><h5 id="UserCustomDeployLambdaFunctionCode"><a href="#UserCustomDeployLambdaFunctionCode" class="headerlink" title="UserCustomDeployLambdaFunctionCode"></a>UserCustomDeployLambdaFunctionCode</h5><ul><li>IAM 列表<ul><li>ListRoles 所有资源</li></ul></li><li>Lambda 仅写<ul><li>CreateFunction 所有资源</li><li>UpdateFunctionCode 所有资源</li></ul></li></ul><p>该用户策略权限的JSON文件如下，可以直接使用JSON文件来创建该用户托管策略。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;2020-10-17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span>: <span class="string">&quot;VisualEditor0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;lambda:CreateFunction&quot;</span>,</span><br><span class="line">                <span class="string">&quot;lambda:UpdateFunctionCode&quot;</span>,</span><br><span class="line">                <span class="string">&quot;iam:ListRoles&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建这个用户托管策略时，我们没有对资源进行限制。在后期，可以限定访问资源，实现基于资源的用户托管策略。</p><p>用户策略限定好之后，就需要给之前创建的test用户添加这个托管策略。添加完策略之后就可以尝试使用aws cli来部署lambda 函数代码了，这也是为了以后使用github actions时需要做的前期准备工作。</p><h3 id="配置AWS-CLI"><a href="#配置AWS-CLI" class="headerlink" title="配置AWS CLI"></a>配置AWS CLI</h3><p>使用aws cli之前需要对其进行配置。AWS 的CLI配置官方教程也有介绍，基本上按照官方教程即可完成配置，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % aws configure</span><br><span class="line">AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE</span><br><span class="line">AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</span><br><span class="line">Default region name [None]: us-west-2</span><br><span class="line">Default output format [None]: json</span><br></pre></td></tr></table></figure><p>完成配置后我们就可以准备部署代码了，这里假设，已经使用aws lambda 网页端创建了一个名为test的lambda函数，函数的runtime为Python 3.6。函数的处理程序为lambda_function.lambda_handler，即我们需要创建的py文件为lambda_function.py, 文件内容如下，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>):</span></span><br><span class="line">    <span class="comment"># TODO implement</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;statusCode&#x27;</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="string">&#x27;body&#x27;</span>: json.dumps(<span class="string">&#x27;Hello from Lambda!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>python文件创建完之后就需要对其进行打包，生成名为test.zip的压缩文档，这个zip压缩文档现在就可以理解为一个程序包。创建程序包相关命令如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">username@mac aws-cli-test % nano lambda_function.py</span><br><span class="line">username@mac aws-cli-test % ls</span><br><span class="line">lambda_function.py</span><br><span class="line">username@mac aws-cli-test % zip test.zip lambda_function.py</span><br><span class="line">  adding: lambda_function.py (deflated 19%)</span><br><span class="line">username@mac aws-cli-test % ls</span><br><span class="line">lambda_function.py test.zip</span><br><span class="line">username@mac aws-cli-test % </span><br></pre></td></tr></table></figure><p>程序包创建结束后，就可以尝试使用aws-cli来部署这个lambda函数的程序包了，相关命令和输出结果如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">username@mac aws-cli-test % aws lambda update-function-code --function-name <span class="built_in">test</span> --zip-file fileb://test.zip    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;FunctionName&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="string">&quot;FunctionArn&quot;</span>: <span class="string">&quot;arn:aws:lambda:ap-northeast-1:XXXXXXXXXX:function:test&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Runtime&quot;</span>: <span class="string">&quot;python3.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Role&quot;</span>: <span class="string">&quot;arn:aws:iam::XXXXXXXXXX:role/service-role/test-role-mu5rmz0t&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Handler&quot;</span>: <span class="string">&quot;lambda_function.lambda_handler&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CodeSize&quot;</span>: 321,</span><br><span class="line">    <span class="string">&quot;Description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Timeout&quot;</span>: 3,</span><br><span class="line">    <span class="string">&quot;MemorySize&quot;</span>: 128,</span><br><span class="line">    <span class="string">&quot;LastModified&quot;</span>: <span class="string">&quot;2020-09-22T06:02:26.878+0000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CodeSha256&quot;</span>: <span class="string">&quot;XXXXXXXXXXCCCCCCCCCCCCCCCCCCC/zBBvIU4+1oAzeo=&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;<span class="variable">$LATEST</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;TracingConfig&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;PassThrough&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;RevisionId&quot;</span>: <span class="string">&quot;87a0f614-401d-420f-a338-78a54bd8ba40&quot;</span>,</span><br><span class="line">    <span class="string">&quot;State&quot;</span>: <span class="string">&quot;Active&quot;</span>,</span><br><span class="line">    <span class="string">&quot;LastUpdateStatus&quot;</span>: <span class="string">&quot;Successful&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的更新结果为”Successful”，说明更新成功，然后可以在aws lambda网页版的页面上看到更新的lambda函数内容，如下图，</p><p><img src="/2020/09/24/aws-common-02-awscli-configuration/aws-common-02-02.png"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>至此，创建一个用户托管策略，来实现一个最小用户访问权限，并使用这样一个用户终端里借助aws-cli实现lambda函数的程序包的部署内容也就结束了。aws lambda也是刚刚开始接触，文中定有不足之处，也希望经验丰富的朋友多多指教，感兴趣的朋友可以关注我的个人公众号一起来讨论学习。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Jim Wang 公众号: &lt;a class=&quot;main-button-link&quot; href=&quot;#wechat&quot; rel=&quot;noopener&quot;&gt;巴博萨船长&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;摘要：如何配置aws-cli？如何使用aws-cli来部署lamdba函数的程序包？配置aws-cli时，用户访问权限的策略应该是什么样的？如何创建一个最小访问权限的用户，在保证安全的同时实现lambda程序包的部署？这样的用户的访问策略是什么样的？&lt;/p&gt;
&lt;p&gt;Abstract: How to configure aws-cli? How to use aws-cli to deploy lamdba function package? When configuring aws-cli, what should be the user access policy? How to create a user with minimal access rights to complete the lambda package deployment task while ensuring security? What is the access strategy for such users?&lt;/p&gt;
    
    </summary>
    
    
      <category term="AWS 相关 - 基本知识" scheme="https://zicowarn.github.io/categories/AWS-%E7%9B%B8%E5%85%B3-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="AWS" scheme="https://zicowarn.github.io/tags/AWS/"/>
    
      <category term="lambda" scheme="https://zicowarn.github.io/tags/lambda/"/>
    
      <category term="aws-cli" scheme="https://zicowarn.github.io/tags/aws-cli/"/>
    
      <category term="IAM" scheme="https://zicowarn.github.io/tags/IAM/"/>
    
  </entry>
  
  <entry>
    <title>Python 杂记之 如何使用pyenv管理python版本管理与如何使用virtualenv创建python虚拟运行环境</title>
    <link href="https://zicowarn.github.io/2020/09/22/0809-python-hwoto-install-pyevn-virtualenv/"/>
    <id>https://zicowarn.github.io/2020/09/22/0809-python-hwoto-install-pyevn-virtualenv/</id>
    <published>2020-09-22T15:11:08.000Z</published>
    <updated>2022-06-06T03:07:16.803Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号:  <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Python的版本管理非常有必要，这种想法在第一次接触到python3的时候就开始有的想法。但是工作中所遇项目主要是在windows系统下，开发环境并不复杂，又使用Eclipse的项目设定结合windows的环境变量。所以也一直没有去尝试着安装配置pyevn，但是自己工作之余学些aws lambda函数时，就遇到了需要隔离python版本与创建虚拟运行环境的使用场景，最终还是逃不过这部分内容，因此也就有了这篇网文。</p><h3 id="什么是pyenv和为什么要版本隔离"><a href="#什么是pyenv和为什么要版本隔离" class="headerlink" title="什么是pyenv和为什么要版本隔离"></a>什么是pyenv和为什么要版本隔离</h3><p>Pyenv主要是用于Python版本隔离，所谓版本隔离，就是同时安装与使用不同版本的Python在一个主机里，且彼此之间没有交叉也不相互影响。在没有Pyenv之前，在windows系统下也可以实现多python版本共存，可以使用环境变量进行隔离。在Linux系统下则可以使用update-alternatives这一系统命令链接符工具来进行版本管理。</p><p>那为什么需要版本管理。假设你有两个Python项目，一个是Python2.x另一个是Python3.x，这是你就可以考虑版本隔离了，或者需要同时测试，管理很多不同版本的Python项目，也可以考虑版本隔离。</p><h3 id="什么是virtualenv和为什么需要虚拟环境"><a href="#什么是virtualenv和为什么需要虚拟环境" class="headerlink" title="什么是virtualenv和为什么需要虚拟环境"></a>什么是virtualenv和为什么需要虚拟环境</h3><p>virtualenv主要是为了创建Python运行的虚拟环境。所谓虚拟环境，就是Python运行时，库依赖性的隔离。比如项目一需要A依赖包，项目二需要B依赖包。传统习惯是，将A包与B包都使用pip install命令进行安装，就可以同时完成项目一与项目二的开发工作，但是这在开发时是没问题的，但在部署时就不一定了，如果部署环境与开发环境不一致，就可能需要花时间去从新安装依赖包，如果部署平台与开发平台也不一致，或者部署环境中的存储限制就需要在开发的时候创建一个虚拟环境，创建一个最小依赖的开发环境。</p><p>常见的一些定义virtualenv和pyvenv（同venv）都是用于创建虚拟运行环境，实现库依赖性的隔离。区别是前者支持Python不同版本，可以为不同python创建虚拟环境，而后者仅支持python3.x，venv仅支持python3.6以后不的版本。另一点区别是，virtualenv是PyPI软件包，pyvenv（同venv）是标准库。</p><h3 id="什么是pipenv和什么是依赖管理"><a href="#什么是pipenv和什么是依赖管理" class="headerlink" title="什么是pipenv和什么是依赖管理"></a>什么是pipenv和什么是依赖管理</h3><p>另一些常见的定义还有pipevn，pipenv可以视为pip命令和virtualenv命令的组合命令。virtualenv创建的虚拟环境仅仅实现了Python库的依赖性隔离。但是一个虚拟环境下随着项目功能的增加，依赖包的变化，一段时间之后这个虚拟环境下第三方库的依赖具体什么样，就很难弄明白了。pipenv就是为了解决这一问题而存在的。这点很像nodejs的依赖包管理工具npm（或cnpm）。使用Pipenv时，Pipenv会自动管理python库依赖。Pipenv会在创建虚拟环境时自动创建Pipfile和Pipfile.lock文件，之后在安装和卸载第三方依赖包的时候，这两个文件都会得到更新被维护。Pipfile记录项目依赖包列表，Pipfile.lock记录固定版本的详细依赖包列表。</p><h3 id="其他相关定义"><a href="#其他相关定义" class="headerlink" title="其他相关定义"></a>其他相关定义</h3><p>virtualenvwrapper是对virtualenv命令的扩展。pyenv-virtualenv是pyenv的插件，主要用于确保pyenv和virtualenv能够同时使用。如果使用的是python3.3以上的版本，则默认python自带venv，pyenv-virtualenv插件就是可选内容。pyenv-virtualenvwrapper也是pyenv的插件，主要是为了是pyenv中能集成virtualenvwrapper。</p><h3 id="安装pvenv"><a href="#安装pvenv" class="headerlink" title="安装pvenv"></a>安装pvenv</h3><p>本文的安装环境为mac os Catalina 版本为10.5.5。在终端输入一下命令, pyenv目前不支持windows （windows可以使用pyenv-win来代替），只支持mac和linux。官方提供了一个安装脚本，安装起来非常简单，它会自动安装<code>pyenv</code>和<code>pyenv-virtualenv</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure><p>也可使用git命令克隆pyenv源代码至本地，命令如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pyenv/pyenv.git ~/.pyenv</span><br></pre></td></tr></table></figure><p>完成上述步骤就需要修改环境变量了，打开bash配置文件.bash_profile或者.bashrc，在文档末尾添加如下内容，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv virtualenv-init -)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>Mac环境下可以尝试直接使用下列命令来进行安装，需要注意的是，使用brew 安装 pyenv 是不需要进行环境配置的，brew 在安装 pyenv 时已经自动设定了相关内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure><h3 id="配置pyenv"><a href="#配置pyenv" class="headerlink" title="配置pyenv"></a>配置pyenv</h3><p>完成安装知乎，配置部分的内容其实很简单，仅需要在bash配置文件中添加如下内容，完成pyenv的初始化即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="使用pyenv"><a href="#使用pyenv" class="headerlink" title="使用pyenv"></a>使用pyenv</h3><p>pyenv提供了11个可用命令，可以参考<a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md">文档</a>来查看具体内容，在这里简单介绍几个常用命令。</p><h5 id="pyenv-versions"><a href="#pyenv-versions" class="headerlink" title="pyenv versions"></a>pyenv versions</h5><p>用于检查当前系统中已经安装的python版本，命令输出如下内容，带星号为当前系统默认使用的python版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username@mac~ % pyenv versions         </span><br><span class="line">* system (<span class="built_in">set</span> by /Users/username/.pyenv/version)</span><br><span class="line">  2.7.10</span><br><span class="line">  2.7.15</span><br></pre></td></tr></table></figure><h5 id="pyenv-version"><a href="#pyenv-version" class="headerlink" title="pyenv version"></a>pyenv version</h5><p>用于查看当前系统默认使用的python版本，命令输出如下内容，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % pyenv version </span><br><span class="line">system (<span class="built_in">set</span> by /Users/username/.pyenv/version)</span><br></pre></td></tr></table></figure><h5 id="pyevn-install-–list"><a href="#pyevn-install-–list" class="headerlink" title="pyevn install –list"></a>pyevn install –list</h5><p>用于检查，所有可安装的python版本，输出内容如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % pyenv install --list</span><br><span class="line">Available versions:</span><br><span class="line">  2.1.3</span><br><span class="line">  2.2.3</span><br><span class="line">  2.3.7</span><br><span class="line">  2.4.0</span><br><span class="line">  2.4.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出列表里纯数字的表示官方版本，其他的版本注释如下：</p><ul><li>activepython (ActiveState公司) 主要面向企业用户与数据科学家，可以节省大量精力在Python的组装与管理方面</li><li>anaconda (Anaconda公司)主要用例包括数学、统计学、工程、数据分析、机器学习以及其他相关应用</li><li>ironPython 属于一套立足.Net运行时——或者CLR（公共语言运行时）——的Python实现方</li><li>jython 能够将Python 2.x编译为JVM字节码，并在JVM上运行生成的程序，其仅支持Python 2.x</li><li>pypy 属于CPython解释器的替代品，其利用即时（JIT）编译以加速Python程序的执行</li><li>micropython 是Python 3的一个完整软件实现，用C语言编写，被优化于运行在微控制器之上， 如Arduino等</li><li>miniconda 只包含最基本的内容：python与conda，以及相关的必须依赖项，是conda的最小依赖开发环境</li><li>stackless 是python的一个增强版本，是python协程的一个实现。 使用它可以避免创建线程所引起的不必要的开销， 同时也可以实现无锁编程。</li></ul><h5 id="python-install-3-7-0"><a href="#python-install-3-7-0" class="headerlink" title="python install 3.7.0"></a>python install 3.7.0</h5><p>该命令意指安装Python 3.7.0的官方版本版本，该命令输出如下内容，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % pyenv install 3.7.0  </span><br><span class="line">...</span><br><span class="line">python-build: use openssl@1.1 from homebrew</span><br><span class="line">python-build: use readline from homebrew</span><br><span class="line">Installing Python-3.7.0...</span><br><span class="line">python-build: use readline from homebrew</span><br><span class="line">python-build: use zlib from xcode sdk</span><br><span class="line">Installed Python-3.7.0 to /Users/username/.pyenv/versions/3.7.0</span><br></pre></td></tr></table></figure><h5 id="python-uninstall"><a href="#python-uninstall" class="headerlink" title="python uninstall"></a>python uninstall</h5><p>该命令用于卸载特定版本的python</p><h5 id="python-rehash"><a href="#python-rehash" class="headerlink" title="python rehash"></a>python rehash</h5><p>在安装新一个版本的python后可以执行此命令，使其pyenv更新自己要管理的所有python版本的相关信息。</p><h3 id="卸载pyenv"><a href="#卸载pyenv" class="headerlink" title="卸载pyenv"></a>卸载pyenv</h3><p>pyenv的卸载非常简单，删除.pyenv目录与bash配置文件的相关内容即可。</p><h3 id="更新pyenv"><a href="#更新pyenv" class="headerlink" title="更新pyenv"></a>更新pyenv</h3><p>在mac中，可以使用brew upgrade pyenv来完成pyenv的更新，也可以通过从github中克隆新版本的源码到本地安装目录完成相应更新工作。</p><h3 id="安装pyenv-virtualenv"><a href="#安装pyenv-virtualenv" class="headerlink" title="安装pyenv-virtualenv"></a>安装pyenv-virtualenv</h3><p>在完成python版本的隔离之后，就可以尝试实现项目依赖的隔离，这就需要借助pyenv-virtualenv来完成，安装pyenv-virtualenv也有两种方法，在mac中使用brew 安装或者，从github中克隆源码到本地。</p><p>mac中使用brew install pyenv-virtualenv命令则可以完成安装，该命令的输出内容如下，按照输出内容的提示，我们需要在完成安装之后对其进行配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % brew install pyenv-virtualenv</span><br><span class="line">==&gt; Downloading https://github.com/pyenv/pyenv-virtualenv/archive/v1.1.5.tar.gz</span><br><span class="line">==&gt; Downloading from https://codeload.github.com/pyenv/pyenv-virtualenv/tar.gz/v</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; ./install.sh</span><br><span class="line">==&gt; Caveats</span><br><span class="line">To <span class="built_in">enable</span> auto-activation add to your profile:</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">which</span> pyenv-virtualenv-init &gt; /dev/null; <span class="keyword">then</span> <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv virtualenv-init -)</span>&quot;</span>; <span class="keyword">fi</span></span><br><span class="line">==&gt; Summary</span><br><span class="line"> /usr/<span class="built_in">local</span>/Cellar/pyenv-virtualenv/1.1.5: 22 files, 65.7KB, built <span class="keyword">in</span> 2 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从github中克隆源码到本地的命令如下，这里需要注意的是，需要在当前用户的home目录运行该命令，因为源码的本地目录为pyenv的子目录，如有必要也需要手动创建子目录plugins。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pyenv/pyenv-virtualenv.git .pyenv/plugins/pyenv-virtualenv</span><br></pre></td></tr></table></figure><h3 id="配置pyenv-virtualenv"><a href="#配置pyenv-virtualenv" class="headerlink" title="配置pyenv-virtualenv"></a>配置pyenv-virtualenv</h3><p>根据brew install pyenv-virtualenv，完成配置仅需在bash配置文件中加入如下内容即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> pyenv-virtualenv &gt;/dev/null; <span class="keyword">then</span> <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv virtualenv-init -)</span>&quot;</span>;<span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>然后可以使用如下命令，更新bash配置的修改，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><h3 id="使用pyenv-virtualenv"><a href="#使用pyenv-virtualenv" class="headerlink" title="使用pyenv-virtualenv"></a>使用pyenv-virtualenv</h3><p>pyenv-virtualenv的具体使用方法，可以参考<a href="https://github.com/pyenv/pyenv-virtualenv/blob/master/README.md">文档</a>本文简单介绍一下部分命令。</p><h5 id="pyenv-virtualenv-版本号-虚拟环境名"><a href="#pyenv-virtualenv-版本号-虚拟环境名" class="headerlink" title="pyenv virtualenv 版本号 虚拟环境名"></a>pyenv virtualenv 版本号 虚拟环境名</h5><p>比如，由于项目中aws 的lambda函数中使用python 3.6.0 的是最终是需要完成一个python 3.6.0的虚拟运行环境，那么就可以使用如下命令，这里版本号为3.6.0， 虚拟环境名为env360。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % pyenv virtualenv 3.6.0 env360</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> /Users/username/.pyenv/versions/3.6.0/envs/env360/lib/python3.6/site-packages</span><br><span class="line">Requirement already satisfied: pip <span class="keyword">in</span> /Users/username/.pyenv/versions/3.6.0/envs/env360/lib/python3.6/site-packages</span><br></pre></td></tr></table></figure><h5 id="pyenv-virtualenvs"><a href="#pyenv-virtualenvs" class="headerlink" title="pyenv virtualenvs"></a>pyenv virtualenvs</h5><p>用于查看当前所有存在的环境名，命令输出内容如下，每个虚拟环境会出现两次，分别为虚拟环境目录的真实目录和目录链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % pyenv virtualenvs            </span><br><span class="line">  3.6.0/envs/env360 (created from /Users/username/.pyenv/versions/3.6.0)</span><br><span class="line">  3.8.5/envs/env385 (created from /Users/username/.pyenv/versions/3.8.5)</span><br><span class="line">  env360 (created from /Users/username/.pyenv/versions/3.6.0)</span><br><span class="line">  env385 (created from /Users/username/.pyenv/versions/3.8.5)</span><br></pre></td></tr></table></figure><h5 id="pyenv-activate-虚拟环境名"><a href="#pyenv-activate-虚拟环境名" class="headerlink" title="pyenv activate 虚拟环境名"></a>pyenv activate 虚拟环境名</h5><p>用于激活特定名称的虚拟运行环境，命令输出如下内容。激活后有如下提示信息。如提示信息所述，在非虚拟环境下运行export PYENV_VIRTUALENV_DISABLE_PROMPT=1，则可以在以后激活虚拟环境时，关闭该提示信息。虚拟环境激活之后，命令行提示符部分会有(env360)类似字样，说明当前在env360的虚拟运行环境下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % pyenv activate env360</span><br><span class="line">pyenv-virtualenv: prompt changing will be removed from future release. configure `<span class="built_in">export</span> PYENV_VIRTUALENV_DISABLE_PROMPT=1<span class="string">&#x27; to simulate the behavior.</span></span><br><span class="line"><span class="string">(env360) username@mac ~ % </span></span><br></pre></td></tr></table></figure><h5 id="pyenv-virtualenv-delete-虚拟环境名-或-pyenv-uninstall-虚拟环境名"><a href="#pyenv-virtualenv-delete-虚拟环境名-或-pyenv-uninstall-虚拟环境名" class="headerlink" title="pyenv virtualenv-delete 虚拟环境名 或 pyenv uninstall 虚拟环境名"></a>pyenv virtualenv-delete 虚拟环境名 或 pyenv uninstall 虚拟环境名</h5><p>这两个命令都是用于删除特定名称的虚拟运行环境，以命令<code>pyenv virtualenv-delete</code>为例，输出入如下内容。命令运行后会有提示信息用于确认操作，输入yes即可确认操作，完成虚拟运行环境的删除工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % pyenv virtualenv-delete env385          </span><br><span class="line">pyenv-virtualenv: remove /Users/username/.pyenv/versions/3.8.5/envs/env385? yes</span><br><span class="line">username@mac ~ %</span><br></pre></td></tr></table></figure><h3 id="卸载-pyenv-virtualenv"><a href="#卸载-pyenv-virtualenv" class="headerlink" title="卸载 pyenv-virtualenv"></a>卸载 pyenv-virtualenv</h3><p>pyenv-virtualenv的卸载和pyenv的卸载过程类似，删除bash配置文件的相关内容，在pyenv目录中的删除相对应的pyenv-virtualenv子目录即可。</p><h3 id="更新-pyenv-virtualenv"><a href="#更新-pyenv-virtualenv" class="headerlink" title="更新 pyenv-virtualenv"></a>更新 pyenv-virtualenv</h3><p>如图pyenv一样，在mac中，可以使用brew upgrade pyenv-virtualenv来完成pyenv-virtualenv的更新，也可以通过从github中克隆新版本的源码到本地安装目录完成相应更新工作。</p><h3 id="所遇问题与解决方案"><a href="#所遇问题与解决方案" class="headerlink" title="所遇问题与解决方案"></a>所遇问题与解决方案</h3><h4 id="问题：Ubuntu-下使用pyenv安装3-7-0版本时，遇到的安装错误"><a href="#问题：Ubuntu-下使用pyenv安装3-7-0版本时，遇到的安装错误" class="headerlink" title="问题：Ubuntu 下使用pyenv安装3.7.0版本时，遇到的安装错误"></a>问题：Ubuntu 下使用pyenv安装3.7.0版本时，遇到的安装错误</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@R021:~<span class="comment"># pyenv install -v 3.6.12</span></span><br><span class="line">Downloading Python-3.6.12.tar.xz...</span><br><span class="line">-&gt; https://www.python.org/ftp/python/3.6.12/Python-3.6.12.tar.xz</span><br><span class="line">/tmp/python-build.20200916030737.1554 ~</span><br><span class="line">Installing Python-3.6.12...</span><br><span class="line">/tmp/python-build.20200916030737.1554/Python-3.6.12 /tmp/python-build.20200916030737.1554 ~</span><br><span class="line">checking build system <span class="built_in">type</span>... x86_64-pc-linux-gnu</span><br><span class="line">checking host system <span class="built_in">type</span>... x86_64-pc-linux-gnu</span><br><span class="line">checking <span class="keyword">for</span> python3.6... no</span><br><span class="line">checking <span class="keyword">for</span> python3... python3</span><br><span class="line">checking <span class="keyword">for</span> --enable-universalsdk... no</span><br><span class="line">checking <span class="keyword">for</span> --with-universal-archs... no</span><br><span class="line">checking MACHDEP... linux</span><br><span class="line">checking <span class="keyword">for</span> --without-gcc... no</span><br><span class="line">checking <span class="keyword">for</span> --with-icc... no</span><br><span class="line">checking <span class="keyword">for</span> gcc... no</span><br><span class="line">checking <span class="keyword">for</span> cc... no</span><br><span class="line">checking <span class="keyword">for</span> cl.exe... cl.exe</span><br><span class="line"></span><br><span class="line">BUILD FAILED (Ubuntu 16.04 using python-build 1.2.20-6-gd1ae4a1)</span><br><span class="line"></span><br><span class="line">Inspect or clean up the working tree at /tmp/python-build.20200916030737.1554</span><br><span class="line">Results logged to /tmp/python-build.20200916030737.1554.log</span><br></pre></td></tr></table></figure><p>出现上述问题的原因为，部分pyenv所需的内容没有安装，可以尝试使用如下命令来检查和安装pyenv的所需组建，然后再使用pyenv安装所需python版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev</span><br></pre></td></tr></table></figure><h4 id="问题：Mac-下使用pyenv安装3-7-0版本时，遇到的安装错误"><a href="#问题：Mac-下使用pyenv安装3-7-0版本时，遇到的安装错误" class="headerlink" title="问题：Mac 下使用pyenv安装3.7.0版本时，遇到的安装错误"></a>问题：Mac 下使用pyenv安装3.7.0版本时，遇到的安装错误</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % pyenv install 3.7.0 </span><br><span class="line">Downloading openssl-1.0.2k.tar.gz...</span><br><span class="line">-&gt; https://www.openssl.org/<span class="built_in">source</span>/openssl-1.0.2k.tar.gz</span><br><span class="line">Installing openssl-1.0.2k...</span><br><span class="line"></span><br><span class="line">BUILD FAILED (OS X 10.15.5 using python-build 20180424)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">configure: error: C compiler cannot create executables</span><br><span class="line">See `config.log<span class="string">&#x27; for more details.</span></span><br></pre></td></tr></table></figure><p>上述错误中的关键内容为C 编译器错误，解决方法。这时候就要检查xcode comand line组件是否安装，使用如下命令检测xcode command line是否安装，如果有输出内容，则说明已经安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % xcode-select -p</span><br><span class="line">/Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure><p>如果想检查xcode command line的版本，则可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">username@mac ~ % pkgutil --pkg-info=com.apple.pkg.CLTools_Executables</span><br><span class="line">package-id: com.apple.pkg.CLTools_Executables</span><br><span class="line">version: 12.0.0.0.1.1599194153</span><br><span class="line">volume: /</span><br><span class="line">location: /</span><br><span class="line">install-time: 1600823154</span><br><span class="line">groups: com.apple.FindSystemFiles.pkg-group </span><br></pre></td></tr></table></figure><p>如果没有安装，则需要安装Xcode command line， 然后重新使用pyenv安装所需版本的python。</p><h4 id="问题：Mac-终端启动虚拟环境时，遇到错误"><a href="#问题：Mac-终端启动虚拟环境时，遇到错误" class="headerlink" title="问题：Mac 终端启动虚拟环境时，遇到错误"></a>问题：Mac 终端启动虚拟环境时，遇到错误</h4><p>在Mac上安装完pyenv和pyenv-virtualenv后，当重新启动终端后，运行pyenv activate xxx启动虚拟环境时会遇到如下提示，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Failed to deactivate virtualenv.</span><br><span class="line"></span><br><span class="line">Perhaps pyenv-virtualenv has not been loaded into your shell properly.</span><br><span class="line">Please restart current shell and try again.</span><br></pre></td></tr></table></figure><p>检查bash的配置<code>.bash_profile</code>中内容也没有发现问题，这时候就要查看Mac中启动的终端时bash还是zsh。bash与zsh都是mac终端自带的shell命令解释器，早期Mac OS系统默认使用bash解释器，在10.15之后的系统中官方推荐使用zsh解释器。如果当前终端启动的是zsh，就需要创建zsh的配置文件<code>.zshrc</code>文件，并在该文件中添加如下相关配置即可，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv virtualenv-init -)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>当然在Mac中bash和zsh是可以自由切换的，切换方式如下：</p><ul><li>切换bash：<code>chsh -s /bin/bash</code></li><li>切换zsh：<code>chsh -s /bin/zsh</code></li><li><strong>终端</strong>的系统偏好设置里手动设置。</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以上即为本人在安装和配置pyenv和pyenv-virtualenv整个过程，也包括自己在不同系统下安装这两个组建所遇问题和找到的解决方案。Python版本隔离与Python开发运行环境隔离，两者哪一个更有必要了解安装？哪种方案最优？个人觉得没必要过多纠结，适合自己需求的就是最合适的。上述方案也仅为一家之言，并非最优，若读者有别的思路也欢迎关注我的个人微信公众号，一起讨论学习。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      使用pyenv来管理python的版本  manage the use pyenv python version
    
    </summary>
    
    
      <category term="Python 相关 - 8. Python 杂记" scheme="https://zicowarn.github.io/categories/Python-%E7%9B%B8%E5%85%B3-8-Python-%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="https://zicowarn.github.io/tags/Python/"/>
    
      <category term="杂记" scheme="https://zicowarn.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="Pyenv" scheme="https://zicowarn.github.io/tags/Pyenv/"/>
    
      <category term="版本管理" scheme="https://zicowarn.github.io/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>AWS 如何在lambda函数中使用Python依赖库pymssql</title>
    <link href="https://zicowarn.github.io/2020/09/20/aws-lambda-02-use-pythonpackage-pymssql/"/>
    <id>https://zicowarn.github.io/2020/09/20/aws-lambda-02-use-pythonpackage-pymssql/</id>
    <published>2020-09-20T01:39:50.000Z</published>
    <updated>2022-06-06T03:06:28.825Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号: <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a> </p><h3 id="任务背景"><a href="#任务背景" class="headerlink" title="任务背景"></a>任务背景</h3><p>任务为使用aws的lambda函数从一个MS SQL数据库中读取部分的数据，然后对数据处理后，转存至aws的DyanmoDB上，因为需要从MS SQL数据库中读取信息，代码就需要相关依赖，Python对MS SQL的依赖库为<a href="https://pypi.org/project/pymssql/"><strong>pymssql</strong></a>，初步计划lambda 的函数使用Python来完成，版本为Python 3.6。本文主要介绍，如何在aws lambda函数中使用python依赖库<strong>pymssql</strong>。</p><h3 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h3><p>aws lambda 的 Python 3.6 的运行环境，是不具有pymssql这个依赖包的，该依赖包并非标准库，又<strong>PyPI</strong>(<em>Python Package Index</em>)是python<strong>官方的第三方库的仓库</strong>管理维护，可以通过pip命令获取和安装。aws lambda 函数Python Runtime 运行时与操作系统如下，总的来说lambda函数是运行在Amazon Linux的操作系统上的，Amazon Linux和Amazon Linux2的区别就是内核版本有区别。</p><table><thead><tr><th align="left">Python 运行时</th><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">名称</td><td align="left">标识符</td><td align="left">适用于 Python 的 AWS 开发工具包</td><td align="left">操作系统</td></tr><tr><td align="left">Python 3.8</td><td align="left"><code>python3.8</code></td><td align="left">boto3-1.14.17 botocore-1.17.17</td><td align="left">Amazon Linux 2</td></tr><tr><td align="left">Python 3.7</td><td align="left"><code>python3.7</code></td><td align="left">boto3-1.14.17 botocore-1.17.17</td><td align="left">Amazon Linux</td></tr><tr><td align="left">Python 3.6</td><td align="left"><code>python3.6</code></td><td align="left">boto3-1.14.17 botocore-1.17.17</td><td align="left">Amazon Linux</td></tr><tr><td align="left">Python 2.7</td><td align="left"><code>python2.7</code></td><td align="left">boto3-1.14.17 botocore-1.17.17</td><td align="left">Amazon Linux</td></tr></tbody></table><p>在测试中，我们使用的lambda函数名为<strong>test</strong>，Python文件名为lambda_function.py，该文件内容为，lambda函数的范例代码，内容如下。其中第二行为修改内容，主要为了引入pymssql模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pymssql</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>):</span></span><br><span class="line">    <span class="comment"># TODO implement</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;statusCode&#x27;</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="string">&#x27;body&#x27;</span>: json.dumps(<span class="string">&#x27;Hello from Lambda!&#x27;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于pymssql不是标准库，所以如果直接在lambda函数中引用该包，则lambda的执行结果为：<strong>失败</strong>，错误信息为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;errorMessage&quot;</span>: <span class="string">&quot;Unable to import module &#x27;lambda_function&#x27;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志输出为，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">START RequestId: d77542a0-d9c0-426a-a050-04948dc8464a Version: <span class="variable">$LATEST</span></span><br><span class="line">Unable to import module <span class="string">&#x27;lambda_function&#x27;</span>: No module named <span class="string">&#x27;pymssql&#x27;</span></span><br><span class="line"></span><br><span class="line">END RequestId: d77542a0-d9c0-426a-a050-04948dc8464a</span><br><span class="line">REPORT RequestId: d77542a0-d9c0-426a-a050-04948dc8464aDuration: 0.32 msBilled Duration: 100 msMemory Size: 128 MBMax Memory Used: 43 MBInit Duration: 1.32 ms</span><br></pre></td></tr></table></figure><p>可以看出，程序错误的原因为无法引入pymssql这个模块，是一个依赖问题。基本的共识为：不同版本的Python的相同第三方依赖包的内容是不同的，同样的不同操作系统的相同第三方依赖包的内容也是不同的。所以在调试代码也好，解决依赖也好，就需要创建一个Python版本隔离并且依赖隔离的环境，这部分内容，在python相关的文章里都有介绍，若有需要可以查看相关文章。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决问题的思路有两种：第一种，使用lambda 层（Layer）的方式解决依赖问题，另一种为将依赖内容与lambda函数的py文件整合在一起解决依赖问题。lambda函数代码更新可以通过，网页端，上传zip程序包或Amazone S3中引用，三种方式完成，本文主要讨论的以zip压缩文件作为程序包来更新lambda的相关代码部分。</p><h4 id="创建-lambda-程序的依赖项程序包"><a href="#创建-lambda-程序的依赖项程序包" class="headerlink" title="创建 lambda 程序的依赖项程序包"></a>创建 lambda 程序的依赖项程序包</h4><p>要创建一个运行在linux系统下，Python 3.6运行时的lambda函数相关依赖项的程序包，就要创建并启动一个Python的隔离运行环境。关于如何创建这样一个隔离环境，也请参考python相关文章。</p><h5 id="启动虚拟环境"><a href="#启动虚拟环境" class="headerlink" title="启动虚拟环境"></a>启动虚拟环境</h5><p>比如，在Linux系统下，我们有如下的一个名为env3612的python虚拟环境，则可以在终端里输入pyenv activate env3612命令来启动这个虚拟环境，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">username@mac:~<span class="comment"># pyenv virtualenvs</span></span><br><span class="line">  3.6.12/envs/env3612 (created from /root/.pyenv/versions/3.6.12)</span><br><span class="line">  env3612 (created from /root/.pyenv/versions/3.6.12)</span><br><span class="line"></span><br><span class="line">username@mac:~<span class="comment"># pyenv activate env3612</span></span><br><span class="line">(env3612) username@mac:~<span class="comment">#</span></span><br></pre></td></tr></table></figure><h5 id="创建工作文件夹"><a href="#创建工作文件夹" class="headerlink" title="创建工作文件夹"></a>创建工作文件夹</h5><p>在相关虚拟运行环境启动后，就可以创建一个工作目录，下面代码中第一层目录的文件夹pymssql-dependencies这个名字可以自定义，其不对后续操作产生影响，第二层目录的文件夹python，该文件夹名非常重要，请保持一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username@mac:~<span class="comment"># mkdir pymssql-dependencies</span></span><br><span class="line">username@mac:~<span class="comment"># cd pymssql-dependencies/</span></span><br><span class="line">username@mac:~/pymssql-dependencies<span class="comment"># mkdir python</span></span><br><span class="line">username@mac:~/pymssql-dependencies<span class="comment"># cd python/</span></span><br></pre></td></tr></table></figure><h5 id="安装单一Python库"><a href="#安装单一Python库" class="headerlink" title="安装单一Python库"></a>安装单一Python库</h5><p>进入最终工作目录python之后，即可使用pip命令<code>pip install pymssql -t ./ </code>，就可以单独安装pymssql这个依赖库安装到这个python文件夹内，安装之后，文件夹内仅有pymssql相关内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env3612) username@mac:~/pymssql-dependencies/python<span class="comment"># pip install pymssql -t ./</span></span><br></pre></td></tr></table></figure><h5 id="压缩程序包"><a href="#压缩程序包" class="headerlink" title="压缩程序包"></a>压缩程序包</h5><p>完成pymssql之后，需要从python这个文件夹返回至上一级目录，再使用<code>zip -r ~/tmp/pymssql-dependencies.zip . </code>将python目录内的所有内容压缩成zip文件。该文件可以理解为lambda函数的程序包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(env3612) username@mac:~/pymssql-dependencies/python<span class="comment"># cd ..</span></span><br><span class="line">(env3612) username@mac:~/pymssql-dependencies<span class="comment"># mkdir ~/tmp</span></span><br><span class="line">(env3612) username@mac:~/pymssql-dependencies<span class="comment"># zip -r ~/tmp/pymssql-dependencies.zip .</span></span><br><span class="line">  adding: python/ (stored 0%)</span><br><span class="line">  adding: python/_mssql.cpython-36m-x86_64-linux-gnu.so (deflated 73%)</span><br><span class="line">...</span><br><span class="line">  adding: python/pymssql.libs/libsybdb-98ddd287.so.5.1.0 (deflated 64%)</span><br></pre></td></tr></table></figure><h4 id="一、通过-lambda-层解决依赖问题"><a href="#一、通过-lambda-层解决依赖问题" class="headerlink" title="一、通过 lambda 层解决依赖问题"></a>一、通过 lambda 层解决依赖问题</h4><p>该方法解决问题是，首先要创建一个lambda 函数的层，配置信息请参考下方图片。在这里层的名称可以自定义，因为其只做为索引，在lambda函数引入层时，被用于索引。与之后要上传至层的zip文件名，和zip文件内的文件都无关系。</p><h5 id="创建lambda层"><a href="#创建lambda层" class="headerlink" title="创建lambda层"></a>创建lambda层</h5><p><img src="/2020/09/20/aws-lambda-02-use-pythonpackage-pymssql/aws-lambda-02-creatlayer.png" alt="Lambda Create Layer"></p><p>然后选择之前创建的zip文件，上传后点击<code>创建</code>，就可以完成相关lambda层的创建。再在lambda函数的配置页面点击<code>Layers</code>，然后选择<code>添加层</code>，为test这个lambda函数的指定一个layer。</p><p><img src="/2020/09/20/aws-lambda-02-use-pythonpackage-pymssql/aws-lambda-0203.png" alt="aws-lambda-0203"></p><p>然后在如下页面选择<code>自定义层</code>，选择层的名称，点击<code>添加</code>即可完成配置。</p><p><img src="/2020/09/20/aws-lambda-02-use-pythonpackage-pymssql/aws-lambda-0204.png" alt="aws-lambda-0204"></p><p>然后就可以再次测试该lambda函数。这时候lambda的执行结果为：<strong>成功</strong>，详细信息为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;statusCode&quot;: 200,</span><br><span class="line">  &quot;body&quot;: &quot;\&quot;Hello from Lambda!\&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志输出为，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">START RequestId: ee1f059b-8288-4463-8501-8f36df9a6d67 Version: <span class="variable">$LATEST</span></span><br><span class="line">END RequestId: ee1f059b-8288-4463-8501-8f36df9a6d67</span><br><span class="line">REPORT RequestId: ee1f059b-8288-4463-8501-8f36df9a6d67Duration: 0.33 msBilled Duration: 100 msMemory Size: 128 MBMax Memory Used: 48 MBInit Duration: 29.24 ms</span><br></pre></td></tr></table></figure><p>如上的信息表明，上述方法已经通过lambda函数的层的方式解决了依赖问题，通过该方法也可以解决其他相关依赖的相似问题。</p><h4 id="二、通过-lambda-代码解决依赖问题"><a href="#二、通过-lambda-代码解决依赖问题" class="headerlink" title="二、通过 lambda 代码解决依赖问题"></a>二、通过 lambda 代码解决依赖问题</h4><p>该方法前期准备工作与方法一相同，都需要创建Python的隔离运行环境，并安装pymssql至python文件夹内，在安装以后，python文件夹的具体情况如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(env3612) username@mac:~/pymssql-dependencies/python<span class="comment"># ls -al</span></span><br><span class="line">total 7392</span><br><span class="line">drwxr-xr-x@   7 username  staff      224  9 27 16:23 .</span><br><span class="line">drwx------+ 145 username  staff     4640  9 27 16:24 ..</span><br><span class="line">-rwxr-xr-x@   1 username  staff  2287480  9 27 11:07 _mssql.cpython-36m-x86_64-linux-gnu.so</span><br><span class="line">drwxr-xr-x@   9 username  staff      288  9 27 11:07 pymssql-2.1.5.dist-info</span><br><span class="line">-rwxr-xr-x@   1 username  staff  1490808  9 27 11:07 pymssql.cpython-36m-x86_64-linux-gnu.so</span><br><span class="line">drwxr-xr-x@   4 username  staff      128  9 27 16:20 pymssql.libs</span><br></pre></td></tr></table></figure><p>这时候需要将lambda函数的py文件，即lambda_function.py拷贝至该目录，然后在python目录下，运行<code>zip -r ~/Downloads/test.zip .</code>命令，将python文件内的所有文件压缩成为一个名为test.zip的压缩文档，如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(env3612) username@mac:~/pymssql-dependencies/python<span class="comment">#  zip -r ~/Downloads/test.zip . </span></span><br><span class="line">updating: _mssql.cpython-36m-x86_64-linux-gnu.so (deflated 73%)</span><br><span class="line">updating: pymssql.cpython-36m-x86_64-linux-gnu.so (deflated 72%)</span><br><span class="line">updating: lambda_function.py (deflated 24%)</span><br><span class="line">  adding: pymssql-2.1.5.dist-info/ (stored 0%)</span><br><span class="line">  adding: pymssql-2.1.5.dist-info/RECORD (deflated 39%)</span><br><span class="line">...</span><br><span class="line">  adding: pymssql.libs/lambda_function.py (deflated 24%)</span><br></pre></td></tr></table></figure><p>在这里，zip的文件名最好与lambda函数保持一致，文件名称字母大小写不敏感。然后点击lambda函数中<code>函数代码</code>部分的<code>操作</code>按钮，然后选择<code>上传.zip文件</code>项，接着选择test.zip压缩文件，点击<code>保存</code>即可。</p><p><img src="/2020/09/20/aws-lambda-02-use-pythonpackage-pymssql/aws-lambda-0204-1195705.png" alt="aws-lambda-0204"></p><p>完成上述内容，然后点击测试，就可以得到与方法一一样的成功执行结果。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>上述两个方法中，程序包的部署，可以通过网页端完成，也可以通过aws-cli来实现。zip的文件包也可以先上传至Amazone S3存储内，然后在页面端选择使用。在尝试两个方法的时候，要注意打包zip程序包时，命令行的当前目录，方法一需要在python上一级目录。方法二需要确保在python目录内。上述两个方案仅为一家之言，并非最优，若读者有别的思路也欢迎关注我的个人微信公众号，一起讨论学习。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      Python实现aws lambda函数时使用Python依赖库pymssql solve the problem of code dependency when using Python to implement aws lambda
    
    </summary>
    
    
      <category term="AWS 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/AWS-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="AWS" scheme="https://zicowarn.github.io/tags/AWS/"/>
    
      <category term="lambda" scheme="https://zicowarn.github.io/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 如何在VS Code中调试Hexo的相关代码</title>
    <link href="https://zicowarn.github.io/2020/09/03/hexo-03-howto-debug-hexo-in-vscode/"/>
    <id>https://zicowarn.github.io/2020/09/03/hexo-03-howto-debug-hexo-in-vscode/</id>
    <published>2020-09-03T01:25:45.000Z</published>
    <updated>2020-12-19T13:32:39.199Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>按理说，日常Hexo的使用是不需要考虑代码调试的。一般情况下使用到的Hexo版本也是经过充分测试才发布的正式版本。可能还会有一些隐藏的小问题，但也足以应对日常使用。能想起来调试Hexo的相关代码，完全是出于好奇，想知道hexo deploy命令运行时到底做了些什么，hexo deploy背后的具体流程是什么，如何将项目中的README.md文件在部署时同时被拷贝到**.deploy_git**目录中，进而部署到Github中。带着这些问题，花费了点时间尝试之后，现将调试环境的部署方式记录下来，以便自己以后回顾学习。 </p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>VS Code 编辑器对Node的调试环境做了很大的优化和支持。实际应用中，需要自己做的是很少的，在VS Code中<strong>运行</strong>和<strong>调试</strong>的设置都在launch.json这个配置文件中。VS Code也为Node项目提供了多配置模版snippets（点击按钮Add Configuration…即可看见配置模版列表），在方法一中我们先选择一个“<strong>Launch Program</strong>”的模版，基本的配置内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/index.js&quot;</span></span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中重要的参数<strong>request</strong>的取值和基本区别如下，两者的应用场景差异的具体细节不是本文重点，就不在本文中进行详细解释。</p><ul><li>launch 模式：VS Code会启动一个独立的具有debug模式的程序。</li><li>attach 模式：用于监听一个已经启动的程序。</li></ul><p>由于我们选择的是Lauch Program的配置模版，其<code>request</code>的参数默认为launch，该模式也是我们本文中使用的。在添加相应的内容之后，就可以在VS Code中，调试诸如hexo deploy的命令相关代码。接下来，只需要在Javascript文件“./node_modules/hexo-deployer-git/lib/deployer.js”中合适的位置添加断点，然后启动该配置，就可以看到程序在断点停留。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Debug Hexo Deploy Direct&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;runtimeArgs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;--nolazy&quot;</span> <span class="comment">// 强制V8引擎完成代码的编译工作，这在远程调试时比较有用，可选</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;./node_modules/hexo-cli/bin/hexo&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;deploy&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--debug&quot;</span> <span class="comment">//设置Hexo的 log基本，以便输出更多的日志内容</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;console&quot;</span>: <span class="string">&quot;internalConsole&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;outputCapture&quot;</span>: <span class="string">&quot;std&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>我们也可以选择使用“<strong>Launch via npm</strong>”的模版，选用这个配置模版后会得到以下配置内容。npm作为node第三方依赖模块的管理工具，用npm运行js文件和node运行js文件的差异，我们不在本文中进行讨论。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch via NPM&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;runtimeArgs&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;run-script&quot;</span>,</span><br><span class="line">      <span class="string">&quot;debug&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;npm&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;skipFiles&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&lt;node_internals&gt;/**&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pwa-node&quot;</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上述模版信息为基础，修改添加一些选项后，我们得到以下配置内容。使用该配置内容，也能完成调试环境的搭建。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Debug Hexo Deploy via npm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;npm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;runtimeArgs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;run&quot;</span>, <span class="string">&quot;deploy&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;console&quot;</span>: <span class="string">&quot;internalConsole&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;outputCapture&quot;</span>: <span class="string">&quot;std&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置中的<code>runtimeArgs</code>配置项中的<code>deploy</code>参数，意指Hexo项目的配置文件package.json中的<code>scripts</code>配置项目中的<code>deploy</code>，参见下列内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>有些人也推荐使用另一种方法，该方法以本文中的方法二为基础，不过需要安装依赖模块<strong>node-cli</strong>。安装该依赖模块的时候，需使用下列命令，以确保该模块被安装在devDependencies节点下，以便以后初始化项目时，运行npm install –production命令时，该依赖模块不会被安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -save-dev node-cli</span><br></pre></td></tr></table></figure><p>在安装完node的CLI后，就需要对Hexo的package.json文件进行修改，在<code>scripts</code>中添加以下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;debug-deploy&quot;</span>: <span class="string">&quot;node ./node_modules/hexo-cli/bin/hexo deploy --debug&quot;</span> <span class="comment">// 该行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改VS Code的launch.json文件，选用方法二中使用的“<strong>Launch via npm</strong>”模版，然后参照以下内容完成配置，就可以搭建Hexo代码的调试环境。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Debug Hexo Deploy via npm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;npm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;runtimeArgs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;run&quot;</span>, <span class="string">&quot;debug-deploy&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;console&quot;</span>: <span class="string">&quot;internalConsole&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;outputCapture&quot;</span>: <span class="string">&quot;std&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上三种方法都能用于VS Code中Hexo调试环境的搭建工作，三种方法也没有优劣之分，正所谓萝卜白菜各有所爱，使用哪一种方法全凭个人喜好。</p><h3 id="应用技巧"><a href="#应用技巧" class="headerlink" title="应用技巧"></a>应用技巧</h3><p>Hexo的日志组件Logger的部分方法如下。前文中介绍的相关配置中的“–debug”，就是为了设置日志的输出等级，以便获取更多的程序运行信息。</p><ul><li>log.info()</li><li>log.debug()</li><li>log.warn()</li><li>log.error()</li></ul><p>默认情况下，由于VS Code存在问题（<a href="https://github.com/Microsoft/vscode/issues/19750">Issues 19750</a>，请点击查看具体内容），所以上述的logger方法，因其内部使用了“<strong>process.stdout.write()**”方法，这个方法输出的文本和</strong>“console.log()”<strong>方法所输出的文本，会输出到不同的地方（虽然理论上console.log内部使用的也是process.stdout.write方法，输出的文本内容应该位于同一地方），仅代码中的console.log输出的内容会显示在VS Code的</strong>DEBUG CONSOLE中**。这种情况下，由于缺少日志信息不利于调试，就需要解决该问题。解决方法就是在配置中添加下列代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//&quot;port&quot;: 9229,</span></span><br><span class="line">  <span class="attr">&quot;console&quot;</span>: <span class="string">&quot;internalConsole&quot;</span>, <span class="comment">//integratedTerminal意指 VS Code 的 TERMINAL</span></span><br><span class="line">  <span class="attr">&quot;outputCapture&quot;</span>: <span class="string">&quot;std&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>outputCapture</code> 这项配置，如果设置为std，则标准输出stdout 与标准错误stderr的输出都将显示在调试控制台中，而不是在调试端口上的输出。这对于直接写入stdout / stderr流而不是使用console.*的程序或在使用其他第三方日志库时会很有帮助。</p><p>能有此文全因自己好奇。在文章最后想说一下，这里没有专家，记录这些主要是为了自己以后回顾学习之方便，文章有不足之处也实属正常。见解不同，诚切赐教，关注微信公众号，一起讨论学习。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Jim Wang 公众号: &lt;a class=&quot;main-button-link&quot; href=&quot;#wechat&quot; rel=&quot;noopener&quot;&gt;巴博萨船长&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：在使用Hexo部署自己的博客时，常常接触hexo generater，hexo clean和hexo deploy等命令，估计很少人想过如何调试Hexo这些命令的相关代码。作为基于Node的开源blog项目，其在VS Code中的调试环境是什么样的？如何建立这样的调试环境？调试时需要注意什么？ 在VSCode调试Node代码时，可能会遇见方法process.stdout.write和方法console.log的输出内容不在同一位置的问题，该问题如何解决?&lt;/p&gt;
&lt;p&gt;Abstract: When using hexo to deploy the blog, often use commands such as hexo generator, hexo clean and hexo deploy. Few people have thought about how to debug the Hexo codes related to these commands. As a node-based open source blog project, what is its debugging environment in VS Code? How to build a debugging environment for debugging Hexo code? What should pay attention to when debugging? When debugging Node code in VS Code, the output content of process.stdout.write and console.log are not in the same location, why? How to solve the problem?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/Hexo-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Hexo" scheme="https://zicowarn.github.io/tags/Hexo/"/>
    
      <category term="调试" scheme="https://zicowarn.github.io/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 解决嵌入的html被渲染的问题和code_dir的配置项的用法</title>
    <link href="https://zicowarn.github.io/2020/09/02/hexo-02-embed-html-and-downloads-code/"/>
    <id>https://zicowarn.github.io/2020/09/02/hexo-02-embed-html-and-downloads-code/</id>
    <published>2020-09-02T00:11:08.000Z</published>
    <updated>2022-06-06T03:05:17.555Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h3 id="嵌入式html渲染异常"><a href="#嵌入式html渲染异常" class="headerlink" title="嵌入式html渲染异常"></a>嵌入式html渲染异常</h3><p>在使用Hexo管理自己的技术博客文章时，有时候需要在文中嵌入html代码。例如使用iframe嵌入html网页，这时候常常会遇见渲染异常，即嵌入的html也被hexo的主题代码渲染了。解决这部分异常的方法很简单。假设文章中嵌入的html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">src</span>=<span class="string">&quot;demo/demo-1.html&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;40&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决该问题的方法很简单，仅需在Hexo的配置文件_config.yml中找到<code>skip_render</code>这一配置项，按照如下修改配置文件即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">demo/*.html</span></span><br></pre></td></tr></table></figure><p>出现问题的原因是：在渲染markdown文章的时候，内部的html也一并被渲染了，修改这一项则可以在渲染的时候过滤指定文件。该配置支持通配模式。相同方法，嵌入文章的CSS和Javascript文件也可以在渲染时被忽略。</p><h3 id="code-dir配置项的用法"><a href="#code-dir配置项的用法" class="headerlink" title="code_dir配置项的用法"></a>code_dir配置项的用法</h3><p>在hexo的配置文件_config.yml中有<code>code_dir</code>这一配置项，这个配置项也是在修改<code>skip_render</code>的时候发现的，就好奇它的作用，弄清楚之后记录下来，以便以后回顾学习。了解发现这个配置的用处很大。之前写文章时，为了解决文章配图的问题，当时学会了<code>post_asset_folder</code>配置项，为此也安装了<strong>hexo-asset-image</strong>包。所以一开始在使用iframe尝试在文章中嵌入html页面时，就把相应的html文件，css文件，js文件全部放在了与post同名的文件夹中，但是学会<code>code_dir</code>这一配置项后，就可以更优雅地处理这些文件了。</p><p><code>code_dir</code>的默认值为路径<strong>downloads/code</strong>。问题是该文件夹应该位于何处，才能在确保使用hexo server和hexo deploy两个命令时，文章被正确处理。经过尝试之后得知，文件夹downloads/code应位于<strong>source</strong>文件夹内，如下图。这样的话可以确保，无论文章是在编辑、预览或发布时，文章中的相关内容都有效。</p><p><img src="/2020/09/02/hexo-02-embed-html-and-downloads-code/hexo-02-01.png" alt="截屏2020-09-02 下午4.52.28"></p><p>这个文件夹，不仅可以用于本文提到嵌入式的html，css和js文件的保存目录，也可以作为示例代码的保存路径以供读者下载尝试。即在markdown文章内使用下列代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">donwload file</span>](<span class="link">/downloads/code/demo.html</span>)</span><br></pre></td></tr></table></figure><p>文章发布时，读者就可以使用右键菜单“储存为…”下载所需文件。</p><p>这里没有专家，记录这些主要是为了自己以后回顾学习之方便，文章有不足之处也实属正常。见解不同，诚切赐教，关注微信公众号，一起讨论学习。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      Hexo 解决嵌入的html被渲染的问题和code_dir的配置项的用法 solve the problem that embedded html is also rendered by hexo theme code
    
    </summary>
    
    
      <category term="Hexo 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/Hexo-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Hexo" scheme="https://zicowarn.github.io/tags/Hexo/"/>
    
      <category term="使用技巧" scheme="https://zicowarn.github.io/tags/%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>CSS 如何运用CSS来隐藏页面文本</title>
    <link href="https://zicowarn.github.io/2020/08/29/css-01-use-css-hide-content/"/>
    <id>https://zicowarn.github.io/2020/08/29/css-01-use-css-hide-content/</id>
    <published>2020-08-29T09:13:51.000Z</published>
    <updated>2022-06-06T03:04:33.037Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>开篇立意，在探索全栈程序猿的路上我还坚持爬行着。在本文伊始想给大家大家讲一下，这里没有什么所谓专家和也没有能独挡一面的技术大拿，有的仅仅是一个愿意不断尝试，愿意学习的学生而已。不忘初心，正所谓阅文无数，不如明师指路；明师指路，不如自己去悟。说到底，学习知识做到知行合一才是真理。</p><h3 id="任务背景"><a href="#任务背景" class="headerlink" title="任务背景"></a>任务背景</h3><p>为了学会CSS相关的内容，更为了把学到的东西用到实处，在实践中发现问题，再回过头来继续学习，螺旋上升，加快成长。从今天开始，所发的CSS相关的文章就是在记录自己学习使用CSS的时候走的每一步。</p><p>为了学习前端知识，在过去一段时间尝试完成的项目是一个管理构建项目和查看构建状态的网页工具，在该项目中使用了Material Design Lite组件用于解决页面布局和基本的元素样式。使这个该组建也是为了学习和了解Material Design这种扁平化设计理念。官方网页介绍的使用方法如下，是在html页面中导入CSS和JavaScript两者资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./material.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./material.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中material.min.css文件，是自己在<a href="https://getmdl.io/customize">https://getmdl.io/customize</a> 官方页面下，按照说明文档，自定义生成的，其使用的默认主色为indigo和强调色为pink。相关的使用方法与规范，请参见官方文档，本文不再做说明。</p><h3 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h3><p>有关Material Design Lite使用方法的内容中关于字体图标Material+Icons的链接的部分，由于大家熟知的原因，使用这个地址的CDN是不被推荐的，另一方面，因为该小型管理项目最终也是在内部网络使用的，再者初始版本中使用的是w3 css开源主题，Roboto免费字体与Font Awesome开源图表库，这些内容也希望能新的样式中继续使用。所以类似这样的外部链接就有悖项目现实情况。当然网络中也有此类资源本地使用方法的介绍，相关内容因与本文无关，不在赘述。</p><p>自己项目页面基本布局如下图所示，左侧为导航navibar部分，底部为页脚footer部分，右上为页眉header部分与右侧中部为主要内容显示部分。navibar会根据页面宽度自动显示与隐藏，这是Material Design Lite的组件特性。</p><p><img src="/2020/08/29/css-01-use-css-hide-content/css-01-03.png" alt="图例2"></p><p>项目中header部分的代码如下，注意，这里使用的是jade模版。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; header part</span><br><span class="line">header(class&#x3D;&quot;mdl-layout__header&quot;)</span><br><span class="line">  div(class&#x3D;&quot;mdl-layout__header-row&quot;)</span><br><span class="line">    span(class&#x3D;&quot;mdl-layout-title&quot;). </span><br><span class="line">      #&#123;t(&#39;index.title&#39;, &#39;My header title&#39;)&#125;</span><br><span class="line">    div(class&#x3D;&quot;mdl-layout-spacer&quot;)</span><br></pre></td></tr></table></figure><p>由于是响应式的UI布局，当页面尺寸低于一个值时，左侧导航菜单就会被隐藏，同时按钮图标会显示在Header部分，估计很多朋友都见过类似的响应式布局，如此一来，就遇到了本文所述的关键问题。前文说道项目中没有引入Material+Icons的链接。也就无法显示正确显示这个按钮，具体情况如图所示：</p><p><img src="/2020/08/29/css-01-use-css-hide-content/css-01-02.png" alt="图例3"></p><p>该按钮是由material.min.js自动生成的，当页面宽度缩小到一定值时，页眉header部分的代码变为如下所示，对比之间的代码可见在div(class=”mdl-layout__header-row”)上面出现了一个新的div块，内部为一个图标元素，该图标即为上图中的菜单按钮，由于定义图标的资源未被引入，所以图标未正确显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;mdl-layout__header is-casting-shadow&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mdl-layout__drawer-button&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;material-icons&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mdl-layout__header-row&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;mdl-layout-title&quot;</span>&gt;</span>My header title<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>按钮图标的内容content是由常量MaterialLayout.prototype.Constant_中的MENU_ICON来定义的，可以通过查看未压缩的material.js文档找到如下的定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MaterialLayout.prototype.Constant_ = &#123;</span><br><span class="line">    MAX_WIDTH: <span class="string">&#x27;(max-width: 1024px)&#x27;</span>,</span><br><span class="line">    TAB_SCROLL_PIXELS: <span class="number">100</span>,</span><br><span class="line">    RESIZE_TIMEOUT: <span class="number">100</span>,</span><br><span class="line">    MENU_ICON: &#x27;&amp;#xE5D2;&#x27;, # 按钮图标的值</span><br><span class="line">    CHEVRON_LEFT: <span class="string">&#x27;chevron_left&#x27;</span>,</span><br><span class="line">    CHEVRON_RIGHT: <span class="string">&#x27;chevron_right&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>由于项目现实条件约束，不能引入Material+Icons的链接，又因为最后使用的是压缩后的min.js文件，文件可读性太差，再者修改代码就要理解机制，所以修改相应的js代码也不现实。那能不能通过CSS控制元素的样式隐藏这个图标内容呢？这就是今天文章的主要内容。使用CSS来隐藏页面文本元素的方法很简单，关键代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hide-text</span> &#123;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">100%</span>; </span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验表明，该方法适用于现有项目，解决了所遇问题，再使用的时候我就好奇背后的原理。也想知道上述CSS代码是如何实现隐藏文本的呢？背后逻辑与思想究竟又是什么？（诸位前辈莫笑，毕竟本人CSS理论知识不足，大部分就是现学现用的）。结合上述方法和项目本身条件，由于隐藏该内容的目的是想使用新的图标，所以，最终相关的CSS代码如下，由于文本文档被隐藏，这时使用新的按钮图标&lt;i&gt;来替换原始按钮图标也会被隐藏，所以就需要以背景的方式显示新的图标，由于Font Awesome图标的颜色为黑色，为此我还修改了相应svg文件中的“<strong>fill</strong>”属性，使其图标颜色为白色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mdl-layout__header</span> <span class="selector-class">.mdl-layout__drawer-button</span> <span class="selector-class">.material-icons</span> &#123;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(../fonts/bars-solid.svg) no-repeat;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.3em</span>;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法被称为为Kellum方法，在方法溯源上我没有去深究。在搜索外文资料时，输入该关键字确实能够过滤结果。该方法主要思想就是在设置文中不换行white-space: nowrap的前提下，无限制地增加首行缩进text-indent: 100%从而将文本内容推出到页面的显示范围。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span></span><br></pre></td></tr></table></figure><p>该方法内overflow: hidden的使用算是非常聪明的地方，也说明了该方法设计者对CSS的经验之丰富。测试表明，如果在该方法中不使用overflow:hidden，那么如果文本中包含&lt;a&gt;元素的话，左侧的边界会被击穿，即文本中的第一个字符还是会被显示出来，感兴趣可以测试下下列代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line"><span class="css"><span class="selector-tag">text-indent</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">white-space: nowrap;</span><br><span class="line"><span class="css">//<span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>122345678abcdefghijklmnopqrstuvwxy</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对该方法的讨论还远不止如此，有人建议使用“text-indent: 9999px”来替代“text-indent:100%”从而保证文本内容一定会被推出显示范围，而且如果使用9999px的话，可以不需结合overflow:hidden，此时文本的左侧边界不会被击穿。感兴趣的话，也可以结合上面的示例页面代码自己尝试一下。但也有一部分人对“9999px”在该方法中替代“100%”持反对态度，因为如果使用绝对值的话，浏览器就需要画出9999px边框，这样的话在性能方面就会有些损失。</p><p>也有人在使用时发现，该方法并不适用于html的&lt;button&gt;元素，使用此方法时，Button元素的右侧，即带有缩进的文本的左侧边界也会被击穿，此时情况与上文中文本包含&lt;a&gt;元素时一致，可以使用下方代码进行测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">button</span><br><span class="line">&#123;</span><br><span class="line">width: 120px;</span><br><span class="line">  height: 32px;</span><br><span class="line">  text-indent: 100%; </span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  overflow: hidden</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码的结果如下，可以看出文本左侧边界被“<strong>击穿</strong>”了。</p><p><img src="/2020/08/29/css-01-use-css-hide-content/css-01-04.png" alt="图例1"></p><p>为什么遇到&lt;button&gt;元素时，即便结合使用了overflow: hidden还是会出现页面被击穿的现象呢？这是因为一些类似于&lt;button&gt;的html元素本身自带内部填充intrinsic padding。重置button的padding属性就可以解决这一问题，当然将text-indent的值设置为大于100%，或使用前文中所说的9999px也能达到相似的结果。将下面的代码添加至上面的html代码中就能解决这个问题：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本人在CSS方面的知识并不丰富，一直在不断学习，文章中所述所写必然存在不足之处，望各位读者多多指正。如果哪位朋友有更好的解决方案，更希望能不吝赐教，大家一同学习，共同进步。欢迎关注我的微信公众号，留言讨论。</p><h3 id="参考目录"><a href="#参考目录" class="headerlink" title="参考目录"></a>参考目录</h3><p>Hide text using css: <a href="https://stackoverflow.com/questions/471510/hide-text-using-css">https://stackoverflow.com/questions/471510/hide-text-using-css</a></p><p>why the kellum method doesn’t work with button elements? : <a href="https://stackoverflow.com/questions/26992552/css-image-replacement-why-the-kellum-method-doesnt-work-with-button-elements">https://stackoverflow.com/questions/26992552/css-image-replacement-why-the-kellum-method-doesnt-work-with-button-elements</a></p><p>CSS white-space 属性: <a href="https://www.w3school.com.cn/cssref/pr_text_white-space.asp">https://www.w3school.com.cn/cssref/pr_text_white-space.asp</a></p><p>CSS text-indent 属性: <a href="https://www.w3school.com.cn/cssref/pr_text_text-indent.asp">https://www.w3school.com.cn/cssref/pr_text_text-indent.asp</a></p><p>Replacing the -9999px hack (new image replacement) : <a href="http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/">http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/</a></p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">    版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，    转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。</div>]]></content>
    
    <summary type="html">
    
      CSS来隐藏页面文本 CSS to hide text
    
    </summary>
    
    
      <category term="CSS 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/CSS-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="前端" scheme="https://zicowarn.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="https://zicowarn.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Python 杂记之 如何在实现子进程到父进程的环境变量更新</title>
    <link href="https://zicowarn.github.io/2020/07/17/0808-ma-run-vcvars-set-devenv-ci/"/>
    <id>https://zicowarn.github.io/2020/07/17/0808-ma-run-vcvars-set-devenv-ci/</id>
    <published>2020-07-17T09:11:08.000Z</published>
    <updated>2022-06-06T03:03:50.247Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号:  <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><h3 id="任务背景"><a href="#任务背景" class="headerlink" title="任务背景"></a>任务背景</h3><p> 该任务是：当前所用的完成持续集成的脚本是Python语言实现的。在现有的脚本的核心内容是，使用subprocess.Popen方法来调用devenv命令，从而实现项目的清理clean和构建build。</p><p>今年伊始，项目中引用了.NET组件。一部分代码使用.NET完成了一个交互界面窗口。由于使用了.NET，编译的时候就需要对.NET的程序集进行强名称签名等一系列操作。例如，在导出类型库时会使用到的类型库导出工具Tlbexp.exe（一般在Visual Studio项目属性中**[生成]**部分中的“为COM互操作注册”被勾选时），以及程序集注册工具Regasm.exe等。此类工具的路径为：C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\。理论上，当在命令行中使用devenv命令工具时，该工具就会自动查找上述的工具目录，并保证在编译解决方案的时候能够访问到这些工具。实践得知，devenv不能完成诸如此类环境变量的设置。进而在使用devenv时，因为项目配置中的所用到的工具因为无法找到会发生编译错误。</p><p>既然devenv不能实现理论结果，那就需要用到vsvars32.bat个batch文件了了。该文件是visual studio自带的文件，本质就是配置环境变量，工作目录的一些批处理命令。任务中遇到的问题是Tlbexp.exe无法找到，问题的本质是工具的路径不在系统环境中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VS140COMNTOOLS&#x3D;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\</span><br></pre></td></tr></table></figure><h3 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h3><p>话不多少，直接上代码，项目一开始我们使用的是如下的代码，代码的主要内容是使用subprocess模块下的Popen方法来调用cmd命令devenv完成代码的清除clean和构建build，部分代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略部分</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mCompile</span>(<span class="params">slnPath, compilArgs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;[summary]</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        slnPath ([type]): [description]</span></span><br><span class="line"><span class="string">        compilArgs ([type]): [description]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        RuntimeError: [description]</span></span><br><span class="line"><span class="string">        ValueError: [description]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    compilerExe = <span class="string">&quot;C://Porgamm Files (x86)//Microsoft Visual Studio XX.X/CommonX//IDE//devenv&quot;</span></span><br><span class="line">    startupinfo = sp.STARTUPINFO()</span><br><span class="line">    startupinfo.dwFlags |= sp.STARTF_USESHOWWINDOW</span><br><span class="line"></span><br><span class="line">    logClean = <span class="string">&quot;clean.txt&quot;</span></span><br><span class="line">    stepClean = sp.Popen([compilerExe, <span class="string">&quot;/clean&quot;</span>, compilArgs, slnPath, <span class="string">&quot;/OUT&quot;</span>, logClean ], stdout=sp.PIPE, stderr=sp.STDOUT, startupinfo=startupinfo)</span><br><span class="line">    stdoutdata, stderrdata = stepClean .communicate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> stepClean.returncode != <span class="number">0</span>:</span><br><span class="line">        msg = <span class="string">&quot;Error: Failed to clean the solution &quot;</span> + slnPath</span><br><span class="line">        <span class="keyword">if</span> stdoutdata != <span class="literal">None</span>:</span><br><span class="line">            msg = msg + <span class="string">&quot;\nError Message: &quot;</span> + stdoutdata</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(msg)</span><br><span class="line">    </span><br><span class="line">    logBuild = <span class="string">&quot;build.txt&quot;</span></span><br><span class="line">    stepCompile = sp.Popen([compilerExe, <span class="string">&quot;/rebuild&quot;</span>, compilArgs, slnPath, <span class="string">&quot;/OUT&quot;</span>, logBuild], stdout=sp.PIPE, stderr=sp.STDOUT, startupinfo=startupinfo)</span><br><span class="line">    stdoutdata, stderrdata = stepCompile.communicate()</span><br><span class="line">    <span class="keyword">if</span> stepCompile.returncode != <span class="number">0</span>:</span><br><span class="line">        msg = <span class="string">&quot;Error: Failed to compile the solution &quot;</span> + slnPath</span><br><span class="line">        <span class="keyword">if</span> stdoutdata != <span class="literal">None</span>:</span><br><span class="line">            msg = msg + <span class="string">&quot;\nError Message: &quot;</span> + stdoutdata</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(msg)</span><br></pre></td></tr></table></figure><p>上述代码中有STARTUPINFO相关内容，为了方便代码解释在此列出如下清单，清单中对每个结构体每个成员都通过注释的方式对成员的功能一一进行了解释：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">STARTUPINFO</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD cb;            <span class="comment">//包含STARTUPINFO结构中的字节数.如果Microsoft将来扩展该结构,它可用作版本控制手段.应用程序必须将cb初始化为sizeof ( STARTUPINFO )</span></span><br><span class="line">    PSTR lpReserved;      <span class="comment">//保留。必须初始化为N U L L</span></span><br><span class="line">    PSTR lpDesktop;    <span class="comment">//用于标识启动应用程序所在的桌面的名字。如果该桌面存在，新进程便与指定的桌面相关联。如果桌面不存在，便创建一个带有默认属性的桌面，并使用为新进程指定的名字。    如果lpDesktop是NULL（这是最常见的情况 ),那么该进程将与当前桌面相关联</span></span><br><span class="line">    PSTR lpTitle;    <span class="comment">//用于设定控制台窗口的名称。如果l p Ti t l e 是N U L L ，则可执行文件的名字将用作窗口名</span></span><br><span class="line">    DWORD dwX;       <span class="comment">//用于设定应用程序窗口在屏幕上应该放置的位置的x 和y 坐标（以像素为单位）。</span></span><br><span class="line">    DWORD dwY;       <span class="comment">//只有当子进程用CW_USEDEFAULT作为CreateWindow的x参数来创建它的第一个重叠窗口时,    才使用这两个坐标。若是创建控制台窗口的应用程序，这些成员用于指明控制台窗口的左上角</span></span><br><span class="line"></span><br><span class="line">    DWORD dwXSize;  <span class="comment">//用于设定应用程序窗口的宽度和长度（以像素为单位）只有dwYsize</span></span><br><span class="line">    DWORD dwYSize;  <span class="comment">// 当子进程将CW_USEDEFAULT 用作CreateWindow 的nWidth参数来创建它的第一个重叠窗口时，才使用这些值。若是创建控制台窗口的应用程序，这些成员将用于指明控制台窗口的宽度</span></span><br><span class="line">    DWORD dwXCountChars;  <span class="comment">//用于设定子应用程序的控制台窗口的宽度和高度（以字符为单位）</span></span><br><span class="line">    DWORD dwYCountChars;</span><br><span class="line">    DWORD dwFillAttribute;   <span class="comment">//用于设定子应用程序的控制台窗口使用的文本和背景颜色</span></span><br><span class="line">    DWORD dwFlags;           <span class="comment">//请参见下一段和表4 - 7 的说明</span></span><br><span class="line">    WORD wShowWindow;        <span class="comment">//用于设定如果子应用程序初次调用的ShowWindow 将SW_SHOWDEFAULT 作为    nCmdShow 参数传递时，该应用程序的第一个重叠窗口应该如何出现。本成员可以是通常用于ShowWindow 函数的任何一个SW_*标识符</span></span><br><span class="line">    WORD cbReserved2;        <span class="comment">//保留。必须被初始化为0</span></span><br><span class="line">    PBYTE lpReserved2;       <span class="comment">//保留。必须被初始化为N U L L</span></span><br><span class="line">    HANDLE hStdInput;        <span class="comment">//用于设定供控制台输入和输出用的缓存的句柄。按照默认设置，hStdInput 用于标识键盘缓存，hStdOutput 和hStdError用于标识控制台窗口的缓存</span></span><br><span class="line">    HANDLE hStdOutput;</span><br><span class="line">    HANDLE hStdError;</span><br><span class="line">&#125; STARTUPINFO, *LPSTARTUPINFO;</span><br></pre></td></tr></table></figure><p>在原始代码中使用上述结构体的<strong>dwFlags</strong>成员，该成员的值被设定为<strong>STARTF_USESHOWWINDOW</strong>，意指使用wShowWindow这个成员属性，其他相关值，请参阅下列清单。这样做的目的是，当需要隐藏窗口时，结合示例代码，仅需要在代码中添加startupinfo.wShowWindow = sp.SW_HIDE即可，但因devenv这样的命令不包含窗体，为了保持简约，所以就没有写入这些代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                      表4-7 dwFlags 使用标志及含义</span><br><span class="line">标志                                    含义</span><br><span class="line"></span><br><span class="line">STARTF_USESIZE                 &#x2F;&#x2F; 使用dwXSize 和dwYSize 成员</span><br><span class="line">STARTF_USESHOWWINDOW              &#x2F;&#x2F;使用wShowWindow 成员</span><br><span class="line">STARTF_USEPOSITION              &#x2F;&#x2F;使用dwX 和dwY 成员</span><br><span class="line">STARTF_USECOUNTCHARS                &#x2F;&#x2F;使用dwXCountChars 和dwYCount Chars 成员</span><br><span class="line">STARTF_USEFILLATTRIBUTE          &#x2F;&#x2F;使用dwFillAttribute 成员</span><br><span class="line">STARTF_USESTDHANDLES              &#x2F;&#x2F;使用hStdInput 、hStdOutput 和hStdError 成员</span><br><span class="line">STARTF_RUN_FULLSCREEN              &#x2F;&#x2F;强制在x86 计算机上运行的控制台应用程序以全屏幕方式启动运行</span><br></pre></td></tr></table></figure><h3 id="初步修改"><a href="#初步修改" class="headerlink" title="初步修改"></a>初步修改</h3><p>我们要解决的“工具Tlbexp.exe无法找到”这个问题，就需要运行vsvars32.bat这batch文件，完成系统环境变量的更新。理论上仅需要在mComple这个函数中，即clean步骤前再次使用subprocess模块下的Popen方法来运行vsvars32.bat即可，相应代码应为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略部分</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mCompile</span>(<span class="params">slnPath, compilArgs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;[summary]</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        slnPath ([type]): [description]</span></span><br><span class="line"><span class="string">        compilArgs ([type]): [description]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        RuntimeError: [description]</span></span><br><span class="line"><span class="string">        ValueError: [description]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    vsvarsbatch = <span class="string">&quot;C://Porgamm Files (x86)//Microsoft Visual Studio XX.X/CommonX//Tools//vsvars32.bat&quot;</span></span><br><span class="line">    compilerExe = <span class="string">&quot;C://Porgamm Files (x86)//Microsoft Visual Studio XX.X/CommonX//IDE//devenv&quot;</span></span><br><span class="line">    startupinfo = sp.STARTUPINFO()</span><br><span class="line">    startupinfo.dwFlags |= sp.STARTF_USESHOWWINDOW</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> vsvarsbatch != <span class="string">&quot;&quot;</span>:  <span class="comment">#  run vsvars32.bat of visual studio</span></span><br><span class="line">        cmd = [vsvarsbatch]</span><br><span class="line">        stepVSARS = sp.Popen(cmd, stdout=sp.PIPE, stderr=sp.STDOUT, startupinfo=startupinfo)</span><br><span class="line">        stdoutdata, stderrdata = stepVSARS.communicate()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> stepVSARS.returncode != <span class="number">0</span>:</span><br><span class="line">            msg = <span class="string">&quot;Error: Failed to raun vsvars32.bat&quot;</span></span><br><span class="line">            <span class="keyword">if</span> stdoutdata != <span class="literal">None</span>:</span><br><span class="line">                msg = msg + <span class="string">&quot;\nError Message: &quot;</span> + stdoutdata</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(msg)</span><br><span class="line">        <span class="keyword">if</span> stepVSARS.wait() != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(stderrdata.decode(<span class="string">&quot;mbcs&quot;</span>))</span><br><span class="line"></span><br><span class="line">    logClean = <span class="string">&quot;clean.txt&quot;</span></span><br><span class="line">    stepClean = sp.Popen([compilerExe, <span class="string">&quot;/clean&quot;</span>, compilArgs, slnPath, <span class="string">&quot;/OUT&quot;</span>, logClean ], stdout=sp.PIPE, stderr=sp.STDOUT, startupinfo=startupinfo)</span><br><span class="line">    stdoutdata, stderrdata = stepClean .communicate()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 省略部分</span></span><br></pre></td></tr></table></figure><p>可现实是这样的代码达不到预期的结果，根本原因在于：<strong>程序中，进程之间的数据是隔离的，内存空间是不能共享的，进程之间要进行数据通信必须借助其他手段。子进程的结果父进程获取不到，其他的子进程当然也无法得到。</strong></p><p>还会有疑问的地方可能是，<strong>可我们的问题焦点是系统的环境变量？</strong>程序中，每个进程都有自己的运行环境，这样的环境只能从父进程被继承到子进程中，而不能反向地从子进程传递到父进程。实际上，默认情况下subprocess模块下的Popen方法一直践行着这种规则，Popen方法有env这个参数，该参数用于指定子进程的环境变量，如果 env = None，子进程的环境变量将从父进程中继承。也就是说，如果环境变量不加修改，那么子进程的环境变量与父进程一致，与其他子进程也一致。由于环境变量传递的单向性，我们上述的初始修改代码是不能完成任务要求的。</p><p>既然常规方法不行，那就使用一个<strong>非常规</strong>的方式，我们可以使用被称为“<strong>外带数据</strong>”（out-of-band）的进程通讯方式，将子进程中环境变量的变化传递给父进程。</p><h3 id="最终修改"><a href="#最终修改" class="headerlink" title="最终修改"></a>最终修改</h3><p>针对初始修改中依旧存在的问题，我们再次对代码进行了修改。最终版本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略部分</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mCompile</span>(<span class="params">slnPath, compilArgs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;[summary]</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        slnPath ([type]): [description]</span></span><br><span class="line"><span class="string">        compilArgs ([type]): [description]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        RuntimeError: [description]</span></span><br><span class="line"><span class="string">        ValueError: [description]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    vvsvarsbatch = <span class="string">&quot;C://Porgamm Files (x86)//Microsoft Visual Studio XX.X/CommonX//Tools//vsvars32.bat&quot;</span></span><br><span class="line">    compilerExe = <span class="string">&quot;C://Porgamm Files (x86)//Microsoft Visual Studio XX.X/CommonX//IDE//devenv&quot;</span></span><br><span class="line">    startupinfo = sp.STARTUPINFO()</span><br><span class="line">    startupinfo.dwFlags |= sp.STARTF_USESHOWWINDOW</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> vsvarsbatch != <span class="string">&quot;&quot;</span>:  <span class="comment">#  run vsvars32.bat of visual studio</span></span><br><span class="line">        cmd = [vsvarsbatch, <span class="string">&#x27;&amp;&amp;&#x27;</span>, <span class="string">&#x27;set&#x27;</span>]</span><br><span class="line">        stepVSARS = sp.Popen(cmd, stdout=sp.PIPE, stderr=sp.STDOUT, startupinfo=startupinfo)</span><br><span class="line">        stdoutdata, stderrdata = stepVSARS.communicate()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> stepVSARS.returncode != <span class="number">0</span>:</span><br><span class="line">            msg = <span class="string">&quot;Error: Failed to raun vsvars32.bat&quot;</span></span><br><span class="line">            <span class="keyword">if</span> stdoutdata != <span class="literal">None</span>:</span><br><span class="line">                msg = msg + <span class="string">&quot;\nError Message: &quot;</span> + stdoutdata</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(msg)</span><br><span class="line">        <span class="keyword">if</span> stepVSARS.wait() != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(stderrdata.decode(<span class="string">&quot;mbcs&quot;</span>))</span><br><span class="line"></span><br><span class="line">        output = stdoutdata.decode(<span class="string">&quot;mbcs&quot;</span>).split(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">        dict_new_env = <span class="built_in">dict</span>((e[<span class="number">0</span>].upper(), e[<span class="number">1</span>]) <span class="keyword">for</span> e <span class="keyword">in</span> [p.rstrip().split(<span class="string">&quot;=&quot;</span>, <span class="number">1</span>) <span class="keyword">for</span> p <span class="keyword">in</span> output] <span class="keyword">if</span> <span class="built_in">len</span>(e) == <span class="number">2</span>)</span><br><span class="line">        os.environ.update(dict_new_env)</span><br><span class="line"></span><br><span class="line">    logClean = <span class="string">&quot;clean.txt&quot;</span></span><br><span class="line">    stepClean = sp.Popen([compilerExe, <span class="string">&quot;/clean&quot;</span>, compilArgs, slnPath, <span class="string">&quot;/OUT&quot;</span>, logClean ], stdout=sp.PIPE, stderr=sp.STDOUT, startupinfo=startupinfo)</span><br><span class="line">    stdoutdata, stderrdata = stepClean .communicate()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 省略部分</span></span><br></pre></td></tr></table></figure><p>在这次修改中，代码<strong>cmd = [vsvarsbatch]</strong> 变成了<strong>cmd = [vsvarsbatch, ‘&amp;&amp;’, ‘set’]**，因为vsvars32.bat脚本对环境变量的更新，是没有</strong>标准输出<strong>（stdout）的，即直接是看不到变化的，所以这里使用</strong>set<strong>，将子进程所有环境变量都打印到</strong>标准输出<strong>中，当</strong>组合命令**运行结束之后，在检查命令是否异常结束之后，通过stdoutdata获取set命令的标准输出，然后在将得到的标准输出转换为字典格式，再然后更新当前的环境变量，这样父进程中的环境变量得到了更新。之后代码中的子进程都会使用更新之后的环境变量，这样就达到了任务要求，解决了任务难题。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>个人认为，项目发生变化会带来新的问题，这并不意外。解决问题时，初始思考的不全面也是正常的，遇见问题认真分析仔细研究终究会找到解决问题的方法的。当然，解决一个问题的可以有很多不同的方法，上述方法也仅仅是一家之言，并非最优，若读者有别的思路也欢迎关注我的个人微信公众号，一起讨论学习。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">          版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，          转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。        </div>]]></content>
    
    <summary type="html">
    
      Python 如何在实现子进程到父进程的环境变量更新 access and control the system‘s environment variables
    
    </summary>
    
    
      <category term="Python 相关 - 8. Python 杂记" scheme="https://zicowarn.github.io/categories/Python-%E7%9B%B8%E5%85%B3-8-Python-%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="https://zicowarn.github.io/tags/Python/"/>
    
      <category term="杂记" scheme="https://zicowarn.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="系统变量" scheme="https://zicowarn.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F/"/>
    
      <category term="持续集成" scheme="https://zicowarn.github.io/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>Inno Setup 如何将.NET程序集（DLL）安装到GAC中</title>
    <link href="https://zicowarn.github.io/2020/07/13/inno-06-gacinstall/"/>
    <id>https://zicowarn.github.io/2020/07/13/inno-06-gacinstall/</id>
    <published>2020-07-13T10:11:08.000Z</published>
    <updated>2022-06-06T03:02:42.925Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>作者: Jim Wang 公众号: <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a> </p><h2 id="Inno-Setup-注册-Windows-中的COM程序集DLL"><a href="#Inno-Setup-注册-Windows-中的COM程序集DLL" class="headerlink" title="Inno Setup 注册 Windows 中的COM程序集DLL"></a>Inno Setup 注册 Windows 中的COM程序集DLL</h2><p>Inno Setup在设计程序安装包的时候，如果所需安装的文件中有DLL文件，而这些件又需要注册，一般情况下最容易想到且便于实施的，就是在**[Run]**段使用诸如下列的代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Filename: regsvr32; Parameters: &quot;/s &quot;</span><br><span class="line">&quot;&quot;&lt;FilePath&gt;\demo1.dll&quot;&quot;&quot;; WorkingDir: &#123;commonappdata&#125;; StatusMsg: Registering DLLs</span><br><span class="line"></span><br><span class="line">Filename: &#123;#DotNetRegistToolPath&#125;&#125;\regasm.exe; Parameters: &quot; &quot;&quot;&lt;FilePath&gt;\demo2.dll&quot;&quot; /codebase /verbose&quot;; WorkingDir: &quot;&#123;commonappdata&#125;&quot;; StatusMsg: Registering DLLs; Flags: 64bit runhidden waituntilterminated;</span><br></pre></td></tr></table></figure><p>代码中<strong>regsvr32</strong>和<strong>regasm.exe</strong>都是用来在Windows系统下注册DLL文件的，需要知道的是，不是所有的DLL都需要在Windwos系统中注册的，需要注册的只有COM（Compoment Object Modal，组件对象模型）组件。所谓的<strong>注册</strong>就是向注册表的相应位置写入一些数据，该数据一般包含GUID（Global Unique Identity）与DLL文件的绝对路径，且两者间一一对应。这里的GUID可以理解为COM对象的统一入口，应用在使用该COM组件的时候，就是在使用这个GUID，而不需要关注该DLL文件具体在哪。</p><p>注册COM组件是为了什么呢？COM的最大特点就是：<strong>复用</strong>。注册的核心目的就是为了代码复用，在Windows中，我们可以把DLL文件存放在一些公共位置（例如C：Windows\System32文件夹中）这样也可以实现相同的目的，但是这写公共位置的DLL可能由于加载机制的问题被先使用，就容易出问题，判断加载的是自己想要的DLL也比较困难，在此列出Windwos系统查找并加载DLL的顺序，如下：</p><blockquote><p>系统标准DLL查找顺序（非安全模式）：</p><ol><li>应用程序所在目录；</li><li>当前目录。GetCurrentDirectory返回的目录；</li><li>系统目录。<a href="http://msdn.microsoft.com/en-us/library/ms724373(v=vs.85).aspx"><strong>GetSystemDirectory</strong></a>返回的目录，通常是系统盘\Windows\System32；</li><li>16位系统目录。该项只是为了向前兼容的处理，可以不考虑；</li><li> Windows目录。<a href="http://msdn.microsoft.com/en-us/library/ms724454(v=vs.85).aspx"><strong>GetWindowsDirectory</strong></a>返回的目录，通常是系统盘\Windows；</li><li> 环境变量PATH中所有目录。</li></ol></blockquote><p><strong>Regsvr32</strong> 是用于注册COM组件的，具体的使用参数和注册机制和DLL内部的与注册相关的函数不在这里赘述。</p><p><strong>Regasm</strong>是.NET下注册COM组件的工具。因为Regsvr32不适用于注册.NET组件。可以理解为专为.NET设计的Regsvr32。</p><h2 id="全局程序集缓存GAC"><a href="#全局程序集缓存GAC" class="headerlink" title="全局程序集缓存GAC"></a>全局程序集缓存GAC</h2><p>GAC的全称是Global Assembly Cache，主要目的是存放一些公共的程序集。这样程序就可以从GAC中取得并使用程序集，而不需要将这些拷贝到应用程序的执行目录下面。换句话说，如果没有GAC的话，每个.NET的WinForm程序的目录下都有一份C:\WINDOWS\Microsoft.NET\Framework\<version>\System.Windows.Forms.dll的拷贝，这样既浪费存储空间也不利于升级和应用程序的版本控制。</version></p><p>在程序开发和测试阶段，可以使用.NET自带的工具gacutil.exe把程序集添加到GAC中和从GAC中删除出去，命令如下。在版本2.0的.NET中有一个名为Microsoft .NET Framework 2.0 Configuration的图形化界面GAC管理工具，也可以实现DLL在GAC中的安装与卸载，但该工具在之后的.NET版本中就不再存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gacutil /i &lt;path&gt;\sample.dll (参数 /i 是安装的意思 )</span><br><span class="line">gacutil /u sample.dll (参数 /u 是移除，不需要路径，仅DLL文件名即可 )</span><br></pre></td></tr></table></figure><p>需要注意的是，GAC中保存的都是强命名的程序集（Strong-named assemblies）。<strong>强命名</strong>的目的在于保持程序集的在系统中的唯一性。因为可能不同的公司会开发出具有相同名字的程序集，如果这样的程序集被复制到同一个目录内，最后一次安装的程序集会代替前面安装的，这就是著名的Windows “DLL Hell”问题。所以说，单单使用文件名，是不足以来区分程序集的，所以CLR（Common Language Runtime）就引入了一种新的程序集唯一标识机制，这就是所谓的强命名程序集。这样的程序集里会包含四个唯一标识：文件名（不带扩展名），版本号，语言文化信息（如果存在）和公有密钥，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“MyType, Version&#x3D;1.0.0.0, Culture&#x3D;neutral, PublicKeyToken&#x3D;af5779ac332fc045”</span><br></pre></td></tr></table></figure><p>可Windows中可以在Powershell中输入如下命令来看产DLL的上述四个标识:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">([<span class="type">system.reflection.assembly</span>]::loadfile(<span class="string">&quot;MyType.dll&quot;</span>)).FullName</span><br></pre></td></tr></table></figure><p>至于如何创建强命名的.NET程序集，在这儿就不再详细介绍了。想提示的是，.NET附带的有一名为sn.exe的工具。该工具可以对程序集进行签名，也可以查看已签名的程序集的公有密钥。</p><h2 id="Inno-Setup-安装强命名-NET程序集到GAC中"><a href="#Inno-Setup-安装强命名-NET程序集到GAC中" class="headerlink" title="Inno Setup 安装强命名.NET程序集到GAC中"></a>Inno Setup 安装强命名.NET程序集到GAC中</h2><p>Inno Setup 在程序安装过程中，可以使用类似在本文第一章节中介绍的添加一个**[Run]**字段的条目，通过使用gacutils工具，在程序安装完成后，在安装程序显示最终向导页面前，通过执行这个条目来实现强命名.NET程序集安装到GAC中。虽然这样可行，但在前面也说过，gacutils该工具在开发环境用起来还可以，如果到了生产环境，由于无法保证该工具在目标主机里也存在，所以这个方法失败风险很大。</p><p>另一个方法是使用名为<strong>gacinstall</strong>的标记（Flags），这样的标记常用在**[Files]**段里，需要注意的是Inno Setup在<a href="https://jrsoftware.org/files/is5.5-whatsnew.htm">5.3.0-beta (2009-04-22)</a>版和其以后的版本中才支持该标记，所以在使用标记时请检查Inno Setup的版本，以免出错。</p><p>使用该标记的时，可以在**[Files]<strong>添加如下条目内容。需要注意的是类似</strong>ignoreversion**标记的不应该在类似的条目中被使用，因为.NET的DLL应该是版本敏感的，不应该忽略版本的变化。</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; NOTE: Don<span class="string">&#x27;t use &quot;Flags: ignoreversion&quot; on any shared system files</span></span><br><span class="line"><span class="string">Source: &quot;Demo.dll&quot;; DestDir: &quot;&#123;app&#125;&quot;; StrongAssemblyName: &quot;Demo, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A, ProcessorArchitecture=MSIL&quot;; Flags: &quot;gacinstall sharedfile uninsnosharedfileprompt&quot;</span></span><br></pre></td></tr></table></figure><p>StrongAssemblyName关键字后面的内容就是上文提到的强命名程序的四个唯一标识。<strong>sharefile</strong>标记用于更新相关注册表信息，切勿略去。<strong>uninsnosharedfileprompt</strong>标记是为了保证在卸载该共享文件时，如果其引用计数为零，则自动删除文件，而不需要询问用户。 该标记必须与<strong>sharefile</strong>标志结合使用才能生效。</p><h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><p>.NET 3.5 版本及之前版本 GAC 路径在： C:\windows\Assembly</p><p>.NET 4.0 版本及之后版本 GAC 路径在：C:\Windows\Microsoft.Net\version\</p><p>文章中介绍了很多背景知识，仅最后一部分是才是文章中心内容。这些背景知识是自己在完成该项任务的一开始具有的疑问，进而在茫茫文海中查阅，再收集整理成文的，这利于自己，也方便你我。如果你有问题或者不同的见解，欢迎关注我的微信公众号，然后留言讨论。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">          版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，          转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。        </div>]]></content>
    
    <summary type="html">
    
      Inno Setup 将.NET程序集安装到GAC中
    
    </summary>
    
    
      <category term="Inno Setup 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/Inno-Setup-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Inno Setup" scheme="https://zicowarn.github.io/tags/Inno-Setup/"/>
    
      <category term=".NET" scheme="https://zicowarn.github.io/tags/NET/"/>
    
      <category term="GAC" scheme="https://zicowarn.github.io/tags/GAC/"/>
    
      <category term="COM" scheme="https://zicowarn.github.io/tags/COM/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 中特殊纯文本字符串引起异常</title>
    <link href="https://zicowarn.github.io/2020/02/25/hexo-01-code-raise-error/"/>
    <id>https://zicowarn.github.io/2020/02/25/hexo-01-code-raise-error/</id>
    <published>2020-02-25T00:11:08.000Z</published>
    <updated>2020-08-25T03:13:46.664Z</updated>
    
    <content type="html"><![CDATA[<p>作者: Jim Wang 公众号: <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><p>在转移自己的文章的时候发现了一个很有意思的事情，现在记录下来，咱们一起看看问题在哪。问题是这样的的，我之前的文章有如下文字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExtractTemporaryFile(<span class="string">&#x27;&#123;#DotNetFrameWorkWebInstaller&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如果上述字符以纯文本的形式，即非代码样式和引用样式存在于md文件中，如果这时尝试使用hexo s命令的话，就会有如下异常被抛出。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">someone@somenode-Pro TestBlog % hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Template render error: (unknown path)</span></span><br><span class="line"><span class="string">  Error: expected end of comment, got end of file</span></span><br><span class="line"><span class="string">    at Object._prettifyError (/Users/someone/workspace/TestBlog/node_modules/nunjucks/src/lib.js:36:11)</span></span><br><span class="line"><span class="string">    at Template.render (/Users/someone/workspace/TestBlog/node_modules/nunjucks/src/environment.js:536:21)</span></span><br><span class="line"><span class="string">    at Environment.renderString (/Users/someone/workspace/TestBlog/node_modules/nunjucks/src/environment.js:378:17)</span></span><br><span class="line"><span class="string">    at /Users/someone/workspace/TestBlog/node_modules/hexo/lib/extend/tag.js:120:48</span></span><br><span class="line"><span class="string">    at tryCatcher (/Users/someone/workspace/TestBlog/node_modules/bluebird/js/release/util.js:16:23)</span></span><br><span class="line"><span class="string">    at Function.Promise.fromNode.Promise.fromCallback (/Users/someone/workspace/TestBlog/node_modules/bluebird/js/release/promise.js:209:30)</span></span><br><span class="line"><span class="string">    at Tag.render (/Users/someone/workspace/TestBlog/node_modules/hexo/lib/extend/tag.js:120:18)</span></span><br><span class="line"><span class="string">    at Object.onRenderEnd (/Users/someone/workspace/TestBlog/node_modules/hexo/lib/hexo/post.js:291:22)</span></span><br><span class="line"><span class="string">    at /Users/someone/workspace/TestBlog/node_modules/hexo/lib/hexo/render.js:79:21</span></span><br><span class="line"><span class="string">    at tryCatcher (/Users/someone/workspace/TestBlog/node_modules/bluebird/js/release/util.js:16:23)</span></span><br><span class="line"><span class="string">    at Promise._settlePromiseFromHandler (/Users/someone/workspace/TestBlog/node_modules/bluebird/js/release/promise.js:547:31)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise (/Users/someone/workspace/TestBlog/node_modules/bluebird/js/release/promise.js:604:18)</span></span><br><span class="line"><span class="string">    at Promise._settlePromise0 (/Users/someone/workspace/TestBlog/node_modules/bluebird/js/release/promise.js:649:10)</span></span><br><span class="line"><span class="string">    at Promise._settlePromises (/Users/someone/workspace/TestBlog/node_modules/bluebird/js/release/promise.js:729:18)</span></span><br><span class="line"><span class="string">    at _drainQueueStep (/Users/someone/workspace/TestBlog/node_modules/bluebird/js/release/async.js:93:12)</span></span><br><span class="line"><span class="string">    at _drainQueue (/Users/someone/workspace/TestBlog/node_modules/bluebird/js/release/async.js:86:9)</span></span><br><span class="line"><span class="string">    at Async._drainQueues (/Users/someone/workspace/TestBlog/node_modules/bluebird/js/release/async.js:102:5)</span></span><br><span class="line"><span class="string">    at Immediate.Async.drainQueues (/Users/someone/workspace/TestBlog/node_modules/bluebird/js/release/async.js:15:14)</span></span><br><span class="line"><span class="string">    at processImmediate (internal/timers.js:456:21)</span></span><br></pre></td></tr></table></figure><p>上述异常信息中，重点为Template render error: (unknown path)。应该是，Markdown文件在渲染成html时，<strong>ExtractTemporaryFile</strong>被视为代码了，而如果修改括号中的参数值为空，异常就不存在了，如下纯文本：</p><p>ExtractTemporaryFile(‘’);</p><p>确实非常有意思。我了如下的文本，也同样会抛出相同的异常。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render(<span class="string">&#x27;&#123;#DotNetFrameWorkWebInstaller&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果试一试一个随意的函数名称呢？比如hello这个作为函数的姓名，如下，一样会抛出异常。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello(<span class="string">&#x27;&#123;#DotNetFrameWorkWebInstaller&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样的话问题应该位于参数部分，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;#DotNetFrameWorkWebInstaller&#125;</span><br></pre></td></tr></table></figure><p>我也做了尝试，如果上述内容作为纯文本出现在Markdown文件内，则会抛出异常。那么如果换个变量名字呢？比如，newparams，即参数部分如下，一行会抛出异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;#newparams&#125;</span><br></pre></td></tr></table></figure><p>问题在于#这个符号，#后面跟着英文字符就会被理解成<strong>锚点</strong>了。该错误与圆括号有关，即Markdown文件中任何以：<strong>左圆括号 + #号 + 英文字符</strong> 形式存在的纯文本字符串都会引发上述异常（右侧圆括号可以不存在，例如，下列的字符若以纯文本存在就会引发异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;#dedee</span><br></pre></td></tr></table></figure><p>目前找到的解决方法为在#号前输入两个\ 反斜杠。但是渲染后，还会存在一个反斜杠，所以要额外对此进行说明。感兴趣关注微信公众号，一起讨论学习。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">          版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，          转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。        </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Jim Wang 公众号: &lt;a class=&quot;main-button-link&quot; href=&quot;#wechat&quot; rel=&quot;noopener&quot;&gt;巴博萨船长&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在转移自己的文章的时候发现了一个很有意思的事情，现在记录下来，咱们一起看看问题在哪。问题是这样的的，我之前的文章有如下文字&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ExtractTemporaryFile(&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#123;#DotNetFrameWorkWebInstaller&amp;#125;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果上述字符以纯文本的形式，即非代码样式和引用样式存在于md文件中，如果这时尝试使用hexo s命令的话，就会有如下异常被抛出。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/Hexo-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Hexo" scheme="https://zicowarn.github.io/tags/Hexo/"/>
    
      <category term="异常处理" scheme="https://zicowarn.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Inno Setup 如何更换向导页面标题部分的背景</title>
    <link href="https://zicowarn.github.io/2019/08/10/inno-05-beautify-wizard-laben/"/>
    <id>https://zicowarn.github.io/2019/08/10/inno-05-beautify-wizard-laben/</id>
    <published>2019-08-10T00:11:08.000Z</published>
    <updated>2021-08-19T07:17:01.514Z</updated>
    
    <content type="html"><![CDATA[<p>作者: Jim Wang 公众号: <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><p>开发部领导新的要求，希望在产品安装包的向导页面做些美化。比如，显示公司的logo在向导页面的标题部分。</p><a id="more"></a><p><img src="/2019/08/10/inno-05-beautify-wizard-laben/inno-label-part.png"></p><p>所谓标题即Label部分就是上图中红色方格标注的部分。 标注部分右侧是logo图标。</p><h3 id="1-初探，如何更换logo部分"><a href="#1-初探，如何更换logo部分" class="headerlink" title="1. 初探，如何更换logo部分"></a>1. 初探，如何更换logo部分</h3><p>Inno Setup开发文档里里有介绍如何更换Label中右侧的logo的方法。可以通过在**[Setup]**可以定义<code>WizardSmallImageFile</code>=”logo文件路径”来实现。但其要求的logo图片都是长宽相等的。长款不等的图片在显示会被拉伸，其效果惨不忍睹。该选项支持多重文件，即:你可以一次定义多个分辨率的logo文件，Inno Setup在安装的时候会根据系统当前的DPI设置，来自动选择合适分辨率的图片。多重定义的方法如下：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">WizardSmallImageFile=mysmallimage.bmp,mysmallimage2.bmp</span><br></pre></td></tr></table></figure><p>Logo文件分辨率要求如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">100%55x55</span><br><span class="line">125%64x68</span><br><span class="line">150%83x80</span><br><span class="line">175%92x97</span><br><span class="line">200%110x106</span><br><span class="line">225%119x123</span><br><span class="line">250%138x140</span><br></pre></td></tr></table></figure><p>图片被拉伸通常发生在以下两种情况，一、显示器的设置发生了变化。二、Inno Setup向导页面被设定未可缩放。向导页面的缩放可以通过<code>WizardSizePercen</code>和<code>WizardResizable</code>。<code>WizardSizePercent</code>的合法值为从100值150。该参数的目的是允许你在不改变文字大小的前提下等比例缩放所以的安装和卸载向导页面。150意思是缩放为默认大小的150%，即增到50%。这里<code>WizardResizable</code>的合法值为yes和no，而当<code>WizardStyle</code>（其合法值为classic和modern）被设置为modern的时候，就默认为<code>WizardResizable</code>的值为yes，也同时默认为<code>WizardSizePercen</code>为120%。具体解释可以查看Inno Setup的官方文档。</p><h3 id="2-深入，如何得到当前的显示器的DPI"><a href="#2-深入，如何得到当前的显示器的DPI" class="headerlink" title="2. 深入，如何得到当前的显示器的DPI"></a>2. 深入，如何得到当前的显示器的DPI</h3><p>上文说到，图片的拉伸除了与向导页面有关，与系统的显示设置也相关，那如何得到当前显示的DPI呢？在Win7之前的系统中，要得到当前显示器的DPI，在Inno Setup的**[Code]**部分可以使用<code>TGraphicsObject.PixelsPerInch</code> 这个属性得到当前系统显示器设定的DPI。TGraphicsObject 这里有个小例子，代码如下：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">CheckDPI</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  CurrentDPI, StandardDPI, MediumDPI, LargeDPI: Integer;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">&#123; Get the current DPI, 从向导页面的字体中得到当前的DPI &#125;</span> </span><br><span class="line">  CurrentDPI  := WizardForm.Font.PixelsPerInch;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">&#123; Store defaults determined from Windows DPI settings &#125;</span></span><br><span class="line">  StandardDPI := <span class="number">96</span>;  <span class="comment">&#123; 100% &#125;</span></span><br><span class="line">  MediumDPI   := <span class="number">120</span>; <span class="comment">&#123; 125% &#125;</span></span><br><span class="line">  LargeDPI    := <span class="number">144</span>; <span class="comment">&#123; 150% &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (CurrentDPI &gt;= StandardDPI) <span class="keyword">and</span> (CurrentDPI &lt; MediumDPI) <span class="keyword">then</span> </span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">&#123; Execute some custom code for small to medium DPI &#125;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (CurrentDPI &gt;= MediumDPI) <span class="keyword">and</span> (CurrentDPI &lt; LargeDPI) <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">&#123; Execute some custom code for medium to large DPI &#125;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (CurrentDPI &gt;= LargeDPI) <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">&#123; Execute some custom code for large DPI or above &#125;</span></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>从Inno Setup 的5.6的版本开始，在多重定义的时候，Inno Setup就会根据当前DPI自动选择图片大小。这个自动选择是如何实现的呢。 下面的代码就使用了<code>PixelsPerInch</code>这个属性，并尝试模拟了自动选择这部分功能。</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[Setup]</span><br><span class="line">; Use <span class="number">100</span>% images by <span class="keyword">default</span></span><br><span class="line">WizardImageFile=WizardImage <span class="number">100</span>.bmp</span><br><span class="line">WizardSmallImageFile=WizardSmallImage <span class="number">100</span>.bmp</span><br><span class="line"></span><br><span class="line">[Files]</span><br><span class="line">; Embed all other sizes <span class="keyword">to</span> the installer</span><br><span class="line">Source: &quot;WizardImage *.bmp&quot;; Excludes: &quot;* 100.bmp&quot;; Flags: dontcopy</span><br><span class="line">Source: &quot;WizardSmallImage *.bmp&quot;; Excludes: &quot;* 100.bmp&quot;; Flags: dontcopy</span><br><span class="line"></span><br><span class="line">[Code]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetScalingFactor</span>:</span> Integer;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> WizardForm.Font.PixelsPerInch &gt;= <span class="number">192</span> <span class="keyword">then</span> Result := <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> WizardForm.Font.PixelsPerInch &gt;= <span class="number">144</span> <span class="keyword">then</span> Result := <span class="number">150</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> WizardForm.Font.PixelsPerInch &gt;= <span class="number">120</span> <span class="keyword">then</span> Result := <span class="number">125</span></span><br><span class="line">    <span class="keyword">else</span> Result := <span class="number">100</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">LoadEmbededScaledBitmap</span><span class="params">(Image: TBitmapImage; NameBase: <span class="keyword">string</span>)</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  <span class="keyword">Name</span>: <span class="keyword">String</span>;</span><br><span class="line">  FileName: <span class="keyword">String</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">Name</span> := Format(<span class="string">&#x27;%s %d.bmp&#x27;</span>, [NameBase, GetScalingFactor]);</span><br><span class="line">  ExtractTemporaryFile(<span class="keyword">Name</span>);</span><br><span class="line">  FileName := ExpandConstant(<span class="string">&#x27;&#123;tmp&#125;\&#x27;</span> + <span class="keyword">Name</span>);</span><br><span class="line">  Image.Bitmap.LoadFromFile(FileName);</span><br><span class="line">  DeleteFile(FileName);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">InitializeWizard</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">&#123; If using larger scaling, load the correct size of images &#125;</span></span><br><span class="line">  <span class="keyword">if</span> GetScalingFactor &gt; <span class="number">100</span> <span class="keyword">then</span> </span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    LoadEmbededScaledBitmap(WizardForm.WizardBitmapImage, <span class="string">&#x27;WizardImage&#x27;</span>);</span><br><span class="line">    LoadEmbededScaledBitmap(WizardForm.WizardBitmapImage2, <span class="string">&#x27;WizardImage&#x27;</span>);</span><br><span class="line">    LoadEmbededScaledBitmap(WizardForm.WizardSmallBitmapImage, <span class="string">&#x27;WizardSmallImage&#x27;</span>);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>那么有没有在不用重复定义，仅用一张图片然后根据当前的DPI来进行人为的缩放，也能达到良好的显示效果呢，当然有，方法如下：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">  CustomPage: TWizardPage;</span><br><span class="line">  BtnImage: TBitmapImage;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">InitializeWizard</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  CustomPage := CreateCustomPage(wpLicense, <span class="string">&#x27;Heading&#x27;</span>, <span class="string">&#x27;Sub heading.&#x27;</span>);</span><br><span class="line">  ExtractTemporaryFile(<span class="string">&#x27;image.bmp&#x27;</span>);</span><br><span class="line">  BtnImage := TBitmapImage.Create(WizardForm); <span class="comment">//在当前页面即wpLicense页面创建一个Image按钮。</span></span><br><span class="line">  <span class="keyword">with</span> BtnImage <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      Parent := CustomPage.Surface;</span><br><span class="line">      Bitmap.LoadFromFile(ExpandConstant(<span class="string">&#x27;&#123;tmp&#125;&#x27;</span>)+<span class="string">&#x27;\image.bmp&#x27;</span>);</span><br><span class="line">      AutoSize := True;</span><br><span class="line">      AutoSize := False;  <span class="comment">// 缩放之前 关系BtnImage的自由大小属性</span></span><br><span class="line">      Height := ScaleX(Height); <span class="comment">// 然后根据当前BtnImage的大小进行缩放</span></span><br><span class="line">      Width := ScaleY(Width);</span><br><span class="line">      Stretch := True;</span><br><span class="line">      Left := ScaleX(<span class="number">90</span>);</span><br><span class="line">      Top := WizardForm.SelectTasksPage.Top + WizardForm.SelectTasksPage.Height -</span><br><span class="line">             Height - ScaleY(<span class="number">8</span>);</span><br><span class="line">      Cursor := crHand;</span><br><span class="line">      OnClick := @ImageOnClick;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h3 id="3-进阶，Win8之后新系统得到当前的显示器的DPI"><a href="#3-进阶，Win8之后新系统得到当前的显示器的DPI" class="headerlink" title="3. 进阶，Win8之后新系统得到当前的显示器的DPI"></a>3. 进阶，Win8之后新系统得到当前的显示器的DPI</h3><p>由于Windows 8.1之后的系统中，用户可以调整每个监视器的DPI缩放比例，并且Font.PixelsPerInch始终为主监视器返回DPI值，因此<strong>第2节</strong>中的方法就不在适用新的系统了。如果在多显示多DPI的复杂环境中，<strong>第2节</strong>中的方法表现的也不尽如人意。某些时候，可以监听WM_DPICHANGED事件，然后手动并使窗口适应变化的DPI（但此更改可以只是将窗口移动到具有不同DPI设置的监视器）。而 要获取某个窗口的DPI，就需要考虑别的解决方案了。我在网上找到了相关的介绍，但是我当前的项目中不需要这些，也就没对代码进行测试。感兴趣的朋友可以自己尝试一下，代码如下：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">[Code]</span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">  S_OK = <span class="number">$00000000</span>;</span><br><span class="line">  LOGPIXELSY = <span class="number">90</span>;</span><br><span class="line">  MONITOR_DEFAULTTONULL = <span class="number">$00000000</span>;</span><br><span class="line">  MONITOR_DEFAULTTOPRIMARY = <span class="number">$00000001</span>;</span><br><span class="line">  MONITOR_DEFAULTTONEAREST = <span class="number">$00000002</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  HDC = THandle;</span><br><span class="line">  HMONITOR = THandle;</span><br><span class="line">  MONITOR_DPI_TYPE = (</span><br><span class="line">    MDT_EFFECTIVE_DPI,</span><br><span class="line">    MDT_ANGULAR_DPI,</span><br><span class="line">    MDT_RAW_DPI</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">  MDT_DEFAULT = MDT_EFFECTIVE_DPI;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetDC</span><span class="params">(hWnd: HWND)</span>:</span> HDC;</span><br><span class="line">  <span class="keyword">external</span> <span class="string">&#x27;GetDC@user32.dll stdcall&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReleaseDC</span><span class="params">(hWnd: HWND; hDC: HDC)</span>:</span> Integer;</span><br><span class="line">  <span class="keyword">external</span> <span class="string">&#x27;ReleaseDC@user32.dll stdcall&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetDeviceCaps</span><span class="params">(hdc: HDC; <span class="keyword">index</span>: Integer)</span>:</span> Integer;</span><br><span class="line">  <span class="keyword">external</span> <span class="string">&#x27;GetDeviceCaps@gdi32.dll stdcall&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MonitorFromWindow</span><span class="params">(hwnd: HWND; dwFlags: DWORD)</span>:</span> HMONITOR;</span><br><span class="line">  <span class="keyword">external</span> <span class="string">&#x27;MonitorFromWindow@user32.dll stdcall&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetDpiForMonitor</span><span class="params">(hmonitor: HMONITOR; dpiType: MONITOR_DPI_TYPE;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">out</span> dpiX: UINT; <span class="keyword">out</span> dpiY: UINT)</span>:</span> HRESULT;</span><br><span class="line">  <span class="keyword">external</span> <span class="string">&#x27;GetDpiForMonitor@shcore.dll stdcall delayload&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsWindows81OrLater</span>:</span> Boolean;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  Result := GetWindowsVersion &gt;= <span class="number">$06030000</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetPrimaryMonitorDPI</span>:</span> Integer;</span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  DC: HDC;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">// no need for try..finally block here; just get the desktop DC handle,</span></span><br><span class="line">  <span class="comment">// get the DPI and release the obtained handle</span></span><br><span class="line">  DC := GetDC(<span class="number">0</span>);</span><br><span class="line">  Result := GetDeviceCaps(DC, LOGPIXELSY);</span><br><span class="line">  ReleaseDC(<span class="number">0</span>, DC);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetWindowMonitorDPI</span><span class="params">(Handle: HWND)</span>:</span> Integer;</span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  HorzDPI: UINT;</span><br><span class="line">  VertDPI: UINT;</span><br><span class="line">  Monitor: HMONITOR;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">// if we&#x27;re not on at least Windows 8.1, then return the primary monitor</span></span><br><span class="line">  <span class="comment">// DPI since earlier systems did not allow per monitor DPI settings</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> IsWindows81OrLater <span class="keyword">then</span></span><br><span class="line">    Result := GetPrimaryMonitorDPI</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="comment">// otherwise determine which monitor the given window intersects and try</span></span><br><span class="line">  <span class="comment">// to get DPI settings of the found monitor (if any; check MSDN docs for</span></span><br><span class="line">  <span class="comment">// the explanation and other options how to find the nearest monitor)</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">// try to get the monitor which the window intersects</span></span><br><span class="line">    Monitor := MonitorFromWindow(Handle, MONITOR_DEFAULTTONULL);</span><br><span class="line">    <span class="comment">// if there&#x27;s any, then...</span></span><br><span class="line">    <span class="keyword">if</span> Monitor &lt;&gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="comment">// try to get DPI for that monitor; if it succeeds, return the value,</span></span><br><span class="line">      <span class="comment">// raise an exception otherwise (for details check the MSDN docs)</span></span><br><span class="line">      <span class="keyword">if</span> GetDpiForMonitor(Monitor, MDT_DEFAULT, HorzDPI, VertDPI) = S_OK <span class="keyword">then</span></span><br><span class="line">        Result := VertDPI</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        RaiseException(<span class="string">&#x27;GetDpiForMonitor function call failed!&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      RaiseException(<span class="string">&#x27;The given window does not intersect any monitor!&#x27;</span>);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>这是Windows SDK中介绍的方法，整个设计相对来说比较复杂。简单来说，将上述代码加入你的项目中，当你需要显示器的DPI的时候就调用<code>GetWindowMonitorDPI</code>函数，然后根据DPI结合<strong>第2节</strong>中的方法来缩放或者选择你要显示的图片。</p><h3 id="4-回到项目，更换向导页面标题部分的背景"><a href="#4-回到项目，更换向导页面标题部分的背景" class="headerlink" title="4. 回到项目，更换向导页面标题部分的背景"></a>4. 回到项目，更换向导页面标题部分的背景</h3><p>上述的内容，也是我再寻找解决新需求的过程中，搜集和整理的部分内容，记录下来也是为了以后需要的时候知道应该向那个方向努力。我告诉开发主管的是，我个人不建议将我们安装应用程序的向导页面设置为可缩放，因为这样需要做出的改变特别多，而且当前的大小也能满足使用需求。但美化工作不能少，第一步的任务核心就是页面简介背景部分，代码如下：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[Files]</span><br><span class="line">Source: &quot;Logo-header.bmp&quot;; Flags: dontcopy</span><br><span class="line"></span><br><span class="line">[Code]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">InitializeWizard</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  BitmapImage: TBitmapImage;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  ExtractTemporaryFile(<span class="string">&#x27;Logo-header.bmp&#x27;</span>);</span><br><span class="line">  BitmapImage := TBitmapImage.Create(WizardForm);</span><br><span class="line">  BitmapImage.Parent := WizardForm.MainPanel;</span><br><span class="line">  BitmapImage.Width := WizardForm.MainPanel.Width;</span><br><span class="line">  BitmapImage.Height := WizardForm.MainPanel.Height;</span><br><span class="line">  BitmapImage.Stretch := True;</span><br><span class="line">  BitmapImage.AutoSize := False;</span><br><span class="line">  BitmapImage.Bitmap.LoadFromFile(ExpandConstant(<span class="string">&#x27;&#123;tmp&#125;\Logo-header.bmp&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 禁用 原始页面的小图标</span></span><br><span class="line">  WizardForm.WizardSmallBitmapImage.Visible := False;</span><br><span class="line">  <span class="comment">// 启用 页面简介标题</span></span><br><span class="line">  WizardForm.PageDescriptionLabel.Visible := True;</span><br><span class="line">  <span class="comment">// 启用 页面名称标题</span></span><br><span class="line">  WizardForm.PageNameLabel.Visible := True;</span><br><span class="line">  <span class="comment">// 限定页面简介标题宽度</span></span><br><span class="line">  WizardForm.PageDescriptionLabel.Width :=</span><br><span class="line">    WizardForm.PageDescriptionLabel.Width - ScaleX(<span class="number">120</span>);</span><br><span class="line">  <span class="comment">// 限定页面名称标题宽度</span></span><br><span class="line">  WizardForm.PageNameLabel.Width :=</span><br><span class="line">    WizardForm.PageNameLabel.Width - ScaleX(<span class="number">120</span>)</span><br><span class="line"> <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>上述代码的核心思想就是，准备一张图片，该图片并不会被拷贝在目标文件夹中，在页面初始的时候，设定页面标题简述部分的背景，由于原始页面小logo被禁用，就需要缩进标题名称和简介文本的宽度，防止其覆盖图片的部分内容。</p><p><img src="/2019/08/10/inno-05-beautify-wizard-laben/inno-welcome-part.png" alt="image-20200220170839898"></p><p>任务第二部分内容，就是更改欢迎页面的背景图片，即上图中红色部分框选的地方。首先在**[Setup]<strong>中定义属性为<a href="http://www.jrsoftware.org/ishelp/index.php?topic=setup_disablewelcomepage"><code>DisableWelcomePage=no</code></a>，意指启用欢迎页面。 然后在</strong>[Setup]<strong>部分定义<code>WizardBitmapImage</code>属性即可。结束页面（下图）与开始页面相似，只需在</strong>[Setup]**部分定义<code>WizardBitmapImage2</code> 属性即可。</p><p><img src="/2019/08/10/inno-05-beautify-wizard-laben/inno-finish-part.png" alt="image-20200220170935862"></p><p>需要说明的是，如果属性<code>WizardBitmapImage2</code>为被定义，而属性<code>WizardBitmapImage</code>被定义，则结束页面会选择<code>WizardBitmapImage</code>中定义的图片作为上图中红色部分圈选的背景图片。</p><h3 id="5-扩展，欢迎页面和结束页面整页照片"><a href="#5-扩展，欢迎页面和结束页面整页照片" class="headerlink" title="5. 扩展，欢迎页面和结束页面整页照片"></a>5. 扩展，欢迎页面和结束页面整页照片</h3><p>我们在<strong>第4节</strong>部分，了解了如何在使用Inno Setup的属性设定，更改欢迎和结束页面的左侧背景图片，那么有没有一种可能，即省去这两个页面的文字（通常需要考虑翻译的问题），直接使用一张图片作为整个页面的背景呢？有，本节我们就探索一下。中心思想为四部：</p><ul><li>在各自的父页面上拉伸“ WizardBitmapImage”（欢迎）和“ WizardBitmapImage2”（完成），因为这两个页面都有图片部分，就不需要再初始化TBitmapImage了。</li><li>隐藏其它内容，例如 标题和段落.</li><li>确保安装程序永远不需要重新启动计算机，否则会在结束图片上会显示上重新启动提示。</li><li>请确保在**[Run]**部分中没有任何<code>postinstall</code>条目。否则结束页面上也会显示提示信息。</li></ul><p><img src="/2019/08/10/inno-05-beautify-wizard-laben/inno-finish-part-full.png" alt="image-20200220171021313"></p><p>实现这部分的代码如下：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[Setup]</span><br><span class="line">DisableWelcomePage=no</span><br><span class="line">WizardImageFile=Demo.bmp  <span class="comment">// 如果WizardImageFile2 没定义则结束页面也使用该图片</span></span><br><span class="line"></span><br><span class="line">[Code]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">InitializeWizard</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">// 欢迎页面</span></span><br><span class="line">  <span class="comment">// 隐藏 部分内容</span></span><br><span class="line">  WizardForm.WelcomeLabel1.Visible := False;</span><br><span class="line">  WizardForm.WelcomeLabel2.Visible := False;</span><br><span class="line">  <span class="comment">// 拉伸页面宽度</span></span><br><span class="line">  WizardForm.WizardBitmapImage.Width := WizardForm.WizardBitmapImage.Parent.Width;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 结束页面</span></span><br><span class="line">  <span class="comment">// 隐藏 部分内容</span></span><br><span class="line">  WizardForm.FinishedLabel.Visible := False;</span><br><span class="line">  WizardForm.FinishedHeadingLabel.Visible := False;</span><br><span class="line">  <span class="comment">// 拉伸页面宽度</span></span><br><span class="line">  WizardForm.WizardBitmapImage2.Width := WizardForm.WizardBitmapImage2.Parent.Width;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h3 id="6-扩展2，在向导页脚左侧显示版本号"><a href="#6-扩展2，在向导页脚左侧显示版本号" class="headerlink" title="6. 扩展2，在向导页脚左侧显示版本号"></a>6. 扩展2，在向导页脚左侧显示版本号</h3><p>需要的显示结果如下图所示：</p><p><img src="/2019/08/10/inno-05-beautify-wizard-laben/inno-bottom-left-part.png" alt="image-20200221093833941"></p><p>代码如下：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[Code]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">InitializeWizard</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  VersionLabel: TNewStaticText;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">// 定义一个静态文本实例</span></span><br><span class="line">  VersionLabel := TNewStaticText.Create(WizardForm);</span><br><span class="line">  <span class="comment">// 从Setup部分的设定中获取版本号</span></span><br><span class="line">  VersionLabel.Caption := Format(<span class="string">&#x27;Version: %s&#x27;</span>, [<span class="string">&#x27;&#123;#SetupSetting(&quot;AppVersion&quot;)&#125;&#x27;</span>]);</span><br><span class="line">  <span class="comment">// 所有页面有效</span></span><br><span class="line">  VersionLabel.Parent := WizardForm;</span><br><span class="line">  <span class="comment">// 左侧位置</span></span><br><span class="line">  VersionLabel.Left := ScaleX(<span class="number">16</span>);</span><br><span class="line">  <span class="comment">// 保证 文本与按钮的 在水平方向 中心对齐</span></span><br><span class="line">  VersionLabel.Top :=</span><br><span class="line">    WizardForm.BackButton.Top +</span><br><span class="line">    (WizardForm.BackButton.Height <span class="keyword">div</span> <span class="number">2</span>) -</span><br><span class="line">    (VersionLabel.Height <span class="keyword">div</span> <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>对齐的方式，以按钮的左上位置为基点，加上按钮高度与文本高度之差即可。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">          版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，          转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。        </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Jim Wang 公众号: &lt;a class=&quot;main-button-link&quot; href=&quot;#wechat&quot; rel=&quot;noopener&quot;&gt;巴博萨船长&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开发部领导新的要求，希望在产品安装包的向导页面做些美化。比如，显示公司的logo在向导页面的标题部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Inno Setup 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/Inno-Setup-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Inno Setup" scheme="https://zicowarn.github.io/tags/Inno-Setup/"/>
    
  </entry>
  
  <entry>
    <title>Inno Setup Windows 注册表关键字HKEY\_CLASSES\_ROOT相关内容</title>
    <link href="https://zicowarn.github.io/2019/07/10/inno-04-registry-hcr/"/>
    <id>https://zicowarn.github.io/2019/07/10/inno-04-registry-hcr/</id>
    <published>2019-07-10T00:11:08.000Z</published>
    <updated>2020-08-25T03:13:03.272Z</updated>
    
    <content type="html"><![CDATA[<p>作者: Jim Wang 公众号: <a class="main-button-link" href="#wechat" rel="noopener">巴博萨船长</a></p><h2 id="Windows-注册表"><a href="#Windows-注册表" class="headerlink" title="Windows 注册表"></a>Windows 注册表</h2><p>HKEY_CLASSES_ROOT在此关键字之下，可以看见有一个CLSID关键字。在CLSID关键字之下列有系统中安装的所有组件的CLSID。注册表CLSID是一个具有如下格式的串：00000010-0000-0010-8000-00AA00D2EA4</p><a id="more"></a><p>HKEY_CLASSES_ROOT的开头，列出了将是各种应用程序所注册的文件扩展名。在扩展名之后，可以看到许多其它的名字。此类名字大多数被称作是ProgID，表示是程序员定义的标识符。某些名称表示的不是ProgID而实一些特殊的关键字。</p><p>如：</p><ul><li>CLSID</li><li>AppID，此关键字下的子关键字的作用是将某个APPID（应用程序的ID）映射成某个远程服务器名称。分式COM（DCOM）将用到此关键字。</li><li>组件类别，注册表的这一分支可以将CATID（组件类别ID）映射成某个特定的组件类别。</li><li>Interface，此关键字将用于将IID映射成某个接口相关的信息。这些信息主要用于在跨进程边界使用接口的情况。</li><li>Licenses，保存的是授权使用COM组件的一些认可信息。</li><li>TypeLib，类型库关键字保存的是关于接口成员函数所用的参数的信息。另外还有一些信息。此关键字可以将一个LIBID映射成存储类型库的文件名称。</li></ul><h3 id="ProgID"><a href="#ProgID" class="headerlink" title="ProgID"></a>ProgID</h3><p>所谓ProgID指的是程序员给某个CLSID指定的一个程序员易记的名称。ProgID命名规则为：..，如下图：</p><p>如WPDSp.WPDServiceProvider是版本无关ProgID，根据其值可在CLSID下找到相应键，进而找到相应信息，如组件最新版本信息。</p><p>WPDSp.WPDServiceProvider.1是版本相关ProgID，根据其CLSID值可以找到该版本组件的信息。</p><h3 id="ProgID注册表格式"><a href="#ProgID注册表格式" class="headerlink" title="ProgID注册表格式"></a>ProgID注册表格式</h3><p>ProgID及与版本无关的ProgID被列在组件CLSID下面。</p><p>ProgID的主要作用是获取相应的CLSID。在每一个CLSID项中查找查个ProgID将非常低效的。因此在其下面也将直接列出ProgID。由于ProgID不是针对最终用户而定义的，因此ProgID关键字的缺省值为用户易记的名称。在之下有一个名为CLSID的关键字，其缺省值为组件的CLSID。如下图所示：</p><p>与版本好无关的ProgID也直接被列在HKEY_CLASSES_ROOT下面。它们还有另外一个关键字CurVer，其缺省值为组件当前版本的ProgID，如下图：</p><h3 id="ProgID和CLSID的转换"><a href="#ProgID和CLSID的转换" class="headerlink" title="ProgID和CLSID的转换"></a>ProgID和CLSID的转换</h3><ul><li>CLSIDFromProgID</li><li>ProgIDFromCLSID</li></ul><h3 id="组件的自注册"><a href="#组件的自注册" class="headerlink" title="组件的自注册"></a>组件的自注册</h3><p>为把组件注册到注册表，在DLL中一定要输出如下两个函数：</p><p>STDAPI DllRegisterServer(); //注册</p><p>STDAPI DllUnregisterServer(); //反注册</p><p>我们使用Regsvr32.exe注册某个组件或者反注册某个组件时，其实就是调用这两个函数的过程。</p><hr><div style="color:#757288;font-size:1.3rem;padding:2px 6px;border:1px solid #fad2d2;background:#ffecea;border-radius:3px;line-height:22px;">          版权声明：<br>文章首发于 <a href="http://zhichaowang.online"> Jim Wang's blog </a>，          转载文章请务必以超链接形式标明文章出处，作者信息及本版权声明。        </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: Jim Wang 公众号: &lt;a class=&quot;main-button-link&quot; href=&quot;#wechat&quot; rel=&quot;noopener&quot;&gt;巴博萨船长&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Windows-注册表&quot;&gt;&lt;a href=&quot;#Windows-注册表&quot; class=&quot;headerlink&quot; title=&quot;Windows 注册表&quot;&gt;&lt;/a&gt;Windows 注册表&lt;/h2&gt;&lt;p&gt;HKEY_CLASSES_ROOT在此关键字之下，可以看见有一个CLSID关键字。在CLSID关键字之下列有系统中安装的所有组件的CLSID。注册表CLSID是一个具有如下格式的串：00000010-0000-0010-8000-00AA00D2EA4&lt;/p&gt;
    
    </summary>
    
    
      <category term="Inno Setup 相关 - 实战经验" scheme="https://zicowarn.github.io/categories/Inno-Setup-%E7%9B%B8%E5%85%B3-%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Inno Setup" scheme="https://zicowarn.github.io/tags/Inno-Setup/"/>
    
      <category term="注册表" scheme="https://zicowarn.github.io/tags/%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    
  </entry>
  
</feed>
